name: build

on: [push,pull_request]

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true
jobs:
  # os:
  #   timeout-minutes: 15
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [ubuntu-latest, windows-latest, macos-13]
  #   needs: setup
  #   steps:
  #     - uses: actions/checkout@v3
  #     # Get the cores 
  #     - name: Get number of cores (Ubuntu)
  #       if: startsWith(runner.os, 'Linux')
  #       run: echo "CORES=$(nproc --all)" >> $GITHUB_ENV
  #     - name: Get number of cores (macOS)
  #       if: startsWith(runner.os, 'macOS')
  #       run: echo "CORES=$(sysctl -n hw.logicalcpu)" >> $GITHUB_ENV
  #     - name: Get number of cores (windows)
  #       if: startsWith(runner.os, 'Windows')
  #       run: echo "CORES=$env:NUMBER_OF_PROCESSORS" >> $GITHUB_ENV
  #     - uses: actions/setup-go@v3
  #       continue-on-error: true
  #       with:
  #         go-version: '1.21.3' # The Go version to download (if necessary) and use.
  #     - name: Install lix
  #       run: npm i https://github.com/antriel/lix.client/ -g
  #     - name: Download haxe specific version
  #       run: npx lix install haxe a97dc16
  #     - name: Run lix
  #       run: npx lix download
  #     # go2hx setup
  #     - name: Set source
  #       run: npx haxelib dev go2hx .
  #     - uses: actions/cache/restore@v4
  #       id: setup-cache
  #       with:
  #         path: |
  #           TypeInfoData_go2hx_hxb.hx
  #           ./_internal/*
  #           ./stdgo/*
  #           ./go2hx.*.zip 
  #         key: ${{ github.sha }}-build-${{ env.cache-name }}
  #     - name: Build go2hx compiler
  #       run: npx haxe --run Run build
  #     - name: Create vendor
  #       run: go mod vendor
  #     # compile stdgo
  #     - name: Run unicode test suite
  #       run: npx haxe stdgo/unicode.hxml --interp
  setup:
    timeout-minutes: 15
    strategy:
      fail-fast: false
    runs-on: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v3
      # Get the cores 
      - name: Get number of cores (Ubuntu)
        if: startsWith(runner.os, 'Linux')
        run: echo "CORES=$(nproc --all)" >> $GITHUB_ENV
      - name: Get number of cores (macOS)
        if: startsWith(runner.os, 'macOS')
        run: echo "CORES=$(sysctl -n hw.logicalcpu)" >> $GITHUB_ENV
      - uses: actions/setup-go@v3
        continue-on-error: true
        with:
          go-version: '1.21.3' # The Go version to download (if necessary) and use.
      - name: Install lix
        run: npm i lix -g
      - name: Run lix
        run: npx lix download
      # go2hx setup
      - name: Set source
        run: npx haxelib dev go2hx .
      # clean stdgo
      - name: Clean go2hx
        run: npx haxelib run go2hx clean
      - name: Build go2hx compiler
        run: npx haxe --run Run build
      - name: Create vendor
        run: go mod vendor
      # compile stdgo
      - name: Run stdgo automatic compile
        run: npx haxe scripts/stdgo.hxml -D runnerCount=${{ env.CORES }}
      #- name: Create hxb
      #  run: npx haxelib run go2hx hxb .
      # cache
      - name: Cache setup of stdgo and hxb
        id: cache-setup
        uses: actions/cache/save@v4
        env:
          cache-name: cache-setup
        if: always()
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: |
            TypeInfoData_go2hx_hxb.hx
            ./_internal/*
            ./stdgo/*
            ./go2hx.*.zip
          key: ${{ github.sha }}-build-${{ env.cache-name }}
  build:
    timeout-minutes: 26
    needs: setup
    strategy:
      fail-fast: false
    runs-on: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v3
      # Get the cores 
      - name: Get number of cores (Ubuntu)
        if: startsWith(runner.os, 'Linux')
        run: echo "CORES=$(nproc --all)" >> $GITHUB_ENV
      - name: Get number of cores (macOS)
        if: startsWith(runner.os, 'macOS')
        run: echo "CORES=$(sysctl -n hw.logicalcpu)" >> $GITHUB_ENV
      # non self-host setup
      - uses: cedx/setup-hashlink@v4.0.2
        continue-on-error: true
      - uses: actions/setup-go@v3
        continue-on-error: true
        with:
          go-version: '1.21.3' # The Go version to download (if necessary) and use.
      - name: Install lix
        run: npm i lix -g
      - name: Run lix
        run: npx lix download
      # go2hx setup
      - name: Build go2hx compiler
        run: npx haxe --run Run build
      - name: Set source
        run: haxelib dev go2hx .
      # clean stdgo
      - uses: actions/cache/restore@v4
        id: setup-cache
        with:
          path: |
            TypeInfoData_go2hx_hxb.hx
            ./_internal/*
            ./stdgo/*
            ./go2hx.*.zip 
          key: ${{ github.sha }}-build-${{ env.cache-name }}
      - run: ls
      # compile stdgo
      #- name: Run stdgo automatic compile
      #  run: npx haxe scripts/stdgo.hxml -D runnerCount=${{ env.CORES }}
      - name: Run unit
        run: npx haxe tests/tests.hxml -D unit -D ci -D runnerCount=${{ env.CORES }} #-D hxb
      - name: Run std
        run: npx haxe tests/tests.hxml -D std -D ci -D runnerCount=${{ env.CORES }} #-D hxb
      - name: Pull latest
        run: git pull
      - uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: stdgo automatic compile
  yaegi-easy:
    timeout-minutes: 25
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: cedx/setup-hashlink@v4.0.2
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: '1.21.3' # The Go version to download (if necessary) and use.
      # Get the cores 
      - name: Get number of cores (Ubuntu)
        if: startsWith(runner.os, 'Linux')
        run: echo "CORES=$(nproc --all)" >> $GITHUB_ENV
      - name: Get number of cores (macOS)
        if: startsWith(runner.os, 'macOS')
        run: echo "CORES=$(sysctl -n hw.logicalcpu)" >> $GITHUB_ENV
      - name: Install lix
        run: npm i lix -g
      - name: Run lix
        run: npx lix download
      # go2hx setup
      - name: Build go2hx compiler
        run: npx haxe --run Run build
      - name: Set source
        run: npx haxelib dev go2hx .
      - uses: actions/cache/restore@v4
        id: setup-cache
        with:
          path: |
            TypeInfoData_go2hx_hxb.hx
            ./_internal/*
            ./stdgo/*
            ./go2hx.*.zip 
          key: ${{ github.sha }}-build-${{ env.cache-name }}
      # run yaegi easy tests
      - name: clone yaegi
        run: git clone https://github.com/traefik/yaegi -b v0.16.1 --depth=1 ./tests/yaegi
      - name: Sort tests
        run: go run ./scripts/sortTests ci
      - name: Run yaegi easy tests
        run: npx haxe tests/tests.hxml -D yaegi -D ci -D mode=easy -D runnerCount=${{ env.CORES }} #-D hxb
      - name: Remove stdgo folder
        run: rm -r -d stdgo
      - name: Remove _internal folder
        run: rm -r -d _internal
      - name: Remove hxb zips
        run: rm go2hx.*.zip
      # git pull latest
      - name: Pull latest
        run: git pull
      # add yaegi_easy.json regression 
      - uses: stefanzweifel/git-auto-commit-action@v5
        with:
            commit_message: yaegi easy tests update
            file_pattern: '*.json'
            disable_globbing: true
  go-easy:
    timeout-minutes: 25
    needs: setup
    strategy:
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - uses: cedx/setup-hashlink@v4.0.2
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: '1.21.3' # The Go version to download (if necessary) and use.
      # Get the cores 
      - name: Get number of cores (Ubuntu)
        if: startsWith(runner.os, 'Linux')
        run: echo "CORES=$(nproc --all)" >> $GITHUB_ENV
      - name: Get number of cores (macOS)
        if: startsWith(runner.os, 'macOS')
        run: echo "CORES=$(sysctl -n hw.logicalcpu)" >> $GITHUB_ENV
      - name: Install lix
        run: npm i lix -g
      - name: Run lix
        run: npx lix download
      # go2hx setup
      # clean stdgo
      - name: Clean go2hx
        run: npx haxe --run Run clean
      # compile stdgo
      - name: Build go2hx compiler
        run: npx haxe --run Run build
      - name: Set source
        run: haxelib dev go2hx .
      - uses: actions/cache/restore@v4
        id: setup-cache
        with:
          path: |
            TypeInfoData_go2hx_hxb.hx
            ./_internal/*
            ./stdgo/*
            ./go2hx.*.zip 
          key: ${{ github.sha }}-build-${{ env.cache-name }}
      - name: clone go
        run: git clone https://github.com/golang/go -b go1.21.3 --depth=1 ./tests/go
        continue-on-error: true
      - name: Sort tests
        run: go run ./scripts/sortTests ci
      - name: Display go-easy sortTests
        run: cat tests/go_easy.json
      # run go easy tests
      - name: Run go easy tests
        run: npx haxe tests/tests.hxml -D go -D ci -D mode=easy -D runnerCount=${{ env.CORES }} -D nologs #-D hxb
      - name: Remove stdgo folder
        run: rm -r -d stdgo
      - name: Remove _internal folder
        run: rm -r -d _internal
      - name: Remove hxb zips
        run: rm go2hx.*.zip
      # git pull latest
      - name: Pull latest
        run: git pull
      # add go_easy.json regression 
      - uses: stefanzweifel/git-auto-commit-action@v5
        with:
            commit_message: go easy tests update
            file_pattern: '*.json'
            disable_globbing: true
  generate-docs:
    timeout-minutes: 25
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: '1.21.3' # The Go version to download (if necessary) and use.
      # Add any additional setup steps required for the documentation generation
      - name: Install lix
        run: npm i lix -g
      - name: Run lix
        run: npx lix download
      # go2hx setup
      - name: Set source
        run: npx haxelib dev go2hx .
      - name: Delete go mod
        run: rm go.mod
      - name: Go mod init
        run: go mod init github.com/go2hx/go4hx
      - name: Get go2hxdoc
        run: go get github.com/go2hx/go2hxdoc
      - name: Build go2hxdoc
        run: go build github.com/go2hx/go2hxdoc
      - name: Run go2hxdoc
        run: ./go2hxdoc -dir `npx haxelib libpath go2hx`stdgo -stats -force -seq
      - name: delete bin
        run: rm -r -d bin
      - name: delete stdgo.json
        run: rm stdgo/stdgo.json
      - name: delete go mod and sum
        run: rm go.mod && rm go.sum
      - name: Git pull
        run: git pull
      - name: Commit docs
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: stdgo doc generation
          file_pattern: '*.md'
          disable_globbing: true