# DO NOT EDIT. Generated from scripts/github-action
name: build

on: [push, pull_request]

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true
jobs:
  setup:
    timeout-minutes: 15
    strategy:
      fail-fast: false
    runs-on: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v4
      # Get the cores 
      - name: Get number of cores (Ubuntu)
        if: startsWith(runner.os, 'Linux')
        run: echo "CORES=$(nproc --all)" >> $GITHUB_ENV
      - name: Get number of cores (macOS)
        if: startsWith(runner.os, 'macOS')
        run: echo "CORES=$(sysctl -n hw.logicalcpu)" >> $GITHUB_ENV
      - uses: actions/setup-go@v3
        continue-on-error: true
        with:
          go-version: '1.21.3' # The Go version to download (if necessary) and use.
      - name: Install lix
        run: npm i lix -g
      - name: Run lix
        run: npx lix download
      # go2hx setup
      - name: Set source
        run: npx haxelib dev go2hx .
      # clean stdgo
      - name: Clean stdgo
        run: npx haxe --run Run clean
      - name: Build go2hx compiler
        run: npx haxe --run Run build
      - name: Create vendor
        run: go mod vendor
      # compile stdgo
      - name: Run stdgo automatic compile
        run: npx haxe scripts/stdgo.hxml -D runnerCount=${{ env.CORES }}
      #- name: Create hxb
      #  run: npx haxelib run go2hx hxb .
      # cache
      - name: Cache setup of stdgo and hxb
        id: cache-setup
        uses: actions/cache/save@v4
        env:
          cache-name: cache-setup
        if: always()
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: |
            TypeInfoData_go2hx_hxb.hx
            ./_internal/*
            ./stdgo/*
            ./go2hx.*.zip
          key: ${{ github.sha }}-build-${{ env.cache-name }}
  goto:
    timeout-minutes: 15
    strategy:
      fail-fast: false
    runs-on: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v3
        continue-on-error: true
        with:
          go-version: '1.21.3' # The Go version to download (if necessary) and use.
      - run: git clone https://github.com/go2hx/tools --depth=1
      - name: Create vendor
        run: go mod vendor
      - run: go run . -goto
  interop:
    timeout-minutes: 15
    needs: setup
    strategy:
      fail-fast: false
    runs-on: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v3
        with:
          go-version: '1.21.3' # The Go version to download (if necessary) and use.
      - name: Install lix
        run: npm i lix -g
      - name: Run lix
        run: npx lix download
      # go2hx setup
      - name: Build go2hx compiler
        run: npx haxe --run Run build
      - name: Set source
        run: haxelib dev go2hx .
      - name: Clean stdgo
        run: npx haxe --run Run clean
      - uses: actions/cache/restore@v4
        id: setup-cache
        with:
          path: |
            TypeInfoData_go2hx_hxb.hx
            ./_internal/*
            ./stdgo/*
            ./go2hx.*.zip 
          key: ${{ github.sha }}-build-${{ env.cache-name }}
      - name: Build interop test
        run: haxelib run go2hx ./tests/interop --nolibwrap
      - name: Test interop
        run: haxe tests/interop.hxml
  pointer:
    timeout-minutes: 15
    strategy:
      fail-fast: false
    runs-on: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v3
        continue-on-error: true
        with:
          go-version: '1.21.3' # The Go version to download (if necessary) and use.
      - run: git clone https://github.com/go2hx/tools --depth=1
      - name: Create vendor
        run: go mod vendor
      - run: go run . -pointer
  stdgo:
    timeout-minutes: 15
    needs: [build-hl,build-interp,build-js]
    strategy:
      fail-fast: false
    runs-on: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v4
      - name: Install lix
        run: npm i lix -g
      - name: Run lix
        run: npx lix download
      # go2hx setup
      - name: Build go2hx compiler
        run: npx haxe --run Run build
      - name: Set source
        run: haxelib dev go2hx .
      - name: Clean stdgo
        run: npx haxe --run Run clean
      - uses: actions/cache/restore@v4
        id: setup-cache
        with:
          path: |
            TypeInfoData_go2hx_hxb.hx
            ./_internal/*
            ./stdgo/*
            ./go2hx.*.zip 
          key: ${{ github.sha }}-build-${{ env.cache-name }}
      - uses: EndBug/add-and-commit@v9
        continue-on-error: true
        with:
            message: stdgo automatic compile
            pull: --rebase --autostash
            add: --no-ignore-removal .
        if: github.ref == 'refs/heads/master' && github.event_name != 'pull_request'
  create-test-lists:
    timeout-minutes: 15
    needs: []
    strategy:
      fail-fast: false
    runs-on: [ubuntu-latest]
    steps:
      - uses: actions/setup-go@v3
        with:
          go-version: '1.21.3' # The Go version to download (if necessary) and use.
      - uses: actions/checkout@v4
      - name: Install lix
        run: npm i lix -g
      - name: Run lix
        run: npx lix download
      - run: git clone https://github.com/go2hx/tools --depth=1
      - name: clone yaegi
        run: git clone https://github.com/traefik/yaegi -b v0.16.1 --depth=1 ./tests/yaegi
      - name: clone go
        run: git clone https://github.com/golang/go -b go1.21.3 --depth=1 ./tests/go
      - name: Sort tests
        run: go run ./scripts/sortTests ci
      - name: Create test lists
        run: haxe tests/tests.hxml -D ci -D listAll
      - uses: EndBug/add-and-commit@v9
        with:
            message: create test lists
            pull: --rebase --autostash
            add: ./tests
        if: github.ref == 'refs/heads/master' && github.event_name != 'pull_request'
  libs-hl:
    timeout-minutes: 75
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v3
        with:
          go-version: '1.21.3' # The Go version to download (if necessary) and use.
      - uses: cedx/setup-hashlink@v6.0.0
      # Get the cores 
      - name: Get number of cores (Ubuntu)
        if: startsWith(runner.os, 'Linux')
        run: echo "CORES=$(nproc --all)" >> $GITHUB_ENV
      - name: Get number of cores (macOS)
        if: startsWith(runner.os, 'macOS')
        run: echo "CORES=$(sysctl -n hw.logicalcpu)" >> $GITHUB_ENV
      - name: Install lix
        run: npm i lix -g
      - name: Run lix
        run: npx lix download
      # go2hx setup
      - name: Clean stdgo
        run: npx haxe --run Run clean
      - name: Build go2hx compiler
        run: npx haxe --run Run build
      - name: Set source
        run: npx haxelib dev go2hx .
      - uses: actions/cache/restore@v4
        id: setup-cache
        with:
          path: |
            TypeInfoData_go2hx_hxb.hx
            ./_internal/*
            ./stdgo/*
            ./go2hx.*.zip 
          key: ${{ github.sha }}-build-${{ env.cache-name }}
      - name: Run lib tests
        run: npx haxe tests/tests.hxml -D libs -D ci -D runnerCount=${{ env.CORES }} -D targets=hl #-D hxb
      - name: Remove stdgo folder
        run: rm -r -d stdgo
      - name: Remove _internal folder
        run: rm -r -d _internal
      - uses: EndBug/add-and-commit@v9
        with:
            message: libs tests update hl
            add: ./tests
            pull: --rebase --autostash
        continue-on-error: true
        if: github.ref == 'refs/heads/master' && github.event_name != 'pull_request'
  libs-interp:
    timeout-minutes: 75
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v3
        with:
          go-version: '1.21.3' # The Go version to download (if necessary) and use.
    
      # Get the cores 
      - name: Get number of cores (Ubuntu)
        if: startsWith(runner.os, 'Linux')
        run: echo "CORES=$(nproc --all)" >> $GITHUB_ENV
      - name: Get number of cores (macOS)
        if: startsWith(runner.os, 'macOS')
        run: echo "CORES=$(sysctl -n hw.logicalcpu)" >> $GITHUB_ENV
      - name: Install lix
        run: npm i lix -g
      - name: Run lix
        run: npx lix download
      # go2hx setup
      - name: Clean stdgo
        run: npx haxe --run Run clean
      - name: Build go2hx compiler
        run: npx haxe --run Run build
      - name: Set source
        run: npx haxelib dev go2hx .
      - uses: actions/cache/restore@v4
        id: setup-cache
        with:
          path: |
            TypeInfoData_go2hx_hxb.hx
            ./_internal/*
            ./stdgo/*
            ./go2hx.*.zip 
          key: ${{ github.sha }}-build-${{ env.cache-name }}
      - name: Run lib tests
        run: npx haxe tests/tests.hxml -D libs -D ci -D runnerCount=${{ env.CORES }} -D targets=interp #-D hxb
      - name: Remove stdgo folder
        run: rm -r -d stdgo
      - name: Remove _internal folder
        run: rm -r -d _internal
      - uses: EndBug/add-and-commit@v9
        with:
            message: libs tests update interp
            add: ./tests
            pull: --rebase --autostash
        continue-on-error: true
        if: github.ref == 'refs/heads/master' && github.event_name != 'pull_request'
  libs-js:
    timeout-minutes: 75
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v3
        with:
          go-version: '1.21.3' # The Go version to download (if necessary) and use.
      - uses: actions/setup-node@v4
        with:
          node-version: 23
      - run: node --v8-options
      # Get the cores 
      - name: Get number of cores (Ubuntu)
        if: startsWith(runner.os, 'Linux')
        run: echo "CORES=$(nproc --all)" >> $GITHUB_ENV
      - name: Get number of cores (macOS)
        if: startsWith(runner.os, 'macOS')
        run: echo "CORES=$(sysctl -n hw.logicalcpu)" >> $GITHUB_ENV
      - name: Install lix
        run: npm i lix -g
      - name: Run lix
        run: npx lix download
      # go2hx setup
      - name: Clean stdgo
        run: npx haxe --run Run clean
      - name: Build go2hx compiler
        run: npx haxe --run Run build
      - name: Set source
        run: npx haxelib dev go2hx .
      - uses: actions/cache/restore@v4
        id: setup-cache
        with:
          path: |
            TypeInfoData_go2hx_hxb.hx
            ./_internal/*
            ./stdgo/*
            ./go2hx.*.zip 
          key: ${{ github.sha }}-build-${{ env.cache-name }}
      - name: Run lib tests
        run: npx haxe tests/tests.hxml -D libs -D ci -D runnerCount=${{ env.CORES }} -D targets=js #-D hxb
      - name: Remove stdgo folder
        run: rm -r -d stdgo
      - name: Remove _internal folder
        run: rm -r -d _internal
      - uses: EndBug/add-and-commit@v9
        with:
            message: libs tests update js
            add: ./tests
            pull: --rebase --autostash
        continue-on-error: true
        if: github.ref == 'refs/heads/master' && github.event_name != 'pull_request'
  go-easy-hl:
    timeout-minutes: 75
    needs: setup
    strategy:
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: cleanup
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
      - uses: actions/setup-go@v3
        with:
          go-version: '1.21.3' # The Go version to download (if necessary) and use.
      - uses: cedx/setup-hashlink@v6.0.0
      # Get the cores 
      - name: Get number of cores (Ubuntu)
        if: startsWith(runner.os, 'Linux')
        run: echo "CORES=$(nproc --all)" >> $GITHUB_ENV
      - name: Get number of cores (macOS)
        if: startsWith(runner.os, 'macOS')
        run: echo "CORES=$(sysctl -n hw.logicalcpu)" >> $GITHUB_ENV
      - name: Install lix
        run: npm i lix -g
      - name: Run lix
        run: npx lix download
      # go2hx setup
      # clean stdgo
      - name: Clean go2hx
        run: npx haxe --run Run clean
      # compile stdgo
      - name: Build go2hx compiler
        run: npx haxe --run Run build
      - name: Set source
        run: haxelib dev go2hx .
      - uses: actions/cache/restore@v4
        id: setup-cache
        with:
          path: |
            TypeInfoData_go2hx_hxb.hx
            ./_internal/*
            ./stdgo/*
            ./go2hx.*.zip 
          key: ${{ github.sha }}-build-${{ env.cache-name }}
      - name: clone go
        run: git clone https://github.com/golang/go -b go1.21.3 --depth=1 ./tests/go
        continue-on-error: true
      - name: Sort tests
        run: go run ./scripts/sortTests ci
      # run go easy tests
      - name: Run go easy tests
        run: npx haxe tests/tests.hxml -D go -D ci -D mode=easy -D runnerCount=${{ env.CORES }} -D nologs -D targets=hl #-D hxb
      - name: Remove stdgo folder
        run: rm -r -d stdgo
      - name: Remove _internal folder
        run: rm -r -d _internal
      # add go_easy.json regression 
      - uses: EndBug/add-and-commit@v9
        with:
            message: go easy tests update hl
            add: ./tests
            pull: --rebase --autostash
        if: github.ref == 'refs/heads/master' && github.event_name != 'pull_request'
        continue-on-error: true
  go-easy-interp:
    timeout-minutes: 75
    needs: setup
    strategy:
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: cleanup
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
      - uses: actions/setup-go@v3
        with:
          go-version: '1.21.3' # The Go version to download (if necessary) and use.
    
      # Get the cores 
      - name: Get number of cores (Ubuntu)
        if: startsWith(runner.os, 'Linux')
        run: echo "CORES=$(nproc --all)" >> $GITHUB_ENV
      - name: Get number of cores (macOS)
        if: startsWith(runner.os, 'macOS')
        run: echo "CORES=$(sysctl -n hw.logicalcpu)" >> $GITHUB_ENV
      - name: Install lix
        run: npm i lix -g
      - name: Run lix
        run: npx lix download
      # go2hx setup
      # clean stdgo
      - name: Clean go2hx
        run: npx haxe --run Run clean
      # compile stdgo
      - name: Build go2hx compiler
        run: npx haxe --run Run build
      - name: Set source
        run: haxelib dev go2hx .
      - uses: actions/cache/restore@v4
        id: setup-cache
        with:
          path: |
            TypeInfoData_go2hx_hxb.hx
            ./_internal/*
            ./stdgo/*
            ./go2hx.*.zip 
          key: ${{ github.sha }}-build-${{ env.cache-name }}
      - name: clone go
        run: git clone https://github.com/golang/go -b go1.21.3 --depth=1 ./tests/go
        continue-on-error: true
      - name: Sort tests
        run: go run ./scripts/sortTests ci
      # run go easy tests
      - name: Run go easy tests
        run: npx haxe tests/tests.hxml -D go -D ci -D mode=easy -D runnerCount=${{ env.CORES }} -D nologs -D targets=interp #-D hxb
      - name: Remove stdgo folder
        run: rm -r -d stdgo
      - name: Remove _internal folder
        run: rm -r -d _internal
      # add go_easy.json regression 
      - uses: EndBug/add-and-commit@v9
        with:
            message: go easy tests update interp
            add: ./tests
            pull: --rebase --autostash
        if: github.ref == 'refs/heads/master' && github.event_name != 'pull_request'
        continue-on-error: true
  go-easy-js:
    timeout-minutes: 75
    needs: setup
    strategy:
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: cleanup
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
      - uses: actions/setup-go@v3
        with:
          go-version: '1.21.3' # The Go version to download (if necessary) and use.
      - uses: actions/setup-node@v4
        with:
          node-version: 23
      - run: node --v8-options
      # Get the cores 
      - name: Get number of cores (Ubuntu)
        if: startsWith(runner.os, 'Linux')
        run: echo "CORES=$(nproc --all)" >> $GITHUB_ENV
      - name: Get number of cores (macOS)
        if: startsWith(runner.os, 'macOS')
        run: echo "CORES=$(sysctl -n hw.logicalcpu)" >> $GITHUB_ENV
      - name: Install lix
        run: npm i lix -g
      - name: Run lix
        run: npx lix download
      # go2hx setup
      # clean stdgo
      - name: Clean go2hx
        run: npx haxe --run Run clean
      # compile stdgo
      - name: Build go2hx compiler
        run: npx haxe --run Run build
      - name: Set source
        run: haxelib dev go2hx .
      - uses: actions/cache/restore@v4
        id: setup-cache
        with:
          path: |
            TypeInfoData_go2hx_hxb.hx
            ./_internal/*
            ./stdgo/*
            ./go2hx.*.zip 
          key: ${{ github.sha }}-build-${{ env.cache-name }}
      - name: clone go
        run: git clone https://github.com/golang/go -b go1.21.3 --depth=1 ./tests/go
        continue-on-error: true
      - name: Sort tests
        run: go run ./scripts/sortTests ci
      # run go easy tests
      - name: Run go easy tests
        run: npx haxe tests/tests.hxml -D go -D ci -D mode=easy -D runnerCount=${{ env.CORES }} -D nologs -D targets=js #-D hxb
      - name: Remove stdgo folder
        run: rm -r -d stdgo
      - name: Remove _internal folder
        run: rm -r -d _internal
      # add go_easy.json regression 
      - uses: EndBug/add-and-commit@v9
        with:
            message: go easy tests update js
            add: ./tests
            pull: --rebase --autostash
        if: github.ref == 'refs/heads/master' && github.event_name != 'pull_request'
        continue-on-error: true
  yaegi-easy-hl:
    timeout-minutes: 75
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v3
        with:
          go-version: '1.21.3' # The Go version to download (if necessary) and use.
      - uses: cedx/setup-hashlink@v6.0.0
      # Get the cores 
      - name: Get number of cores (Ubuntu)
        if: startsWith(runner.os, 'Linux')
        run: echo "CORES=$(nproc --all)" >> $GITHUB_ENV
      - name: Get number of cores (macOS)
        if: startsWith(runner.os, 'macOS')
        run: echo "CORES=$(sysctl -n hw.logicalcpu)" >> $GITHUB_ENV
      - name: Install lix
        run: npm i lix -g
      - name: Run lix
        run: npx lix download
      # go2hx setup
      - name: Clean stdgo
        run: npx haxe --run Run clean
      - name: Build go2hx compiler
        run: npx haxe --run Run build
      - name: Set source
        run: npx haxelib dev go2hx .
      - uses: actions/cache/restore@v4
        id: setup-cache
        with:
          path: |
            TypeInfoData_go2hx_hxb.hx
            ./_internal/*
            ./stdgo/*
            ./go2hx.*.zip 
          key: ${{ github.sha }}-build-${{ env.cache-name }}
      # run yaegi easy tests
      - name: clone yaegi
        run: git clone https://github.com/traefik/yaegi -b v0.16.1 --depth=1 ./tests/yaegi
      - name: Sort tests
        run: go run ./scripts/sortTests ci
      - name: Run yaegi easy tests
        run: npx haxe tests/tests.hxml -D yaegi -D ci -D mode=easy -D runnerCount=${{ env.CORES }} -D targets=hl #-D hxb
      - name: Remove stdgo folder
        run: rm -r -d stdgo
      - name: Remove _internal folder
        run: rm -r -d _internal
      # add yaegi_easy.json regression 
      - uses: EndBug/add-and-commit@v9
        with:
            message: yaegi easy tests update hl
            add: ./tests
            pull: --rebase --autostash
        continue-on-error: true
        if: github.ref == 'refs/heads/master' && github.event_name != 'pull_request'
  yaegi-easy-interp:
    timeout-minutes: 75
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v3
        with:
          go-version: '1.21.3' # The Go version to download (if necessary) and use.
    
      # Get the cores 
      - name: Get number of cores (Ubuntu)
        if: startsWith(runner.os, 'Linux')
        run: echo "CORES=$(nproc --all)" >> $GITHUB_ENV
      - name: Get number of cores (macOS)
        if: startsWith(runner.os, 'macOS')
        run: echo "CORES=$(sysctl -n hw.logicalcpu)" >> $GITHUB_ENV
      - name: Install lix
        run: npm i lix -g
      - name: Run lix
        run: npx lix download
      # go2hx setup
      - name: Clean stdgo
        run: npx haxe --run Run clean
      - name: Build go2hx compiler
        run: npx haxe --run Run build
      - name: Set source
        run: npx haxelib dev go2hx .
      - uses: actions/cache/restore@v4
        id: setup-cache
        with:
          path: |
            TypeInfoData_go2hx_hxb.hx
            ./_internal/*
            ./stdgo/*
            ./go2hx.*.zip 
          key: ${{ github.sha }}-build-${{ env.cache-name }}
      # run yaegi easy tests
      - name: clone yaegi
        run: git clone https://github.com/traefik/yaegi -b v0.16.1 --depth=1 ./tests/yaegi
      - name: Sort tests
        run: go run ./scripts/sortTests ci
      - name: Run yaegi easy tests
        run: npx haxe tests/tests.hxml -D yaegi -D ci -D mode=easy -D runnerCount=${{ env.CORES }} -D targets=interp #-D hxb
      - name: Remove stdgo folder
        run: rm -r -d stdgo
      - name: Remove _internal folder
        run: rm -r -d _internal
      # add yaegi_easy.json regression 
      - uses: EndBug/add-and-commit@v9
        with:
            message: yaegi easy tests update interp
            add: ./tests
            pull: --rebase --autostash
        continue-on-error: true
        if: github.ref == 'refs/heads/master' && github.event_name != 'pull_request'
  yaegi-easy-js:
    timeout-minutes: 75
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v3
        with:
          go-version: '1.21.3' # The Go version to download (if necessary) and use.
      - uses: actions/setup-node@v4
        with:
          node-version: 23
      - run: node --v8-options
      # Get the cores 
      - name: Get number of cores (Ubuntu)
        if: startsWith(runner.os, 'Linux')
        run: echo "CORES=$(nproc --all)" >> $GITHUB_ENV
      - name: Get number of cores (macOS)
        if: startsWith(runner.os, 'macOS')
        run: echo "CORES=$(sysctl -n hw.logicalcpu)" >> $GITHUB_ENV
      - name: Install lix
        run: npm i lix -g
      - name: Run lix
        run: npx lix download
      # go2hx setup
      - name: Clean stdgo
        run: npx haxe --run Run clean
      - name: Build go2hx compiler
        run: npx haxe --run Run build
      - name: Set source
        run: npx haxelib dev go2hx .
      - uses: actions/cache/restore@v4
        id: setup-cache
        with:
          path: |
            TypeInfoData_go2hx_hxb.hx
            ./_internal/*
            ./stdgo/*
            ./go2hx.*.zip 
          key: ${{ github.sha }}-build-${{ env.cache-name }}
      # run yaegi easy tests
      - name: clone yaegi
        run: git clone https://github.com/traefik/yaegi -b v0.16.1 --depth=1 ./tests/yaegi
      - name: Sort tests
        run: go run ./scripts/sortTests ci
      - name: Run yaegi easy tests
        run: npx haxe tests/tests.hxml -D yaegi -D ci -D mode=easy -D runnerCount=${{ env.CORES }} -D targets=js #-D hxb
      - name: Remove stdgo folder
        run: rm -r -d stdgo
      - name: Remove _internal folder
        run: rm -r -d _internal
      # add yaegi_easy.json regression 
      - uses: EndBug/add-and-commit@v9
        with:
            message: yaegi easy tests update js
            add: ./tests
            pull: --rebase --autostash
        continue-on-error: true
        if: github.ref == 'refs/heads/master' && github.event_name != 'pull_request'
  go-medium-hl:
    timeout-minutes: 75
    needs: setup
    strategy:
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: cleanup
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
      - uses: actions/setup-go@v3
        with:
          go-version: '1.21.3' # The Go version to download (if necessary) and use.
      - uses: cedx/setup-hashlink@v6.0.0
      # Get the cores 
      - name: Get number of cores (Ubuntu)
        if: startsWith(runner.os, 'Linux')
        run: echo "CORES=$(nproc --all)" >> $GITHUB_ENV
      - name: Get number of cores (macOS)
        if: startsWith(runner.os, 'macOS')
        run: echo "CORES=$(sysctl -n hw.logicalcpu)" >> $GITHUB_ENV
      - name: Install lix
        run: npm i lix -g
      - name: Run lix
        run: npx lix download
      # go2hx setup
      # clean stdgo
      - name: Clean go2hx
        run: npx haxe --run Run clean
      # compile stdgo
      - name: Build go2hx compiler
        run: npx haxe --run Run build
      - name: Set source
        run: haxelib dev go2hx .
      - uses: actions/cache/restore@v4
        id: setup-cache
        with:
          path: |
            TypeInfoData_go2hx_hxb.hx
            ./_internal/*
            ./stdgo/*
            ./go2hx.*.zip 
          key: ${{ github.sha }}-build-${{ env.cache-name }}
      - name: clone go
        run: git clone https://github.com/golang/go -b go1.21.3 --depth=1 ./tests/go
        continue-on-error: true
      - name: Sort tests
        run: go run ./scripts/sortTests ci
      # run go medium tests
      - name: Run go medium tests
        run: npx haxe tests/tests.hxml -D go -D ci -D mode=medium -D runnerCount=${{ env.CORES }} -D nologs -D targets=hl #-D hxb
      - name: Remove stdgo folder
        run: rm -r -d stdgo
      - name: Remove _internal folder
        run: rm -r -d _internal
      # add go_medium.json regression 
      - uses: EndBug/add-and-commit@v9
        with:
            message: go medium tests update hl
            add: ./tests
            pull: --rebase --autostash
        if: github.ref == 'refs/heads/master' && github.event_name != 'pull_request'
        continue-on-error: true
  go-medium-js:
    timeout-minutes: 75
    needs: setup
    strategy:
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: cleanup
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
      - uses: actions/setup-go@v3
        with:
          go-version: '1.21.3' # The Go version to download (if necessary) and use.
      - uses: actions/setup-node@v4
        with:
          node-version: 23
      - run: node --v8-options
      # Get the cores 
      - name: Get number of cores (Ubuntu)
        if: startsWith(runner.os, 'Linux')
        run: echo "CORES=$(nproc --all)" >> $GITHUB_ENV
      - name: Get number of cores (macOS)
        if: startsWith(runner.os, 'macOS')
        run: echo "CORES=$(sysctl -n hw.logicalcpu)" >> $GITHUB_ENV
      - name: Install lix
        run: npm i lix -g
      - name: Run lix
        run: npx lix download
      # go2hx setup
      # clean stdgo
      - name: Clean go2hx
        run: npx haxe --run Run clean
      # compile stdgo
      - name: Build go2hx compiler
        run: npx haxe --run Run build
      - name: Set source
        run: haxelib dev go2hx .
      - uses: actions/cache/restore@v4
        id: setup-cache
        with:
          path: |
            TypeInfoData_go2hx_hxb.hx
            ./_internal/*
            ./stdgo/*
            ./go2hx.*.zip 
          key: ${{ github.sha }}-build-${{ env.cache-name }}
      - name: clone go
        run: git clone https://github.com/golang/go -b go1.21.3 --depth=1 ./tests/go
        continue-on-error: true
      - name: Sort tests
        run: go run ./scripts/sortTests ci
      # run go medium tests
      - name: Run go medium tests
        run: npx haxe tests/tests.hxml -D go -D ci -D mode=medium -D runnerCount=${{ env.CORES }} -D nologs -D targets=js #-D hxb
      - name: Remove stdgo folder
        run: rm -r -d stdgo
      - name: Remove _internal folder
        run: rm -r -d _internal
      # add go_medium.json regression 
      - uses: EndBug/add-and-commit@v9
        with:
            message: go medium tests update js
            add: ./tests
            pull: --rebase --autostash
        if: github.ref == 'refs/heads/master' && github.event_name != 'pull_request'
        continue-on-error: true
  yaegi-medium-hl:
    timeout-minutes: 75
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v3
        with:
          go-version: '1.21.3' # The Go version to download (if necessary) and use.
      - uses: cedx/setup-hashlink@v6.0.0
      # Get the cores 
      - name: Get number of cores (Ubuntu)
        if: startsWith(runner.os, 'Linux')
        run: echo "CORES=$(nproc --all)" >> $GITHUB_ENV
      - name: Get number of cores (macOS)
        if: startsWith(runner.os, 'macOS')
        run: echo "CORES=$(sysctl -n hw.logicalcpu)" >> $GITHUB_ENV
      - name: Install lix
        run: npm i lix -g
      - name: Run lix
        run: npx lix download
      # go2hx setup
      - name: Clean stdgo
        run: npx haxe --run Run clean
      - name: Build go2hx compiler
        run: npx haxe --run Run build
      - name: Set source
        run: npx haxelib dev go2hx .
      - uses: actions/cache/restore@v4
        id: setup-cache
        with:
          path: |
            TypeInfoData_go2hx_hxb.hx
            ./_internal/*
            ./stdgo/*
            ./go2hx.*.zip 
          key: ${{ github.sha }}-build-${{ env.cache-name }}
      # run yaegi medium tests
      - name: clone yaegi
        run: git clone https://github.com/traefik/yaegi -b v0.16.1 --depth=1 ./tests/yaegi
      - name: Sort tests
        run: go run ./scripts/sortTests ci
      - name: Run yaegi medium tests
        run: npx haxe tests/tests.hxml -D yaegi -D ci -D mode=medium -D runnerCount=${{ env.CORES }} -D targets=hl #-D hxb
      - name: Remove stdgo folder
        run: rm -r -d stdgo
      - name: Remove _internal folder
        run: rm -r -d _internal
      # add yaegi_medium.json regression 
      - uses: EndBug/add-and-commit@v9
        with:
            message: yaegi medium tests update hl
            add: ./tests
            pull: --rebase --autostash
        continue-on-error: true
        if: github.ref == 'refs/heads/master' && github.event_name != 'pull_request'
  yaegi-medium-interp:
    timeout-minutes: 75
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v3
        with:
          go-version: '1.21.3' # The Go version to download (if necessary) and use.
    
      # Get the cores 
      - name: Get number of cores (Ubuntu)
        if: startsWith(runner.os, 'Linux')
        run: echo "CORES=$(nproc --all)" >> $GITHUB_ENV
      - name: Get number of cores (macOS)
        if: startsWith(runner.os, 'macOS')
        run: echo "CORES=$(sysctl -n hw.logicalcpu)" >> $GITHUB_ENV
      - name: Install lix
        run: npm i lix -g
      - name: Run lix
        run: npx lix download
      # go2hx setup
      - name: Clean stdgo
        run: npx haxe --run Run clean
      - name: Build go2hx compiler
        run: npx haxe --run Run build
      - name: Set source
        run: npx haxelib dev go2hx .
      - uses: actions/cache/restore@v4
        id: setup-cache
        with:
          path: |
            TypeInfoData_go2hx_hxb.hx
            ./_internal/*
            ./stdgo/*
            ./go2hx.*.zip 
          key: ${{ github.sha }}-build-${{ env.cache-name }}
      # run yaegi medium tests
      - name: clone yaegi
        run: git clone https://github.com/traefik/yaegi -b v0.16.1 --depth=1 ./tests/yaegi
      - name: Sort tests
        run: go run ./scripts/sortTests ci
      - name: Run yaegi medium tests
        run: npx haxe tests/tests.hxml -D yaegi -D ci -D mode=medium -D runnerCount=${{ env.CORES }} -D targets=interp #-D hxb
      - name: Remove stdgo folder
        run: rm -r -d stdgo
      - name: Remove _internal folder
        run: rm -r -d _internal
      # add yaegi_medium.json regression 
      - uses: EndBug/add-and-commit@v9
        with:
            message: yaegi medium tests update interp
            add: ./tests
            pull: --rebase --autostash
        continue-on-error: true
        if: github.ref == 'refs/heads/master' && github.event_name != 'pull_request'
  yaegi-medium-js:
    timeout-minutes: 75
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v3
        with:
          go-version: '1.21.3' # The Go version to download (if necessary) and use.
      - uses: actions/setup-node@v4
        with:
          node-version: 23
      - run: node --v8-options
      # Get the cores 
      - name: Get number of cores (Ubuntu)
        if: startsWith(runner.os, 'Linux')
        run: echo "CORES=$(nproc --all)" >> $GITHUB_ENV
      - name: Get number of cores (macOS)
        if: startsWith(runner.os, 'macOS')
        run: echo "CORES=$(sysctl -n hw.logicalcpu)" >> $GITHUB_ENV
      - name: Install lix
        run: npm i lix -g
      - name: Run lix
        run: npx lix download
      # go2hx setup
      - name: Clean stdgo
        run: npx haxe --run Run clean
      - name: Build go2hx compiler
        run: npx haxe --run Run build
      - name: Set source
        run: npx haxelib dev go2hx .
      - uses: actions/cache/restore@v4
        id: setup-cache
        with:
          path: |
            TypeInfoData_go2hx_hxb.hx
            ./_internal/*
            ./stdgo/*
            ./go2hx.*.zip 
          key: ${{ github.sha }}-build-${{ env.cache-name }}
      # run yaegi medium tests
      - name: clone yaegi
        run: git clone https://github.com/traefik/yaegi -b v0.16.1 --depth=1 ./tests/yaegi
      - name: Sort tests
        run: go run ./scripts/sortTests ci
      - name: Run yaegi medium tests
        run: npx haxe tests/tests.hxml -D yaegi -D ci -D mode=medium -D runnerCount=${{ env.CORES }} -D targets=js #-D hxb
      - name: Remove stdgo folder
        run: rm -r -d stdgo
      - name: Remove _internal folder
        run: rm -r -d _internal
      # add yaegi_medium.json regression 
      - uses: EndBug/add-and-commit@v9
        with:
            message: yaegi medium tests update js
            add: ./tests
            pull: --rebase --autostash
        continue-on-error: true
        if: github.ref == 'refs/heads/master' && github.event_name != 'pull_request'
  build-hl:
    
    timeout-minutes: 75
    needs: setup
    strategy:
      fail-fast: false
    runs-on: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v4
      # Get the cores 
      - name: Get number of cores (Ubuntu)
        if: startsWith(runner.os, 'Linux')
        run: echo "CORES=$(nproc --all)" >> $GITHUB_ENV
      - name: Get number of cores (macOS)
        if: startsWith(runner.os, 'macOS')
        run: echo "CORES=$(sysctl -n hw.logicalcpu)" >> $GITHUB_ENV
      # non self-host setup
        continue-on-error: true
      - uses: actions/setup-go@v3
        with:
          go-version: '1.21.3' # The Go version to download (if necessary) and use.
      - uses: cedx/setup-hashlink@v6.0.0
      - name: Install lix
        run: npm i lix -g
      - name: Run lix
        run: npx lix download
      # go2hx setup
      - name: Build go2hx compiler
        run: npx haxe --run Run build
      - name: Set source
        run: haxelib dev go2hx .
      - name: Clean stdgo
        run: npx haxe --run Run clean
      - uses: actions/cache/restore@v4
        id: setup-cache
        with:
          path: |
            TypeInfoData_go2hx_hxb.hx
            ./_internal/*
            ./stdgo/*
            ./go2hx.*.zip 
          key: ${{ github.sha }}-build-${{ env.cache-name }}
      - run: ls
      # compile stdgo
      #- name: Run stdgo automatic compile
      #  run: npx haxe scripts/stdgo.hxml -D runnerCount=${{ env.CORES }}
      - name: Run unit
        run: npx haxe tests/tests.hxml -D unit -D ci -D runnerCount=${{ env.CORES }} -D targets=hl #-D hxb
      - uses: EndBug/add-and-commit@v9
        with:
            message: go easy tests update hl
            add: ./tests
            pull: --rebase --autostash
        if: github.ref == 'refs/heads/master' && github.event_name != 'pull_request'
        continue-on-error: true
      - name: Run std
        run: npx haxe tests/tests.hxml -D std -D ci -D runnerCount=${{ env.CORES }} -D targets=hl  #-D hxb
      - uses: EndBug/add-and-commit@v9
        with:
            message: build std tests update hl
            add: ./tests
            pull: --rebase --autostash
        if: github.ref == 'refs/heads/master' && github.event_name != 'pull_request'
        continue-on-error: true
  build-interp:
    
    timeout-minutes: 75
    needs: setup
    strategy:
      fail-fast: false
    runs-on: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v4
      # Get the cores 
      - name: Get number of cores (Ubuntu)
        if: startsWith(runner.os, 'Linux')
        run: echo "CORES=$(nproc --all)" >> $GITHUB_ENV
      - name: Get number of cores (macOS)
        if: startsWith(runner.os, 'macOS')
        run: echo "CORES=$(sysctl -n hw.logicalcpu)" >> $GITHUB_ENV
      # non self-host setup
        continue-on-error: true
      - uses: actions/setup-go@v3
        with:
          go-version: '1.21.3' # The Go version to download (if necessary) and use.
    
      - name: Install lix
        run: npm i lix -g
      - name: Run lix
        run: npx lix download
      # go2hx setup
      - name: Build go2hx compiler
        run: npx haxe --run Run build
      - name: Set source
        run: haxelib dev go2hx .
      - name: Clean stdgo
        run: npx haxe --run Run clean
      - uses: actions/cache/restore@v4
        id: setup-cache
        with:
          path: |
            TypeInfoData_go2hx_hxb.hx
            ./_internal/*
            ./stdgo/*
            ./go2hx.*.zip 
          key: ${{ github.sha }}-build-${{ env.cache-name }}
      - run: ls
      # compile stdgo
      #- name: Run stdgo automatic compile
      #  run: npx haxe scripts/stdgo.hxml -D runnerCount=${{ env.CORES }}
      - name: Run unit
        run: npx haxe tests/tests.hxml -D unit -D ci -D runnerCount=${{ env.CORES }} -D targets=interp #-D hxb
      - uses: EndBug/add-and-commit@v9
        with:
            message: go easy tests update interp
            add: ./tests
            pull: --rebase --autostash
        if: github.ref == 'refs/heads/master' && github.event_name != 'pull_request'
        continue-on-error: true
      - name: Run std
        run: npx haxe tests/tests.hxml -D std -D ci -D runnerCount=${{ env.CORES }} -D targets=interp  #-D hxb
      - uses: EndBug/add-and-commit@v9
        with:
            message: build std tests update interp
            add: ./tests
            pull: --rebase --autostash
        if: github.ref == 'refs/heads/master' && github.event_name != 'pull_request'
        continue-on-error: true
  build-js:
    
    timeout-minutes: 75
    needs: setup
    strategy:
      fail-fast: false
    runs-on: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v4
      # Get the cores 
      - name: Get number of cores (Ubuntu)
        if: startsWith(runner.os, 'Linux')
        run: echo "CORES=$(nproc --all)" >> $GITHUB_ENV
      - name: Get number of cores (macOS)
        if: startsWith(runner.os, 'macOS')
        run: echo "CORES=$(sysctl -n hw.logicalcpu)" >> $GITHUB_ENV
      # non self-host setup
        continue-on-error: true
      - uses: actions/setup-go@v3
        with:
          go-version: '1.21.3' # The Go version to download (if necessary) and use.
      - uses: actions/setup-node@v4
        with:
          node-version: 23
      - run: node --v8-options
      - name: Install lix
        run: npm i lix -g
      - name: Run lix
        run: npx lix download
      # go2hx setup
      - name: Build go2hx compiler
        run: npx haxe --run Run build
      - name: Set source
        run: haxelib dev go2hx .
      - name: Clean stdgo
        run: npx haxe --run Run clean
      - uses: actions/cache/restore@v4
        id: setup-cache
        with:
          path: |
            TypeInfoData_go2hx_hxb.hx
            ./_internal/*
            ./stdgo/*
            ./go2hx.*.zip 
          key: ${{ github.sha }}-build-${{ env.cache-name }}
      - run: ls
      # compile stdgo
      #- name: Run stdgo automatic compile
      #  run: npx haxe scripts/stdgo.hxml -D runnerCount=${{ env.CORES }}
      - name: Run unit
        run: npx haxe tests/tests.hxml -D unit -D ci -D runnerCount=${{ env.CORES }} -D targets=js #-D hxb
      - uses: EndBug/add-and-commit@v9
        with:
            message: go easy tests update js
            add: ./tests
            pull: --rebase --autostash
        if: github.ref == 'refs/heads/master' && github.event_name != 'pull_request'
        continue-on-error: true
      - name: Run std
        run: npx haxe tests/tests.hxml -D std -D ci -D runnerCount=${{ env.CORES }} -D targets=js  #-D hxb
      - uses: EndBug/add-and-commit@v9
        with:
            message: build std tests update js
            add: ./tests
            pull: --rebase --autostash
        if: github.ref == 'refs/heads/master' && github.event_name != 'pull_request'
        continue-on-error: true
