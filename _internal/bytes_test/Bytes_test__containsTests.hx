package _internal.bytes_test;
import stdgo._internal.bytes.Bytes;
import stdgo._internal.bytes.Bytes;
import stdgo._internal.bytes.Bytes;
import stdgo._internal.bytes.Bytes;
var _containsTests : stdgo.Slice<_internal.bytes_test.Bytes_test_T__struct_10.T__struct_10> = (new stdgo.Slice<_internal.bytes_test.Bytes_test_T__struct_10.T__struct_10>(4, 4, ...[({ _b : (("hello" : stdgo.GoString) : stdgo.Slice<stdgo.GoUInt8>), _subslice : (("hel" : stdgo.GoString) : stdgo.Slice<stdgo.GoUInt8>), _want : true } : _internal.bytes_test.Bytes_test_T__struct_10.T__struct_10), ({ _b : (("日本語" : stdgo.GoString) : stdgo.Slice<stdgo.GoUInt8>), _subslice : (("日本" : stdgo.GoString) : stdgo.Slice<stdgo.GoUInt8>), _want : true } : _internal.bytes_test.Bytes_test_T__struct_10.T__struct_10), ({ _b : (("hello" : stdgo.GoString) : stdgo.Slice<stdgo.GoUInt8>), _subslice : (("Hello, world" : stdgo.GoString) : stdgo.Slice<stdgo.GoUInt8>), _want : false } : _internal.bytes_test.Bytes_test_T__struct_10.T__struct_10), ({ _b : (("東京" : stdgo.GoString) : stdgo.Slice<stdgo.GoUInt8>), _subslice : (("京東" : stdgo.GoString) : stdgo.Slice<stdgo.GoUInt8>), _want : false } : _internal.bytes_test.Bytes_test_T__struct_10.T__struct_10)].concat([for (i in 4 ... (4 > 4 ? 4 : 4 : stdgo.GoInt).toBasic()) ({ _b : (null : stdgo.Slice<stdgo.GoUInt8>), _subslice : (null : stdgo.Slice<stdgo.GoUInt8>), _want : false } : _internal.bytes_test.Bytes_test_T__struct_10.T__struct_10)])) : stdgo.Slice<_internal.bytes_test.Bytes_test_T__struct_10.T__struct_10>);
