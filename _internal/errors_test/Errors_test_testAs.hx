package _internal.errors_test;
function testAs(_t:stdgo.Ref<stdgo._internal.testing.Testing_T_.T_>):Void {
        var _errT:_internal.errors_test.Errors_test_T_errorT.T_errorT = ({} : _internal.errors_test.Errors_test_T_errorT.T_errorT);
        var _errP:stdgo.Ref<stdgo._internal.io.fs.Fs_PathError.PathError> = (null : stdgo.Ref<stdgo._internal.io.fs.Fs_PathError.PathError>);
        var _timeout:_internal.errors_test.Errors_test_T__interface_5.T__interface_5 = (null : _internal.errors_test.Errors_test_T__interface_5.T__interface_5);
        var _p:stdgo.Ref<_internal.errors_test.Errors_test_T_poser.T_poser> = (null : stdgo.Ref<_internal.errors_test.Errors_test_T_poser.T_poser>);
        var __tmp__ = stdgo._internal.os.Os_open.open(("non-existing" : stdgo.GoString)), __0:stdgo.Ref<stdgo._internal.os.Os_File.File> = __tmp__._0, _errF:stdgo.Error = __tmp__._1;
        var _poserErr = (stdgo.Go.setRef((new _internal.errors_test.Errors_test_T_poser.T_poser(("oh no" : stdgo.GoString), null) : _internal.errors_test.Errors_test_T_poser.T_poser)) : stdgo.Ref<_internal.errors_test.Errors_test_T_poser.T_poser>);
        var _testCases = (new stdgo.Slice<_internal.errors_test.Errors_test_T__struct_3.T__struct_3>(18, 18, ...[
({ _err : (null : stdgo.Error), _target : stdgo.Go.toInterface((stdgo.Go.setRef(_errP) : stdgo.Ref<stdgo.Ref<stdgo._internal.io.fs.Fs_PathError.PathError>>)), _match : false, _want : (null : stdgo.AnyInterface) } : _internal.errors_test.Errors_test_T__struct_3.T__struct_3),
({ _err : stdgo.Go.asInterface((new _internal.errors_test.Errors_test_T_wrapped.T_wrapped(("pitied the fool" : stdgo.GoString), stdgo.Go.asInterface((new _internal.errors_test.Errors_test_T_errorT.T_errorT(("T" : stdgo.GoString)) : _internal.errors_test.Errors_test_T_errorT.T_errorT))) : _internal.errors_test.Errors_test_T_wrapped.T_wrapped)), _target : stdgo.Go.toInterface(stdgo.Go.asInterface((stdgo.Go.setRef(_errT) : stdgo.Ref<_internal.errors_test.Errors_test_T_errorT.T_errorT>))), _match : true, _want : stdgo.Go.toInterface(stdgo.Go.asInterface((new _internal.errors_test.Errors_test_T_errorT.T_errorT(("T" : stdgo.GoString)) : _internal.errors_test.Errors_test_T_errorT.T_errorT))) } : _internal.errors_test.Errors_test_T__struct_3.T__struct_3),
({ _err : _errF, _target : stdgo.Go.toInterface((stdgo.Go.setRef(_errP) : stdgo.Ref<stdgo.Ref<stdgo._internal.io.fs.Fs_PathError.PathError>>)), _match : true, _want : stdgo.Go.toInterface(_errF) } : _internal.errors_test.Errors_test_T__struct_3.T__struct_3),
({ _err : stdgo.Go.asInterface((new _internal.errors_test.Errors_test_T_errorT.T_errorT() : _internal.errors_test.Errors_test_T_errorT.T_errorT)), _target : stdgo.Go.toInterface((stdgo.Go.setRef(_errP) : stdgo.Ref<stdgo.Ref<stdgo._internal.io.fs.Fs_PathError.PathError>>)), _match : false, _want : (null : stdgo.AnyInterface) } : _internal.errors_test.Errors_test_T__struct_3.T__struct_3),
({ _err : stdgo.Go.asInterface((new _internal.errors_test.Errors_test_T_wrapped.T_wrapped(("wrapped" : stdgo.GoString), (null : stdgo.Error)) : _internal.errors_test.Errors_test_T_wrapped.T_wrapped)), _target : stdgo.Go.toInterface(stdgo.Go.asInterface((stdgo.Go.setRef(_errT) : stdgo.Ref<_internal.errors_test.Errors_test_T_errorT.T_errorT>))), _match : false, _want : (null : stdgo.AnyInterface) } : _internal.errors_test.Errors_test_T__struct_3.T__struct_3),
({ _err : stdgo.Go.asInterface((stdgo.Go.setRef((new _internal.errors_test.Errors_test_T_poser.T_poser(("error" : stdgo.GoString), null) : _internal.errors_test.Errors_test_T_poser.T_poser)) : stdgo.Ref<_internal.errors_test.Errors_test_T_poser.T_poser>)), _target : stdgo.Go.toInterface(stdgo.Go.asInterface((stdgo.Go.setRef(_errT) : stdgo.Ref<_internal.errors_test.Errors_test_T_errorT.T_errorT>))), _match : true, _want : stdgo.Go.toInterface(stdgo.Go.asInterface((new _internal.errors_test.Errors_test_T_errorT.T_errorT(("poser" : stdgo.GoString)) : _internal.errors_test.Errors_test_T_errorT.T_errorT))) } : _internal.errors_test.Errors_test_T__struct_3.T__struct_3),
({ _err : stdgo.Go.asInterface((stdgo.Go.setRef((new _internal.errors_test.Errors_test_T_poser.T_poser(("path" : stdgo.GoString), null) : _internal.errors_test.Errors_test_T_poser.T_poser)) : stdgo.Ref<_internal.errors_test.Errors_test_T_poser.T_poser>)), _target : stdgo.Go.toInterface((stdgo.Go.setRef(_errP) : stdgo.Ref<stdgo.Ref<stdgo._internal.io.fs.Fs_PathError.PathError>>)), _match : true, _want : stdgo.Go.toInterface(stdgo.Go.asInterface(_internal.errors_test.Errors_test__poserPathErr._poserPathErr)) } : _internal.errors_test.Errors_test_T__struct_3.T__struct_3),
({ _err : stdgo.Go.asInterface(_poserErr), _target : stdgo.Go.toInterface((stdgo.Go.setRef(_p) : stdgo.Ref<stdgo.Ref<_internal.errors_test.Errors_test_T_poser.T_poser>>)), _match : true, _want : stdgo.Go.toInterface(stdgo.Go.asInterface(_poserErr)) } : _internal.errors_test.Errors_test_T__struct_3.T__struct_3),
({ _err : stdgo._internal.errors.Errors_new_.new_(("err" : stdgo.GoString)), _target : stdgo.Go.toInterface((stdgo.Go.setRef(_timeout) : stdgo.Ref<_internal.errors_test.Errors_test_T__interface_5.T__interface_5>)), _match : false, _want : (null : stdgo.AnyInterface) } : _internal.errors_test.Errors_test_T__struct_3.T__struct_3),
({ _err : _errF, _target : stdgo.Go.toInterface((stdgo.Go.setRef(_timeout) : stdgo.Ref<_internal.errors_test.Errors_test_T__interface_5.T__interface_5>)), _match : true, _want : stdgo.Go.toInterface(_errF) } : _internal.errors_test.Errors_test_T__struct_3.T__struct_3),
({ _err : stdgo.Go.asInterface((new _internal.errors_test.Errors_test_T_wrapped.T_wrapped(("path error" : stdgo.GoString), _errF) : _internal.errors_test.Errors_test_T_wrapped.T_wrapped)), _target : stdgo.Go.toInterface((stdgo.Go.setRef(_timeout) : stdgo.Ref<_internal.errors_test.Errors_test_T__interface_5.T__interface_5>)), _match : true, _want : stdgo.Go.toInterface(_errF) } : _internal.errors_test.Errors_test_T__struct_3.T__struct_3),
({ _err : stdgo.Go.asInterface((new stdgo.Slice<stdgo.Error>(0, 0, ...[]) : _internal.errors_test.Errors_test_T_multiErr.T_multiErr)), _target : stdgo.Go.toInterface(stdgo.Go.asInterface((stdgo.Go.setRef(_errT) : stdgo.Ref<_internal.errors_test.Errors_test_T_errorT.T_errorT>))), _match : false, _want : (null : stdgo.AnyInterface) } : _internal.errors_test.Errors_test_T__struct_3.T__struct_3),
({ _err : stdgo.Go.asInterface((new stdgo.Slice<stdgo.Error>(2, 2, ...[stdgo._internal.errors.Errors_new_.new_(("a" : stdgo.GoString)), stdgo.Go.asInterface((new _internal.errors_test.Errors_test_T_errorT.T_errorT(("T" : stdgo.GoString)) : _internal.errors_test.Errors_test_T_errorT.T_errorT))]) : _internal.errors_test.Errors_test_T_multiErr.T_multiErr)), _target : stdgo.Go.toInterface(stdgo.Go.asInterface((stdgo.Go.setRef(_errT) : stdgo.Ref<_internal.errors_test.Errors_test_T_errorT.T_errorT>))), _match : true, _want : stdgo.Go.toInterface(stdgo.Go.asInterface((new _internal.errors_test.Errors_test_T_errorT.T_errorT(("T" : stdgo.GoString)) : _internal.errors_test.Errors_test_T_errorT.T_errorT))) } : _internal.errors_test.Errors_test_T__struct_3.T__struct_3),
({ _err : stdgo.Go.asInterface((new stdgo.Slice<stdgo.Error>(2, 2, ...[stdgo.Go.asInterface((new _internal.errors_test.Errors_test_T_errorT.T_errorT(("T" : stdgo.GoString)) : _internal.errors_test.Errors_test_T_errorT.T_errorT)), stdgo._internal.errors.Errors_new_.new_(("a" : stdgo.GoString))]) : _internal.errors_test.Errors_test_T_multiErr.T_multiErr)), _target : stdgo.Go.toInterface(stdgo.Go.asInterface((stdgo.Go.setRef(_errT) : stdgo.Ref<_internal.errors_test.Errors_test_T_errorT.T_errorT>))), _match : true, _want : stdgo.Go.toInterface(stdgo.Go.asInterface((new _internal.errors_test.Errors_test_T_errorT.T_errorT(("T" : stdgo.GoString)) : _internal.errors_test.Errors_test_T_errorT.T_errorT))) } : _internal.errors_test.Errors_test_T__struct_3.T__struct_3),
({ _err : stdgo.Go.asInterface((new stdgo.Slice<stdgo.Error>(2, 2, ...[stdgo.Go.asInterface((new _internal.errors_test.Errors_test_T_errorT.T_errorT(("a" : stdgo.GoString)) : _internal.errors_test.Errors_test_T_errorT.T_errorT)), stdgo.Go.asInterface((new _internal.errors_test.Errors_test_T_errorT.T_errorT(("b" : stdgo.GoString)) : _internal.errors_test.Errors_test_T_errorT.T_errorT))]) : _internal.errors_test.Errors_test_T_multiErr.T_multiErr)), _target : stdgo.Go.toInterface(stdgo.Go.asInterface((stdgo.Go.setRef(_errT) : stdgo.Ref<_internal.errors_test.Errors_test_T_errorT.T_errorT>))), _match : true, _want : stdgo.Go.toInterface(stdgo.Go.asInterface((new _internal.errors_test.Errors_test_T_errorT.T_errorT(("a" : stdgo.GoString)) : _internal.errors_test.Errors_test_T_errorT.T_errorT))) } : _internal.errors_test.Errors_test_T__struct_3.T__struct_3),
({ _err : stdgo.Go.asInterface((new stdgo.Slice<stdgo.Error>(2, 2, ...[stdgo.Go.asInterface((new stdgo.Slice<stdgo.Error>(2, 2, ...[stdgo._internal.errors.Errors_new_.new_(("a" : stdgo.GoString)), stdgo.Go.asInterface((new _internal.errors_test.Errors_test_T_errorT.T_errorT(("a" : stdgo.GoString)) : _internal.errors_test.Errors_test_T_errorT.T_errorT))]) : _internal.errors_test.Errors_test_T_multiErr.T_multiErr)), stdgo.Go.asInterface((new _internal.errors_test.Errors_test_T_errorT.T_errorT(("b" : stdgo.GoString)) : _internal.errors_test.Errors_test_T_errorT.T_errorT))]) : _internal.errors_test.Errors_test_T_multiErr.T_multiErr)), _target : stdgo.Go.toInterface(stdgo.Go.asInterface((stdgo.Go.setRef(_errT) : stdgo.Ref<_internal.errors_test.Errors_test_T_errorT.T_errorT>))), _match : true, _want : stdgo.Go.toInterface(stdgo.Go.asInterface((new _internal.errors_test.Errors_test_T_errorT.T_errorT(("a" : stdgo.GoString)) : _internal.errors_test.Errors_test_T_errorT.T_errorT))) } : _internal.errors_test.Errors_test_T__struct_3.T__struct_3),
({ _err : stdgo.Go.asInterface((new stdgo.Slice<stdgo.Error>(1, 1, ...[stdgo.Go.asInterface((new _internal.errors_test.Errors_test_T_wrapped.T_wrapped(("path error" : stdgo.GoString), _errF) : _internal.errors_test.Errors_test_T_wrapped.T_wrapped))]) : _internal.errors_test.Errors_test_T_multiErr.T_multiErr)), _target : stdgo.Go.toInterface((stdgo.Go.setRef(_timeout) : stdgo.Ref<_internal.errors_test.Errors_test_T__interface_5.T__interface_5>)), _match : true, _want : stdgo.Go.toInterface(_errF) } : _internal.errors_test.Errors_test_T__struct_3.T__struct_3),
({ _err : stdgo.Go.asInterface((new stdgo.Slice<stdgo.Error>(1, 1, ...[(null : stdgo.Error)]) : _internal.errors_test.Errors_test_T_multiErr.T_multiErr)), _target : stdgo.Go.toInterface(stdgo.Go.asInterface((stdgo.Go.setRef(_errT) : stdgo.Ref<_internal.errors_test.Errors_test_T_errorT.T_errorT>))), _match : false, _want : (null : stdgo.AnyInterface) } : _internal.errors_test.Errors_test_T__struct_3.T__struct_3)].concat([for (i in 18 ... (18 > 18 ? 18 : 18 : stdgo.GoInt).toBasic()) ({ _err : (null : stdgo.Error), _target : (null : stdgo.AnyInterface), _match : false, _want : (null : stdgo.AnyInterface) } : _internal.errors_test.Errors_test_T__struct_3.T__struct_3)])) : stdgo.Slice<_internal.errors_test.Errors_test_T__struct_3.T__struct_3>);
        for (_i => _tc in _testCases) {
            var _name = (stdgo._internal.fmt.Fmt_sprintf.sprintf(("%d:As(Errorf(..., %v), %v)" : stdgo.GoString), stdgo.Go.toInterface(_i), stdgo.Go.toInterface(_tc._err), _tc._target)?.__copy__() : stdgo.GoString);
            var _rtarget = (stdgo._internal.reflect.Reflect_valueOf.valueOf(_tc._target)?.__copy__() : stdgo._internal.reflect.Reflect_Value.Value);
            _rtarget.elem().set(stdgo._internal.reflect.Reflect_zero.zero(stdgo._internal.reflect.Reflect_typeOf.typeOf(_tc._target).elem())?.__copy__());
            _t.run(_name?.__copy__(), function(_t:stdgo.Ref<stdgo._internal.testing.Testing_T_.T_>):Void {
                var _match = (stdgo._internal.errors.Errors_as.as(_tc._err, _tc._target) : Bool);
                if (_match != (_tc._match)) {
                    _t.fatalf(("match: got %v; want %v" : stdgo.GoString), stdgo.Go.toInterface(_match), stdgo.Go.toInterface(_tc._match));
                };
                if (!_match) {
                    return;
                };
                {
                    var _got = (_rtarget.elem().interface_() : stdgo.AnyInterface);
                    if (_got != (_tc._want)) {
                        _t.fatalf(("got %#v, want %#v" : stdgo.GoString), _got, _tc._want);
                    };
                };
            });
        };
    }
