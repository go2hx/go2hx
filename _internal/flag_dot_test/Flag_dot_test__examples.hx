package _internal.flag_dot_test;
import stdgo._internal.flag.Flag;
var _examples : stdgo.Slice<stdgo._internal.testing.Testing_InternalExample.InternalExample> = (new stdgo.Slice<stdgo._internal.testing.Testing_InternalExample.InternalExample>(4, 4, ...[(new stdgo._internal.testing.Testing_InternalExample.InternalExample(("ExampleFunc" : stdgo.GoString), _internal.flag_test.Flag_test_exampleFunc.exampleFunc, ("{ip: 127.0.0.1, loopback: true}\n\ninvalid value \"256.0.0.1\" for flag -ip: could not parse IP\nUsage of ExampleFunc:\n  -ip IP address\n    \tIP address to parse\n{ip: <nil>, loopback: false}\n" : stdgo.GoString), false) : stdgo._internal.testing.Testing_InternalExample.InternalExample), (new stdgo._internal.testing.Testing_InternalExample.InternalExample(("ExampleBoolFunc" : stdgo.GoString), _internal.flag_test.Flag_test_exampleBoolFunc.exampleBoolFunc, ("dummy message: true\ndummy message: 0\n" : stdgo.GoString), false) : stdgo._internal.testing.Testing_InternalExample.InternalExample), (new stdgo._internal.testing.Testing_InternalExample.InternalExample(("ExampleTextVar" : stdgo.GoString), _internal.flag_test.Flag_test_exampleTextVar.exampleTextVar, ("{ip: 127.0.0.1}\n\ninvalid value \"256.0.0.1\" for flag -ip: invalid IP address: 256.0.0.1\nUsage of ExampleTextVar:\n  -ip IP address\n    \tIP address to parse (default 192.168.0.100)\n{ip: <nil>}\n" : stdgo.GoString), false) : stdgo._internal.testing.Testing_InternalExample.InternalExample), (new stdgo._internal.testing.Testing_InternalExample.InternalExample(("ExampleValue" : stdgo.GoString), _internal.flag_test.Flag_test_exampleValue.exampleValue, ("{scheme: \"https\", host: \"golang.org\", path: \"/pkg/flag/\"}\n" : stdgo.GoString), false) : stdgo._internal.testing.Testing_InternalExample.InternalExample)].concat([for (i in 4 ... (4 > 4 ? 4 : 4 : stdgo.GoInt).toBasic()) ({} : stdgo._internal.testing.Testing_InternalExample.InternalExample)])) : stdgo.Slice<stdgo._internal.testing.Testing_InternalExample.InternalExample>);
