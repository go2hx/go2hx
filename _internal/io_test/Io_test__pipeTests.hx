package _internal.io_test;
import stdgo._internal.io.Io;
import stdgo._internal.io.Io;
import stdgo._internal.io.Io;
var _pipeTests : stdgo.Slice<_internal.io_test.Io_test_T_pipeTest.T_pipeTest> = (new stdgo.Slice<_internal.io_test.Io_test_T_pipeTest.T_pipeTest>(6, 6, ...[(new _internal.io_test.Io_test_T_pipeTest.T_pipeTest(true, (null : stdgo.Error), false) : _internal.io_test.Io_test_T_pipeTest.T_pipeTest), (new _internal.io_test.Io_test_T_pipeTest.T_pipeTest(true, (null : stdgo.Error), true) : _internal.io_test.Io_test_T_pipeTest.T_pipeTest), (new _internal.io_test.Io_test_T_pipeTest.T_pipeTest(true, stdgo._internal.io.Io_errShortWrite.errShortWrite, true) : _internal.io_test.Io_test_T_pipeTest.T_pipeTest), (new _internal.io_test.Io_test_T_pipeTest.T_pipeTest(false, (null : stdgo.Error), false) : _internal.io_test.Io_test_T_pipeTest.T_pipeTest), (new _internal.io_test.Io_test_T_pipeTest.T_pipeTest(false, (null : stdgo.Error), true) : _internal.io_test.Io_test_T_pipeTest.T_pipeTest), (new _internal.io_test.Io_test_T_pipeTest.T_pipeTest(false, stdgo._internal.io.Io_errShortWrite.errShortWrite, true) : _internal.io_test.Io_test_T_pipeTest.T_pipeTest)].concat([for (i in 6 ... (6 > 6 ? 6 : 6 : stdgo.GoInt).toBasic()) ({} : _internal.io_test.Io_test_T_pipeTest.T_pipeTest)])) : stdgo.Slice<_internal.io_test.Io_test_T_pipeTest.T_pipeTest>);
