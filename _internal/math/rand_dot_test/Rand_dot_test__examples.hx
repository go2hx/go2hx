package _internal.math.rand_dot_test;
import stdgo._internal.math.rand.Rand;
var _examples : stdgo.Slice<stdgo._internal.testing.Testing_InternalExample.InternalExample> = (new stdgo.Slice<stdgo._internal.testing.Testing_InternalExample.InternalExample>(2, 2, ...[(new stdgo._internal.testing.Testing_InternalExample.InternalExample(("Example_rand" : stdgo.GoString), _internal.math.rand_test.Rand_test_example_rand.example_rand, ("Float32     0.2635776           0.6358173           0.6718283\nFloat64     0.628605430454327   0.4504798828572669  0.9562755949377957\nExpFloat64  0.3362240648200941  1.4256072328483647  0.24354758816173044\nNormFloat64 0.17233959114940064 1.577014951434847   0.04259129641113857\nInt31       1501292890          1486668269          182840835\nInt63       3546343826724305832 5724354148158589552 5239846799706671610\nUint32      2760229429          296659907           1922395059\nIntn(10)    1                   2                   5\nInt31n(10)  4                   7                   8\nInt63n(10)  7                   6                   3\nPerm        [1 4 2 3 0]         [4 2 1 3 0]         [1 2 4 0 3]\n" : stdgo.GoString), false) : stdgo._internal.testing.Testing_InternalExample.InternalExample), (new stdgo._internal.testing.Testing_InternalExample.InternalExample(("ExamplePerm" : stdgo.GoString), _internal.math.rand_test.Rand_test_examplePerm.examplePerm, ("1\n2\n0\n" : stdgo.GoString), true) : stdgo._internal.testing.Testing_InternalExample.InternalExample)].concat([for (i in 2 ... (2 > 2 ? 2 : 2 : stdgo.GoInt).toBasic()) ({} : stdgo._internal.testing.Testing_InternalExample.InternalExample)])) : stdgo.Slice<stdgo._internal.testing.Testing_InternalExample.InternalExample>);
