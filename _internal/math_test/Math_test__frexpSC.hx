package _internal.math_test;
import stdgo._internal.math.Math;
import stdgo._internal.math.Math;
import stdgo._internal.math.Math;
var _frexpSC : stdgo.Slice<_internal.math_test.Math_test_T_fi.T_fi> = (new stdgo.Slice<_internal.math_test.Math_test_T_fi.T_fi>(5, 5, ...[(new _internal.math_test.Math_test_T_fi.T_fi(stdgo._internal.math.Math_inf.inf((-1 : stdgo.GoInt)), (0 : stdgo.GoInt)) : _internal.math_test.Math_test_T_fi.T_fi), (new _internal.math_test.Math_test_T_fi.T_fi(stdgo._internal.math.Math_copysign.copysign((0 : stdgo.GoFloat64), (-1 : stdgo.GoFloat64)), (0 : stdgo.GoInt)) : _internal.math_test.Math_test_T_fi.T_fi), (new _internal.math_test.Math_test_T_fi.T_fi((0 : stdgo.GoFloat64), (0 : stdgo.GoInt)) : _internal.math_test.Math_test_T_fi.T_fi), (new _internal.math_test.Math_test_T_fi.T_fi(stdgo._internal.math.Math_inf.inf((1 : stdgo.GoInt)), (0 : stdgo.GoInt)) : _internal.math_test.Math_test_T_fi.T_fi), (new _internal.math_test.Math_test_T_fi.T_fi(stdgo._internal.math.Math_naN.naN(), (0 : stdgo.GoInt)) : _internal.math_test.Math_test_T_fi.T_fi)].concat([for (i in 5 ... (5 > 5 ? 5 : 5 : stdgo.GoInt).toBasic()) ({} : _internal.math_test.Math_test_T_fi.T_fi)])) : stdgo.Slice<_internal.math_test.Math_test_T_fi.T_fi>);
