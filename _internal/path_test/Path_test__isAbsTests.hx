package _internal.path_test;
import stdgo._internal.path.Path;
import stdgo._internal.path.Path;
var _isAbsTests : stdgo.Slice<_internal.path_test.Path_test_IsAbsTest.IsAbsTest> = (new stdgo.Slice<_internal.path_test.Path_test_IsAbsTest.IsAbsTest>(8, 8, ...[(new _internal.path_test.Path_test_IsAbsTest.IsAbsTest(stdgo.Go.str()?.__copy__(), false) : _internal.path_test.Path_test_IsAbsTest.IsAbsTest), (new _internal.path_test.Path_test_IsAbsTest.IsAbsTest(("/" : stdgo.GoString), true) : _internal.path_test.Path_test_IsAbsTest.IsAbsTest), (new _internal.path_test.Path_test_IsAbsTest.IsAbsTest(("/usr/bin/gcc" : stdgo.GoString), true) : _internal.path_test.Path_test_IsAbsTest.IsAbsTest), (new _internal.path_test.Path_test_IsAbsTest.IsAbsTest((".." : stdgo.GoString), false) : _internal.path_test.Path_test_IsAbsTest.IsAbsTest), (new _internal.path_test.Path_test_IsAbsTest.IsAbsTest(("/a/../bb" : stdgo.GoString), true) : _internal.path_test.Path_test_IsAbsTest.IsAbsTest), (new _internal.path_test.Path_test_IsAbsTest.IsAbsTest(("." : stdgo.GoString), false) : _internal.path_test.Path_test_IsAbsTest.IsAbsTest), (new _internal.path_test.Path_test_IsAbsTest.IsAbsTest(("./" : stdgo.GoString), false) : _internal.path_test.Path_test_IsAbsTest.IsAbsTest), (new _internal.path_test.Path_test_IsAbsTest.IsAbsTest(("lala" : stdgo.GoString), false) : _internal.path_test.Path_test_IsAbsTest.IsAbsTest)].concat([for (i in 8 ... (8 > 8 ? 8 : 8 : stdgo.GoInt).toBasic()) ({} : _internal.path_test.Path_test_IsAbsTest.IsAbsTest)])) : stdgo.Slice<_internal.path_test.Path_test_IsAbsTest.IsAbsTest>);
