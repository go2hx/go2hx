package _internal.reflect_test;
import stdgo._internal.reflect.Reflect;
import stdgo._internal.reflect.Reflect;
import stdgo._internal.reflect.Reflect;
import stdgo._internal.reflect.Reflect;
import stdgo._internal.reflect.Reflect;
function testFuncOf(_t:stdgo.Ref<stdgo._internal.testing.Testing_T_.T_>):Void {
        {};
        {};
        var _fn = function(_args:stdgo.Slice<stdgo._internal.reflect.Reflect_Value.Value>):stdgo.Slice<stdgo._internal.reflect.Reflect_Value.Value> {
            if ((_args.length) != ((1 : stdgo.GoInt))) {
                _t.errorf(("args == %v, want exactly one arg" : stdgo.GoString), stdgo.Go.toInterface(_args));
            } else if (!((_args[(0 : stdgo.GoInt)].type().string() : String) == (stdgo._internal.reflect.Reflect_typeOf.typeOf(stdgo.Go.toInterface((stdgo.Go.str() : _internal.reflect_test.Reflect_test_T_testFuncOf___localname___K_163718.T_testFuncOf___localname___K_163718))).string() : String))) {
                _t.errorf(("args[0] is type %v, want %v" : stdgo.GoString), stdgo.Go.toInterface(_args[(0 : stdgo.GoInt)].type()), stdgo.Go.toInterface(stdgo._internal.reflect.Reflect_typeOf.typeOf(stdgo.Go.toInterface((stdgo.Go.str() : _internal.reflect_test.Reflect_test_T_testFuncOf___localname___K_163718.T_testFuncOf___localname___K_163718)))));
            } else if ((_args[(0 : stdgo.GoInt)].string() : stdgo.GoString) != (("gopher" : stdgo.GoString))) {
                _t.errorf(("args[0] = %q, want %q" : stdgo.GoString), stdgo.Go.toInterface((_args[(0 : stdgo.GoInt)].string() : stdgo.GoString)), stdgo.Go.toInterface(("gopher" : stdgo.GoString)));
            };
            return (new stdgo.Slice<stdgo._internal.reflect.Reflect_Value.Value>(1, 1, ...[stdgo._internal.reflect.Reflect_valueOf.valueOf(stdgo.Go.toInterface(((3.14 : stdgo.GoFloat64) : _internal.reflect_test.Reflect_test_T_testFuncOf___localname___V_163733.T_testFuncOf___localname___V_163733)))?.__copy__()].concat([for (i in 1 ... (1 > 1 ? 1 : 1 : stdgo.GoInt).toBasic()) ({} : stdgo._internal.reflect.Reflect_Value.Value)])) : stdgo.Slice<stdgo._internal.reflect.Reflect_Value.Value>);
        };
        var _v = (stdgo._internal.reflect.Reflect_makeFunc.makeFunc(stdgo._internal.reflect.Reflect_funcOf.funcOf((new stdgo.Slice<stdgo._internal.reflect.Reflect_Type_.Type_>(1, 1, ...[stdgo._internal.reflect.Reflect_typeOf.typeOf(stdgo.Go.toInterface((stdgo.Go.str() : _internal.reflect_test.Reflect_test_T_testFuncOf___localname___K_163718.T_testFuncOf___localname___K_163718)))]) : stdgo.Slice<stdgo._internal.reflect.Reflect_Type_.Type_>), (new stdgo.Slice<stdgo._internal.reflect.Reflect_Type_.Type_>(1, 1, ...[stdgo._internal.reflect.Reflect_typeOf.typeOf(stdgo.Go.toInterface(((0 : stdgo.GoFloat64) : _internal.reflect_test.Reflect_test_T_testFuncOf___localname___V_163733.T_testFuncOf___localname___V_163733)))]) : stdgo.Slice<stdgo._internal.reflect.Reflect_Type_.Type_>), false), _fn)?.__copy__() : stdgo._internal.reflect.Reflect_Value.Value);
        var _outs = _v.call((new stdgo.Slice<stdgo._internal.reflect.Reflect_Value.Value>(1, 1, ...[stdgo._internal.reflect.Reflect_valueOf.valueOf(stdgo.Go.toInterface((("gopher" : stdgo.GoString) : _internal.reflect_test.Reflect_test_T_testFuncOf___localname___K_163718.T_testFuncOf___localname___K_163718)))?.__copy__()].concat([for (i in 1 ... (1 > 1 ? 1 : 1 : stdgo.GoInt).toBasic()) ({} : stdgo._internal.reflect.Reflect_Value.Value)])) : stdgo.Slice<stdgo._internal.reflect.Reflect_Value.Value>));
        if ((_outs.length) != ((1 : stdgo.GoInt))) {
            _t.fatalf(("v.Call returned %v, want exactly one result" : stdgo.GoString), stdgo.Go.toInterface(_outs));
        } else if (!((_outs[(0 : stdgo.GoInt)].type().string() : String) == (stdgo._internal.reflect.Reflect_typeOf.typeOf(stdgo.Go.toInterface(((0 : stdgo.GoFloat64) : _internal.reflect_test.Reflect_test_T_testFuncOf___localname___V_163733.T_testFuncOf___localname___V_163733))).string() : String))) {
            _t.fatalf(("c.Call[0] is type %v, want %v" : stdgo.GoString), stdgo.Go.toInterface(_outs[(0 : stdgo.GoInt)].type()), stdgo.Go.toInterface(stdgo._internal.reflect.Reflect_typeOf.typeOf(stdgo.Go.toInterface(((0 : stdgo.GoFloat64) : _internal.reflect_test.Reflect_test_T_testFuncOf___localname___V_163733.T_testFuncOf___localname___V_163733)))));
        };
        var _f = (_outs[(0 : stdgo.GoInt)].float_() : stdgo.GoFloat64);
        if (_f != (3.14 : stdgo.GoFloat64)) {
            _t.errorf(("constructed func returned %f, want %f" : stdgo.GoString), stdgo.Go.toInterface(_f), stdgo.Go.toInterface((3.14 : stdgo.GoFloat64)));
        };
        {};
        var _testCases = (new stdgo.Slice<_internal.reflect_test.Reflect_test_T__struct_87.T__struct_87>(5, 5, ...[({ _in : (new stdgo.Slice<stdgo._internal.reflect.Reflect_Type_.Type_>(1, 1, ...[stdgo._internal.reflect.Reflect_typeOf.typeOf(stdgo.Go.toInterface((0 : _internal.reflect_test.Reflect_test_T_testFuncOf___localname___T1_164617.T_testFuncOf___localname___T1_164617)))]) : stdgo.Slice<stdgo._internal.reflect.Reflect_Type_.Type_>), _want : (null : _internal.reflect_test.Reflect_test_T_testFuncOf___localname___T1_164617.T_testFuncOf___localname___T1_164617 -> Void), _out : (null : stdgo.Slice<stdgo._internal.reflect.Reflect_Type_.Type_>), _variadic : false } : _internal.reflect_test.Reflect_test_T__struct_87.T__struct_87), ({ _in : (new stdgo.Slice<stdgo._internal.reflect.Reflect_Type_.Type_>(1, 1, ...[stdgo._internal.reflect.Reflect_typeOf.typeOf(stdgo.Go.toInterface((0 : stdgo.GoInt)))]) : stdgo.Slice<stdgo._internal.reflect.Reflect_Type_.Type_>), _want : (null : stdgo.GoInt -> Void), _out : (null : stdgo.Slice<stdgo._internal.reflect.Reflect_Type_.Type_>), _variadic : false } : _internal.reflect_test.Reflect_test_T__struct_87.T__struct_87), ({ _in : (new stdgo.Slice<stdgo._internal.reflect.Reflect_Type_.Type_>(1, 1, ...[stdgo._internal.reflect.Reflect_sliceOf.sliceOf(stdgo._internal.reflect.Reflect_typeOf.typeOf(stdgo.Go.toInterface((0 : stdgo.GoInt))))]) : stdgo.Slice<stdgo._internal.reflect.Reflect_Type_.Type_>), _variadic : true, _want : (null : stdgo.Slice<stdgo.GoInt> -> Void), _out : (null : stdgo.Slice<stdgo._internal.reflect.Reflect_Type_.Type_>) } : _internal.reflect_test.Reflect_test_T__struct_87.T__struct_87), ({ _in : (new stdgo.Slice<stdgo._internal.reflect.Reflect_Type_.Type_>(1, 1, ...[stdgo._internal.reflect.Reflect_typeOf.typeOf(stdgo.Go.toInterface((0 : stdgo.GoInt)))]) : stdgo.Slice<stdgo._internal.reflect.Reflect_Type_.Type_>), _out : (new stdgo.Slice<stdgo._internal.reflect.Reflect_Type_.Type_>(1, 1, ...[stdgo._internal.reflect.Reflect_typeOf.typeOf(stdgo.Go.toInterface(false))]) : stdgo.Slice<stdgo._internal.reflect.Reflect_Type_.Type_>), _want : stdgo.Go.toInterface((null : stdgo.GoInt -> Bool)), _variadic : false } : _internal.reflect_test.Reflect_test_T__struct_87.T__struct_87), ({ _in : (new stdgo.Slice<stdgo._internal.reflect.Reflect_Type_.Type_>(1, 1, ...[stdgo._internal.reflect.Reflect_typeOf.typeOf(stdgo.Go.toInterface((0 : stdgo.GoInt)))]) : stdgo.Slice<stdgo._internal.reflect.Reflect_Type_.Type_>), _out : (new stdgo.Slice<stdgo._internal.reflect.Reflect_Type_.Type_>(2, 2, ...[stdgo._internal.reflect.Reflect_typeOf.typeOf(stdgo.Go.toInterface(false)), stdgo._internal.reflect.Reflect_typeOf.typeOf(stdgo.Go.toInterface(stdgo.Go.str()))]) : stdgo.Slice<stdgo._internal.reflect.Reflect_Type_.Type_>), _want : stdgo.Go.toInterface((null : stdgo.GoInt -> { var _0 : Bool; var _1 : stdgo.GoString; })), _variadic : false } : _internal.reflect_test.Reflect_test_T__struct_87.T__struct_87)].concat([for (i in 5 ... (5 > 5 ? 5 : 5 : stdgo.GoInt).toBasic()) ({ _in : (null : stdgo.Slice<stdgo._internal.reflect.Reflect_Type_.Type_>), _out : (null : stdgo.Slice<stdgo._internal.reflect.Reflect_Type_.Type_>), _variadic : false, _want : (null : stdgo.AnyInterface) } : _internal.reflect_test.Reflect_test_T__struct_87.T__struct_87)])) : stdgo.Slice<_internal.reflect_test.Reflect_test_T__struct_87.T__struct_87>);
        for (__6 => _tt in _testCases) {
            _internal.reflect_test.Reflect_test__checkSameType._checkSameType(_t, stdgo._internal.reflect.Reflect_funcOf.funcOf(_tt._in, _tt._out, _tt._variadic), _tt._want);
        };
        stdgo._internal.reflect.Reflect_funcOf.funcOf((new stdgo.Slice<stdgo._internal.reflect.Reflect_Type_.Type_>(3, 3, ...[stdgo._internal.reflect.Reflect_typeOf.typeOf(stdgo.Go.toInterface((1 : stdgo.GoInt))), stdgo._internal.reflect.Reflect_typeOf.typeOf(stdgo.Go.toInterface(stdgo.Go.str())), stdgo._internal.reflect.Reflect_sliceOf.sliceOf(stdgo._internal.reflect.Reflect_typeOf.typeOf(stdgo.Go.toInterface(false)))]) : stdgo.Slice<stdgo._internal.reflect.Reflect_Type_.Type_>), (null : stdgo.Slice<stdgo._internal.reflect.Reflect_Type_.Type_>), true);
        _internal.reflect_test.Reflect_test__shouldPanic._shouldPanic(("must be slice" : stdgo.GoString), function():Void {
            stdgo._internal.reflect.Reflect_funcOf.funcOf((new stdgo.Slice<stdgo._internal.reflect.Reflect_Type_.Type_>(3, 3, ...[stdgo._internal.reflect.Reflect_typeOf.typeOf(stdgo.Go.toInterface((0 : stdgo.GoInt))), stdgo._internal.reflect.Reflect_typeOf.typeOf(stdgo.Go.toInterface(stdgo.Go.str())), stdgo._internal.reflect.Reflect_typeOf.typeOf(stdgo.Go.toInterface(false))]) : stdgo.Slice<stdgo._internal.reflect.Reflect_Type_.Type_>), (null : stdgo.Slice<stdgo._internal.reflect.Reflect_Type_.Type_>), true);
        });
        _internal.reflect_test.Reflect_test__shouldPanic._shouldPanic(("must be slice" : stdgo.GoString), function():Void {
            stdgo._internal.reflect.Reflect_funcOf.funcOf((null : stdgo.Slice<stdgo._internal.reflect.Reflect_Type_.Type_>), (null : stdgo.Slice<stdgo._internal.reflect.Reflect_Type_.Type_>), true);
        });
        var _in:stdgo.Slice<stdgo._internal.reflect.Reflect_Type_.Type_> = (null : stdgo.Slice<stdgo._internal.reflect.Reflect_Type_.Type_>);
        {
            var _i = (0 : stdgo.GoInt);
            stdgo.Go.cfor((_i < (51 : stdgo.GoInt) : Bool), _i++, {
                _in = (_in.__append__(stdgo._internal.reflect.Reflect_typeOf.typeOf(stdgo.Go.toInterface((1 : stdgo.GoInt)))));
            });
        };
        stdgo._internal.reflect.Reflect_funcOf.funcOf(_in, (null : stdgo.Slice<stdgo._internal.reflect.Reflect_Type_.Type_>), false);
    }
