package _internal.runtime_test;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.unsafe.Unsafe;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.unsafe.Unsafe;
import stdgo._internal.unsafe.Unsafe;
function _dlogCanonicalize(_x:stdgo.GoString):stdgo.GoString {
        var _begin = stdgo._internal.regexp.Regexp_mustCompile.mustCompile(("(?m)^>> begin log \\d+ <<\\n" : stdgo.GoString));
        _x = _begin.replaceAllString(_x?.__copy__(), stdgo.Go.str()?.__copy__())?.__copy__();
        var _prefix = stdgo._internal.regexp.Regexp_mustCompile.mustCompile(("(?m)^\\[[^]]+\\]" : stdgo.GoString));
        _x = _prefix.replaceAllString(_x?.__copy__(), ("[]" : stdgo.GoString))?.__copy__();
        return _x?.__copy__();
    }
