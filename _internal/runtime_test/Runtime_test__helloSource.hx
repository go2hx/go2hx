package _internal.runtime_test;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.unsafe.Unsafe;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.unsafe.Unsafe;
import stdgo._internal.unsafe.Unsafe;
var _helloSource : stdgo.GoString = ((((("\nimport \"fmt\"\nimport \"runtime\"\nvar gslice []string\nfunc main() {\n\tmapvar := make(map[string]string, " : stdgo.GoString) + stdgo._internal.strconv.Strconv_formatInt.formatInt((17i64 : stdgo.GoInt64), (10 : stdgo.GoInt))?.__copy__() : stdgo.GoString) + (")\n\tslicemap := make(map[string][]string," : stdgo.GoString)?.__copy__() : stdgo.GoString) + stdgo._internal.strconv.Strconv_formatInt.formatInt((11i64 : stdgo.GoInt64), (10 : stdgo.GoInt))?.__copy__() : stdgo.GoString) + (")\n    chanint := make(chan int, 10)\n    chanstr := make(chan string, 10)\n    chanint <- 99\n\tchanint <- 11\n    chanstr <- \"spongepants\"\n    chanstr <- \"squarebob\"\n\tmapvar[\"abc\"] = \"def\"\n\tmapvar[\"ghi\"] = \"jkl\"\n\tslicemap[\"a\"] = []string{\"b\",\"c\",\"d\"}\n    slicemap[\"e\"] = []string{\"f\",\"g\",\"h\"}\n\tstrvar := \"abc\"\n\tptrvar := &strvar\n\tslicevar := make([]string, 0, 16)\n\tslicevar = append(slicevar, mapvar[\"abc\"])\n\tfmt.Println(\"hi\")\n\truntime.KeepAlive(ptrvar)\n\t_ = ptrvar // set breakpoint here\n\tgslice = slicevar\n\tfmt.Printf(\"%v, %v, %v\\n\", slicemap, <-chanint, <-chanstr)\n\truntime.KeepAlive(mapvar)\n}  // END_OF_PROGRAM\n" : stdgo.GoString)?.__copy__() : stdgo.GoString);
