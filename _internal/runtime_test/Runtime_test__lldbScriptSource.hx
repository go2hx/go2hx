package _internal.runtime_test;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.unsafe.Unsafe;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.unsafe.Unsafe;
import stdgo._internal.unsafe.Unsafe;
final _lldbScriptSource : stdgo.GoString = ("\nimport sys\nsys.path.append(sys.argv[1])\nimport lldb\nimport os\n\nTIMEOUT_SECS = 5\n\ndebugger = lldb.SBDebugger.Create()\ndebugger.SetAsync(True)\ntarget = debugger.CreateTargetWithFileAndArch(\"a.exe\", None)\nif target:\n  print \"Created target\"\n  main_bp = target.BreakpointCreateByLocation(\"main.go\", 10)\n  if main_bp:\n    print \"Created breakpoint\"\n  process = target.LaunchSimple(None, None, os.getcwd())\n  if process:\n    print \"Process launched\"\n    listener = debugger.GetListener()\n    process.broadcaster.AddListener(listener, lldb.SBProcess.eBroadcastBitStateChanged)\n    while True:\n      event = lldb.SBEvent()\n      if listener.WaitForEvent(TIMEOUT_SECS, event):\n        if lldb.SBProcess.GetRestartedFromEvent(event):\n          continue\n        state = process.GetState()\n        if state in [lldb.eStateUnloaded, lldb.eStateLaunching, lldb.eStateRunning]:\n          continue\n      else:\n        print \"Timeout launching\"\n      break\n    if state == lldb.eStateStopped:\n      for t in process.threads:\n        if t.GetStopReason() == lldb.eStopReasonBreakpoint:\n          print \"Hit breakpoint\"\n          frame = t.GetFrameAtIndex(0)\n          if frame:\n            if frame.line_entry:\n              print \"Stopped at %s:%d\" % (frame.line_entry.file.basename, frame.line_entry.line)\n            if frame.function:\n              print \"Stopped in %s\" % (frame.function.name,)\n            var = frame.FindVariable(\'intvar\')\n            if var:\n              print \"intvar = %s\" % (var.GetValue(),)\n            else:\n              print \"no intvar\"\n    else:\n      print \"Process state\", state\n    process.Destroy()\nelse:\n  print \"Failed to create target a.exe\"\n\nlldb.SBDebugger.Destroy(debugger)\nsys.exit()\n" : stdgo.GoString);
