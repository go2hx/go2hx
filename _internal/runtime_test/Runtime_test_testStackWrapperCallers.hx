package _internal.runtime_test;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.unsafe.Unsafe;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.unsafe.Unsafe;
import stdgo._internal.unsafe.Unsafe;
function testStackWrapperCallers(_t:stdgo.Ref<stdgo._internal.testing.Testing_T_.T_>):Void {
        var _d:_internal.runtime_test.Runtime_test_T_structWithMethod.T_structWithMethod = ({} : _internal.runtime_test.Runtime_test_T_structWithMethod.T_structWithMethod);
        var _wrapper = _internal.runtime_test.Runtime_test_T_structWithMethod_static_extension.T_structWithMethod_static_extension._callers;
        var _pcs = _wrapper((stdgo.Go.setRef(_d) : stdgo.Ref<_internal.runtime_test.Runtime_test_T_structWithMethod.T_structWithMethod>));
        var _frames = stdgo._internal.runtime.Runtime_callersFrames.callersFrames(_pcs);
        while (true) {
            var __tmp__ = _frames.next(), _fr:stdgo._internal.runtime.Runtime_Frame.Frame = __tmp__._0, _more:Bool = __tmp__._1;
            if (_fr.file == (("<autogenerated>" : stdgo.GoString))) {
                _t.fatalf(("<autogenerated> appears in stack trace: %+v" : stdgo.GoString), stdgo.Go.toInterface(_fr));
            };
            if (!_more) {
                break;
            };
        };
    }
