package _internal.runtime_test;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.unsafe.Unsafe;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.unsafe.Unsafe;
import stdgo._internal.unsafe.Unsafe;
function testStackWrapperStack(_t:stdgo.Ref<stdgo._internal.testing.Testing_T_.T_>):Void {
        var _d:_internal.runtime_test.Runtime_test_T_structWithMethod.T_structWithMethod = ({} : _internal.runtime_test.Runtime_test_T_structWithMethod.T_structWithMethod);
        var _wrapper = _internal.runtime_test.Runtime_test_T_structWithMethod_static_extension.T_structWithMethod_static_extension._stack;
        var _stk = (_wrapper((stdgo.Go.setRef(_d) : stdgo.Ref<_internal.runtime_test.Runtime_test_T_structWithMethod.T_structWithMethod>))?.__copy__() : stdgo.GoString);
        if (stdgo._internal.strings.Strings_contains.contains(_stk?.__copy__(), ("<autogenerated>" : stdgo.GoString))) {
            _t.fatalf(("<autogenerated> appears in stack trace:\n%s" : stdgo.GoString), stdgo.Go.toInterface(_stk));
        };
    }
