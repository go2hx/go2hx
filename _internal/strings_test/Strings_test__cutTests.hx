package _internal.strings_test;
import stdgo._internal.strings.Strings;
import stdgo._internal.strings.Strings;
import stdgo._internal.strings.Strings;
import stdgo._internal.strings.Strings;
import stdgo._internal.strings.Strings;
var _cutTests : stdgo.Slice<_internal.strings_test.Strings_test_T__struct_26.T__struct_26> = (new stdgo.Slice<_internal.strings_test.Strings_test_T__struct_26.T__struct_26>(8, 8, ...[({ _s : ("abc" : stdgo.GoString), _sep : ("b" : stdgo.GoString), _before : ("a" : stdgo.GoString), _after : ("c" : stdgo.GoString), _found : true } : _internal.strings_test.Strings_test_T__struct_26.T__struct_26), ({ _s : ("abc" : stdgo.GoString), _sep : ("a" : stdgo.GoString), _before : stdgo.Go.str()?.__copy__(), _after : ("bc" : stdgo.GoString), _found : true } : _internal.strings_test.Strings_test_T__struct_26.T__struct_26), ({ _s : ("abc" : stdgo.GoString), _sep : ("c" : stdgo.GoString), _before : ("ab" : stdgo.GoString), _after : stdgo.Go.str()?.__copy__(), _found : true } : _internal.strings_test.Strings_test_T__struct_26.T__struct_26), ({ _s : ("abc" : stdgo.GoString), _sep : ("abc" : stdgo.GoString), _before : stdgo.Go.str()?.__copy__(), _after : stdgo.Go.str()?.__copy__(), _found : true } : _internal.strings_test.Strings_test_T__struct_26.T__struct_26), ({ _s : ("abc" : stdgo.GoString), _sep : stdgo.Go.str()?.__copy__(), _before : stdgo.Go.str()?.__copy__(), _after : ("abc" : stdgo.GoString), _found : true } : _internal.strings_test.Strings_test_T__struct_26.T__struct_26), ({ _s : ("abc" : stdgo.GoString), _sep : ("d" : stdgo.GoString), _before : ("abc" : stdgo.GoString), _after : stdgo.Go.str()?.__copy__(), _found : false } : _internal.strings_test.Strings_test_T__struct_26.T__struct_26), ({ _s : stdgo.Go.str()?.__copy__(), _sep : ("d" : stdgo.GoString), _before : stdgo.Go.str()?.__copy__(), _after : stdgo.Go.str()?.__copy__(), _found : false } : _internal.strings_test.Strings_test_T__struct_26.T__struct_26), ({ _s : stdgo.Go.str()?.__copy__(), _sep : stdgo.Go.str()?.__copy__(), _before : stdgo.Go.str()?.__copy__(), _after : stdgo.Go.str()?.__copy__(), _found : true } : _internal.strings_test.Strings_test_T__struct_26.T__struct_26)].concat([for (i in 8 ... (8 > 8 ? 8 : 8 : stdgo.GoInt).toBasic()) ({ _s : ("" : stdgo.GoString), _sep : ("" : stdgo.GoString), _before : ("" : stdgo.GoString), _after : ("" : stdgo.GoString), _found : false } : _internal.strings_test.Strings_test_T__struct_26.T__struct_26)])) : stdgo.Slice<_internal.strings_test.Strings_test_T__struct_26.T__struct_26>);
