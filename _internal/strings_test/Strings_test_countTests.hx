package _internal.strings_test;
import stdgo._internal.strings.Strings;
import stdgo._internal.strings.Strings;
import stdgo._internal.strings.Strings;
import stdgo._internal.strings.Strings;
import stdgo._internal.strings.Strings;
var countTests : stdgo.Slice<_internal.strings_test.Strings_test_T__struct_25.T__struct_25> = (new stdgo.Slice<_internal.strings_test.Strings_test_T__struct_25.T__struct_25>(10, 10, ...[({ _s : stdgo.Go.str()?.__copy__(), _sep : stdgo.Go.str()?.__copy__(), _num : (1 : stdgo.GoInt) } : _internal.strings_test.Strings_test_T__struct_25.T__struct_25), ({ _s : stdgo.Go.str()?.__copy__(), _sep : ("notempty" : stdgo.GoString), _num : (0 : stdgo.GoInt) } : _internal.strings_test.Strings_test_T__struct_25.T__struct_25), ({ _s : ("notempty" : stdgo.GoString), _sep : stdgo.Go.str()?.__copy__(), _num : (9 : stdgo.GoInt) } : _internal.strings_test.Strings_test_T__struct_25.T__struct_25), ({ _s : ("smaller" : stdgo.GoString), _sep : ("not smaller" : stdgo.GoString), _num : (0 : stdgo.GoInt) } : _internal.strings_test.Strings_test_T__struct_25.T__struct_25), ({ _s : ("12345678987654321" : stdgo.GoString), _sep : ("6" : stdgo.GoString), _num : (2 : stdgo.GoInt) } : _internal.strings_test.Strings_test_T__struct_25.T__struct_25), ({ _s : ("611161116" : stdgo.GoString), _sep : ("6" : stdgo.GoString), _num : (3 : stdgo.GoInt) } : _internal.strings_test.Strings_test_T__struct_25.T__struct_25), ({ _s : ("notequal" : stdgo.GoString), _sep : ("NotEqual" : stdgo.GoString), _num : (0 : stdgo.GoInt) } : _internal.strings_test.Strings_test_T__struct_25.T__struct_25), ({ _s : ("equal" : stdgo.GoString), _sep : ("equal" : stdgo.GoString), _num : (1 : stdgo.GoInt) } : _internal.strings_test.Strings_test_T__struct_25.T__struct_25), ({ _s : ("abc1231231123q" : stdgo.GoString), _sep : ("123" : stdgo.GoString), _num : (3 : stdgo.GoInt) } : _internal.strings_test.Strings_test_T__struct_25.T__struct_25), ({ _s : ("11111" : stdgo.GoString), _sep : ("11" : stdgo.GoString), _num : (2 : stdgo.GoInt) } : _internal.strings_test.Strings_test_T__struct_25.T__struct_25)].concat([for (i in 10 ... (10 > 10 ? 10 : 10 : stdgo.GoInt).toBasic()) ({ _s : ("" : stdgo.GoString), _sep : ("" : stdgo.GoString), _num : (0 : stdgo.GoInt) } : _internal.strings_test.Strings_test_T__struct_25.T__struct_25)])) : stdgo.Slice<_internal.strings_test.Strings_test_T__struct_25.T__struct_25>);
