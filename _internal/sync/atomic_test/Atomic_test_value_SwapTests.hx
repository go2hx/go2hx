package _internal.sync.atomic_test;
import stdgo._internal.sync.atomic_.Atomic_;
import stdgo._internal.sync.atomic_.Atomic_;
var value_SwapTests : stdgo.Slice<_internal.sync.atomic_test.Atomic_test_T__struct_14.T__struct_14> = (new stdgo.Slice<_internal.sync.atomic_test.Atomic_test_T__struct_14.T__struct_14>(4, 4, ...[({ _init : (null : stdgo.AnyInterface), _new : (null : stdgo.AnyInterface), _err : stdgo.Go.toInterface(("sync/atomic: swap of nil value into Value" : stdgo.GoString)), _want : (null : stdgo.AnyInterface) } : _internal.sync.atomic_test.Atomic_test_T__struct_14.T__struct_14), ({ _init : (null : stdgo.AnyInterface), _new : stdgo.Go.toInterface(true), _want : (null : stdgo.AnyInterface), _err : (null : stdgo.AnyInterface) } : _internal.sync.atomic_test.Atomic_test_T__struct_14.T__struct_14), ({ _init : stdgo.Go.toInterface(true), _new : stdgo.Go.toInterface(stdgo.Go.str()), _err : stdgo.Go.toInterface(("sync/atomic: swap of inconsistently typed value into Value" : stdgo.GoString)), _want : (null : stdgo.AnyInterface) } : _internal.sync.atomic_test.Atomic_test_T__struct_14.T__struct_14), ({ _init : stdgo.Go.toInterface(true), _new : stdgo.Go.toInterface(false), _want : stdgo.Go.toInterface(true), _err : (null : stdgo.AnyInterface) } : _internal.sync.atomic_test.Atomic_test_T__struct_14.T__struct_14)].concat([for (i in 4 ... (4 > 4 ? 4 : 4 : stdgo.GoInt).toBasic()) ({ _init : (null : stdgo.AnyInterface), _new : (null : stdgo.AnyInterface), _want : (null : stdgo.AnyInterface), _err : (null : stdgo.AnyInterface) } : _internal.sync.atomic_test.Atomic_test_T__struct_14.T__struct_14)])) : stdgo.Slice<_internal.sync.atomic_test.Atomic_test_T__struct_14.T__struct_14>);
