package stdgo._internal.encoding.csv;
var _readTests : stdgo.Slice<stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest> = (new stdgo.Slice<stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest>(68, 68, ...[
({ name : ("Simple" : stdgo.GoString), input : ("§a,§b,§c\n" : stdgo.GoString), output : (new stdgo.Slice<stdgo.Slice<stdgo.GoString>>(1, 1, ...[(new stdgo.Slice<stdgo.GoString>(3, 3, ...[("a" : stdgo.GoString), ("b" : stdgo.GoString), ("c" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>)]) : stdgo.Slice<stdgo.Slice<stdgo.GoString>>) } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("CRLF" : stdgo.GoString), input : ("§a,§b\r\n¶§c,§d\r\n" : stdgo.GoString), output : (new stdgo.Slice<stdgo.Slice<stdgo.GoString>>(2, 2, ...[(new stdgo.Slice<stdgo.GoString>(2, 2, ...[("a" : stdgo.GoString), ("b" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>), (new stdgo.Slice<stdgo.GoString>(2, 2, ...[("c" : stdgo.GoString), ("d" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>)]) : stdgo.Slice<stdgo.Slice<stdgo.GoString>>) } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("BareCR" : stdgo.GoString), input : ("§a,§b\rc,§d\r\n" : stdgo.GoString), output : (new stdgo.Slice<stdgo.Slice<stdgo.GoString>>(1, 1, ...[(new stdgo.Slice<stdgo.GoString>(3, 3, ...[("a" : stdgo.GoString), ("b\rc" : stdgo.GoString), ("d" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>)]) : stdgo.Slice<stdgo.Slice<stdgo.GoString>>) } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("RFC4180test" : stdgo.GoString), input : ("§#field1,§field2,§field3\n¶§\"aaa\",§\"bb\nb\",§\"ccc\"\n¶§\"a,a\",§\"b\"\"bb\",§\"ccc\"\n¶§zzz,§yyy,§xxx\n" : stdgo.GoString), output : (new stdgo.Slice<stdgo.Slice<stdgo.GoString>>(4, 4, ...[(new stdgo.Slice<stdgo.GoString>(3, 3, ...[("#field1" : stdgo.GoString), ("field2" : stdgo.GoString), ("field3" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>), (new stdgo.Slice<stdgo.GoString>(3, 3, ...[("aaa" : stdgo.GoString), ("bb\nb" : stdgo.GoString), ("ccc" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>), (new stdgo.Slice<stdgo.GoString>(3, 3, ...[("a,a" : stdgo.GoString), ("b\"bb" : stdgo.GoString), ("ccc" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>), (new stdgo.Slice<stdgo.GoString>(3, 3, ...[("zzz" : stdgo.GoString), ("yyy" : stdgo.GoString), ("xxx" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>)]) : stdgo.Slice<stdgo.Slice<stdgo.GoString>>), useFieldsPerRecord : true, fieldsPerRecord : (0 : stdgo.GoInt) } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("NoEOLTest" : stdgo.GoString), input : ("§a,§b,§c" : stdgo.GoString), output : (new stdgo.Slice<stdgo.Slice<stdgo.GoString>>(1, 1, ...[(new stdgo.Slice<stdgo.GoString>(3, 3, ...[("a" : stdgo.GoString), ("b" : stdgo.GoString), ("c" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>)]) : stdgo.Slice<stdgo.Slice<stdgo.GoString>>) } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("Semicolon" : stdgo.GoString), input : ("§a;§b;§c\n" : stdgo.GoString), output : (new stdgo.Slice<stdgo.Slice<stdgo.GoString>>(1, 1, ...[(new stdgo.Slice<stdgo.GoString>(3, 3, ...[("a" : stdgo.GoString), ("b" : stdgo.GoString), ("c" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>)]) : stdgo.Slice<stdgo.Slice<stdgo.GoString>>), comma : (59 : stdgo.GoInt32) } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("MultiLine" : stdgo.GoString), input : ("§\"two\nline\",§\"one line\",§\"three\nline\nfield\"" : stdgo.GoString), output : (new stdgo.Slice<stdgo.Slice<stdgo.GoString>>(1, 1, ...[(new stdgo.Slice<stdgo.GoString>(3, 3, ...[("two\nline" : stdgo.GoString), ("one line" : stdgo.GoString), ("three\nline\nfield" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>)]) : stdgo.Slice<stdgo.Slice<stdgo.GoString>>) } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("BlankLine" : stdgo.GoString), input : ("§a,§b,§c\n\n¶§d,§e,§f\n\n" : stdgo.GoString), output : (new stdgo.Slice<stdgo.Slice<stdgo.GoString>>(2, 2, ...[(new stdgo.Slice<stdgo.GoString>(3, 3, ...[("a" : stdgo.GoString), ("b" : stdgo.GoString), ("c" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>), (new stdgo.Slice<stdgo.GoString>(3, 3, ...[("d" : stdgo.GoString), ("e" : stdgo.GoString), ("f" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>)]) : stdgo.Slice<stdgo.Slice<stdgo.GoString>>) } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("BlankLineFieldCount" : stdgo.GoString), input : ("§a,§b,§c\n\n¶§d,§e,§f\n\n" : stdgo.GoString), output : (new stdgo.Slice<stdgo.Slice<stdgo.GoString>>(2, 2, ...[(new stdgo.Slice<stdgo.GoString>(3, 3, ...[("a" : stdgo.GoString), ("b" : stdgo.GoString), ("c" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>), (new stdgo.Slice<stdgo.GoString>(3, 3, ...[("d" : stdgo.GoString), ("e" : stdgo.GoString), ("f" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>)]) : stdgo.Slice<stdgo.Slice<stdgo.GoString>>), useFieldsPerRecord : true, fieldsPerRecord : (0 : stdgo.GoInt) } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("TrimSpace" : stdgo.GoString), input : (" §a,  §b,   §c\n" : stdgo.GoString), output : (new stdgo.Slice<stdgo.Slice<stdgo.GoString>>(1, 1, ...[(new stdgo.Slice<stdgo.GoString>(3, 3, ...[("a" : stdgo.GoString), ("b" : stdgo.GoString), ("c" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>)]) : stdgo.Slice<stdgo.Slice<stdgo.GoString>>), trimLeadingSpace : true } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("LeadingSpace" : stdgo.GoString), input : ("§ a,§  b,§   c\n" : stdgo.GoString), output : (new stdgo.Slice<stdgo.Slice<stdgo.GoString>>(1, 1, ...[(new stdgo.Slice<stdgo.GoString>(3, 3, ...[(" a" : stdgo.GoString), ("  b" : stdgo.GoString), ("   c" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>)]) : stdgo.Slice<stdgo.Slice<stdgo.GoString>>) } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("Comment" : stdgo.GoString), input : ("#1,2,3\n§a,§b,§c\n#comment" : stdgo.GoString), output : (new stdgo.Slice<stdgo.Slice<stdgo.GoString>>(1, 1, ...[(new stdgo.Slice<stdgo.GoString>(3, 3, ...[("a" : stdgo.GoString), ("b" : stdgo.GoString), ("c" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>)]) : stdgo.Slice<stdgo.Slice<stdgo.GoString>>), comment : (35 : stdgo.GoInt32) } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("NoComment" : stdgo.GoString), input : ("§#1,§2,§3\n¶§a,§b,§c" : stdgo.GoString), output : (new stdgo.Slice<stdgo.Slice<stdgo.GoString>>(2, 2, ...[(new stdgo.Slice<stdgo.GoString>(3, 3, ...[("#1" : stdgo.GoString), ("2" : stdgo.GoString), ("3" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>), (new stdgo.Slice<stdgo.GoString>(3, 3, ...[("a" : stdgo.GoString), ("b" : stdgo.GoString), ("c" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>)]) : stdgo.Slice<stdgo.Slice<stdgo.GoString>>) } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("LazyQuotes" : stdgo.GoString), input : ("§a \"word\",§\"1\"2\",§a\",§\"b" : stdgo.GoString), output : (new stdgo.Slice<stdgo.Slice<stdgo.GoString>>(1, 1, ...[(new stdgo.Slice<stdgo.GoString>(4, 4, ...[("a \"word\"" : stdgo.GoString), ("1\"2" : stdgo.GoString), ("a\"" : stdgo.GoString), ("b" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>)]) : stdgo.Slice<stdgo.Slice<stdgo.GoString>>), lazyQuotes : true } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("BareQuotes" : stdgo.GoString), input : ("§a \"word\",§\"1\"2\",§a\"" : stdgo.GoString), output : (new stdgo.Slice<stdgo.Slice<stdgo.GoString>>(1, 1, ...[(new stdgo.Slice<stdgo.GoString>(3, 3, ...[("a \"word\"" : stdgo.GoString), ("1\"2" : stdgo.GoString), ("a\"" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>)]) : stdgo.Slice<stdgo.Slice<stdgo.GoString>>), lazyQuotes : true } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("BareDoubleQuotes" : stdgo.GoString), input : ("§a\"\"b,§c" : stdgo.GoString), output : (new stdgo.Slice<stdgo.Slice<stdgo.GoString>>(1, 1, ...[(new stdgo.Slice<stdgo.GoString>(2, 2, ...[("a\"\"b" : stdgo.GoString), ("c" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>)]) : stdgo.Slice<stdgo.Slice<stdgo.GoString>>), lazyQuotes : true } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("BadDoubleQuotes" : stdgo.GoString), input : ("§a∑\"\"b,c" : stdgo.GoString), errors : (new stdgo.Slice<stdgo.Error>(1, 1, ...[stdgo.Go.asInterface((stdgo.Go.setRef(({ err : stdgo._internal.encoding.csv.Csv_errbarequote.errBareQuote } : stdgo._internal.encoding.csv.Csv_parseerror.ParseError)) : stdgo.Ref<stdgo._internal.encoding.csv.Csv_parseerror.ParseError>))]) : stdgo.Slice<stdgo.Error>) } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("TrimQuote" : stdgo.GoString), input : (" §\"a\",§\" b\",§c" : stdgo.GoString), output : (new stdgo.Slice<stdgo.Slice<stdgo.GoString>>(1, 1, ...[(new stdgo.Slice<stdgo.GoString>(3, 3, ...[("a" : stdgo.GoString), (" b" : stdgo.GoString), ("c" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>)]) : stdgo.Slice<stdgo.Slice<stdgo.GoString>>), trimLeadingSpace : true } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("BadBareQuote" : stdgo.GoString), input : ("§a ∑\"word\",\"b\"" : stdgo.GoString), errors : (new stdgo.Slice<stdgo.Error>(1, 1, ...[stdgo.Go.asInterface((stdgo.Go.setRef(({ err : stdgo._internal.encoding.csv.Csv_errbarequote.errBareQuote } : stdgo._internal.encoding.csv.Csv_parseerror.ParseError)) : stdgo.Ref<stdgo._internal.encoding.csv.Csv_parseerror.ParseError>))]) : stdgo.Slice<stdgo.Error>) } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("BadTrailingQuote" : stdgo.GoString), input : ("§\"a word\",b∑\"" : stdgo.GoString), errors : (new stdgo.Slice<stdgo.Error>(1, 1, ...[stdgo.Go.asInterface((stdgo.Go.setRef(({ err : stdgo._internal.encoding.csv.Csv_errbarequote.errBareQuote } : stdgo._internal.encoding.csv.Csv_parseerror.ParseError)) : stdgo.Ref<stdgo._internal.encoding.csv.Csv_parseerror.ParseError>))]) : stdgo.Slice<stdgo.Error>) } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("ExtraneousQuote" : stdgo.GoString), input : ("§\"a ∑\"word\",\"b\"" : stdgo.GoString), errors : (new stdgo.Slice<stdgo.Error>(1, 1, ...[stdgo.Go.asInterface((stdgo.Go.setRef(({ err : stdgo._internal.encoding.csv.Csv_errquote.errQuote } : stdgo._internal.encoding.csv.Csv_parseerror.ParseError)) : stdgo.Ref<stdgo._internal.encoding.csv.Csv_parseerror.ParseError>))]) : stdgo.Slice<stdgo.Error>) } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("BadFieldCount" : stdgo.GoString), input : ("§a,§b,§c\n¶∑§d,§e" : stdgo.GoString), errors : (new stdgo.Slice<stdgo.Error>(2, 2, ...[(null : stdgo.Error), stdgo.Go.asInterface((stdgo.Go.setRef(({ err : stdgo._internal.encoding.csv.Csv_errfieldcount.errFieldCount } : stdgo._internal.encoding.csv.Csv_parseerror.ParseError)) : stdgo.Ref<stdgo._internal.encoding.csv.Csv_parseerror.ParseError>))]) : stdgo.Slice<stdgo.Error>), output : (new stdgo.Slice<stdgo.Slice<stdgo.GoString>>(2, 2, ...[(new stdgo.Slice<stdgo.GoString>(3, 3, ...[("a" : stdgo.GoString), ("b" : stdgo.GoString), ("c" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>), (new stdgo.Slice<stdgo.GoString>(2, 2, ...[("d" : stdgo.GoString), ("e" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>)]) : stdgo.Slice<stdgo.Slice<stdgo.GoString>>), useFieldsPerRecord : true, fieldsPerRecord : (0 : stdgo.GoInt) } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("BadFieldCountMultiple" : stdgo.GoString), input : ("§a,§b,§c\n¶∑§d,§e\n¶∑§f" : stdgo.GoString), errors : (new stdgo.Slice<stdgo.Error>(3, 3, ...[(null : stdgo.Error), stdgo.Go.asInterface((stdgo.Go.setRef(({ err : stdgo._internal.encoding.csv.Csv_errfieldcount.errFieldCount } : stdgo._internal.encoding.csv.Csv_parseerror.ParseError)) : stdgo.Ref<stdgo._internal.encoding.csv.Csv_parseerror.ParseError>)), stdgo.Go.asInterface((stdgo.Go.setRef(({ err : stdgo._internal.encoding.csv.Csv_errfieldcount.errFieldCount } : stdgo._internal.encoding.csv.Csv_parseerror.ParseError)) : stdgo.Ref<stdgo._internal.encoding.csv.Csv_parseerror.ParseError>))]) : stdgo.Slice<stdgo.Error>), output : (new stdgo.Slice<stdgo.Slice<stdgo.GoString>>(3, 3, ...[(new stdgo.Slice<stdgo.GoString>(3, 3, ...[("a" : stdgo.GoString), ("b" : stdgo.GoString), ("c" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>), (new stdgo.Slice<stdgo.GoString>(2, 2, ...[("d" : stdgo.GoString), ("e" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>), (new stdgo.Slice<stdgo.GoString>(1, 1, ...[("f" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>)]) : stdgo.Slice<stdgo.Slice<stdgo.GoString>>), useFieldsPerRecord : true, fieldsPerRecord : (0 : stdgo.GoInt) } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("BadFieldCount1" : stdgo.GoString), input : ("§∑a,§b,§c" : stdgo.GoString), errors : (new stdgo.Slice<stdgo.Error>(1, 1, ...[stdgo.Go.asInterface((stdgo.Go.setRef(({ err : stdgo._internal.encoding.csv.Csv_errfieldcount.errFieldCount } : stdgo._internal.encoding.csv.Csv_parseerror.ParseError)) : stdgo.Ref<stdgo._internal.encoding.csv.Csv_parseerror.ParseError>))]) : stdgo.Slice<stdgo.Error>), output : (new stdgo.Slice<stdgo.Slice<stdgo.GoString>>(1, 1, ...[(new stdgo.Slice<stdgo.GoString>(3, 3, ...[("a" : stdgo.GoString), ("b" : stdgo.GoString), ("c" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>)]) : stdgo.Slice<stdgo.Slice<stdgo.GoString>>), useFieldsPerRecord : true, fieldsPerRecord : (2 : stdgo.GoInt) } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("FieldCount" : stdgo.GoString), input : ("§a,§b,§c\n¶§d,§e" : stdgo.GoString), output : (new stdgo.Slice<stdgo.Slice<stdgo.GoString>>(2, 2, ...[(new stdgo.Slice<stdgo.GoString>(3, 3, ...[("a" : stdgo.GoString), ("b" : stdgo.GoString), ("c" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>), (new stdgo.Slice<stdgo.GoString>(2, 2, ...[("d" : stdgo.GoString), ("e" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>)]) : stdgo.Slice<stdgo.Slice<stdgo.GoString>>) } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("TrailingCommaEOF" : stdgo.GoString), input : ("§a,§b,§c,§" : stdgo.GoString), output : (new stdgo.Slice<stdgo.Slice<stdgo.GoString>>(1, 1, ...[(new stdgo.Slice<stdgo.GoString>(4, 4, ...[("a" : stdgo.GoString), ("b" : stdgo.GoString), ("c" : stdgo.GoString), (stdgo.Go.str() : stdgo.GoString)?.__copy__()]).__setString__() : stdgo.Slice<stdgo.GoString>)]) : stdgo.Slice<stdgo.Slice<stdgo.GoString>>) } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("TrailingCommaEOL" : stdgo.GoString), input : ("§a,§b,§c,§\n" : stdgo.GoString), output : (new stdgo.Slice<stdgo.Slice<stdgo.GoString>>(1, 1, ...[(new stdgo.Slice<stdgo.GoString>(4, 4, ...[("a" : stdgo.GoString), ("b" : stdgo.GoString), ("c" : stdgo.GoString), (stdgo.Go.str() : stdgo.GoString)?.__copy__()]).__setString__() : stdgo.Slice<stdgo.GoString>)]) : stdgo.Slice<stdgo.Slice<stdgo.GoString>>) } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("TrailingCommaSpaceEOF" : stdgo.GoString), input : ("§a,§b,§c, §" : stdgo.GoString), output : (new stdgo.Slice<stdgo.Slice<stdgo.GoString>>(1, 1, ...[(new stdgo.Slice<stdgo.GoString>(4, 4, ...[("a" : stdgo.GoString), ("b" : stdgo.GoString), ("c" : stdgo.GoString), (stdgo.Go.str() : stdgo.GoString)?.__copy__()]).__setString__() : stdgo.Slice<stdgo.GoString>)]) : stdgo.Slice<stdgo.Slice<stdgo.GoString>>), trimLeadingSpace : true } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("TrailingCommaSpaceEOL" : stdgo.GoString), input : ("§a,§b,§c, §\n" : stdgo.GoString), output : (new stdgo.Slice<stdgo.Slice<stdgo.GoString>>(1, 1, ...[(new stdgo.Slice<stdgo.GoString>(4, 4, ...[("a" : stdgo.GoString), ("b" : stdgo.GoString), ("c" : stdgo.GoString), (stdgo.Go.str() : stdgo.GoString)?.__copy__()]).__setString__() : stdgo.Slice<stdgo.GoString>)]) : stdgo.Slice<stdgo.Slice<stdgo.GoString>>), trimLeadingSpace : true } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("TrailingCommaLine3" : stdgo.GoString), input : ("§a,§b,§c\n¶§d,§e,§f\n¶§g,§hi,§" : stdgo.GoString), output : (new stdgo.Slice<stdgo.Slice<stdgo.GoString>>(3, 3, ...[(new stdgo.Slice<stdgo.GoString>(3, 3, ...[("a" : stdgo.GoString), ("b" : stdgo.GoString), ("c" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>), (new stdgo.Slice<stdgo.GoString>(3, 3, ...[("d" : stdgo.GoString), ("e" : stdgo.GoString), ("f" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>), (new stdgo.Slice<stdgo.GoString>(3, 3, ...[("g" : stdgo.GoString), ("hi" : stdgo.GoString), (stdgo.Go.str() : stdgo.GoString)?.__copy__()]).__setString__() : stdgo.Slice<stdgo.GoString>)]) : stdgo.Slice<stdgo.Slice<stdgo.GoString>>), trimLeadingSpace : true } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("NotTrailingComma3" : stdgo.GoString), input : ("§a,§b,§c,§ \n" : stdgo.GoString), output : (new stdgo.Slice<stdgo.Slice<stdgo.GoString>>(1, 1, ...[(new stdgo.Slice<stdgo.GoString>(4, 4, ...[("a" : stdgo.GoString), ("b" : stdgo.GoString), ("c" : stdgo.GoString), (" " : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>)]) : stdgo.Slice<stdgo.Slice<stdgo.GoString>>) } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("CommaFieldTest" : stdgo.GoString), input : ("§x,§y,§z,§w\n¶§x,§y,§z,§\n¶§x,§y,§,§\n¶§x,§,§,§\n¶§,§,§,§\n¶§\"x\",§\"y\",§\"z\",§\"w\"\n¶§\"x\",§\"y\",§\"z\",§\"\"\n¶§\"x\",§\"y\",§\"\",§\"\"\n¶§\"x\",§\"\",§\"\",§\"\"\n¶§\"\",§\"\",§\"\",§\"\"\n" : stdgo.GoString), output : (new stdgo.Slice<stdgo.Slice<stdgo.GoString>>(10, 10, ...[(new stdgo.Slice<stdgo.GoString>(4, 4, ...[("x" : stdgo.GoString), ("y" : stdgo.GoString), ("z" : stdgo.GoString), ("w" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>), (new stdgo.Slice<stdgo.GoString>(4, 4, ...[("x" : stdgo.GoString), ("y" : stdgo.GoString), ("z" : stdgo.GoString), (stdgo.Go.str() : stdgo.GoString)?.__copy__()]).__setString__() : stdgo.Slice<stdgo.GoString>), (new stdgo.Slice<stdgo.GoString>(4, 4, ...[("x" : stdgo.GoString), ("y" : stdgo.GoString), (stdgo.Go.str() : stdgo.GoString)?.__copy__(), (stdgo.Go.str() : stdgo.GoString)?.__copy__()]).__setString__() : stdgo.Slice<stdgo.GoString>), (new stdgo.Slice<stdgo.GoString>(4, 4, ...[("x" : stdgo.GoString), (stdgo.Go.str() : stdgo.GoString)?.__copy__(), (stdgo.Go.str() : stdgo.GoString)?.__copy__(), (stdgo.Go.str() : stdgo.GoString)?.__copy__()]).__setString__() : stdgo.Slice<stdgo.GoString>), (new stdgo.Slice<stdgo.GoString>(4, 4, ...[(stdgo.Go.str() : stdgo.GoString)?.__copy__(), (stdgo.Go.str() : stdgo.GoString)?.__copy__(), (stdgo.Go.str() : stdgo.GoString)?.__copy__(), (stdgo.Go.str() : stdgo.GoString)?.__copy__()]).__setString__() : stdgo.Slice<stdgo.GoString>), (new stdgo.Slice<stdgo.GoString>(4, 4, ...[("x" : stdgo.GoString), ("y" : stdgo.GoString), ("z" : stdgo.GoString), ("w" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>), (new stdgo.Slice<stdgo.GoString>(4, 4, ...[("x" : stdgo.GoString), ("y" : stdgo.GoString), ("z" : stdgo.GoString), (stdgo.Go.str() : stdgo.GoString)?.__copy__()]).__setString__() : stdgo.Slice<stdgo.GoString>), (new stdgo.Slice<stdgo.GoString>(4, 4, ...[("x" : stdgo.GoString), ("y" : stdgo.GoString), (stdgo.Go.str() : stdgo.GoString)?.__copy__(), (stdgo.Go.str() : stdgo.GoString)?.__copy__()]).__setString__() : stdgo.Slice<stdgo.GoString>), (new stdgo.Slice<stdgo.GoString>(4, 4, ...[("x" : stdgo.GoString), (stdgo.Go.str() : stdgo.GoString)?.__copy__(), (stdgo.Go.str() : stdgo.GoString)?.__copy__(), (stdgo.Go.str() : stdgo.GoString)?.__copy__()]).__setString__() : stdgo.Slice<stdgo.GoString>), (new stdgo.Slice<stdgo.GoString>(4, 4, ...[(stdgo.Go.str() : stdgo.GoString)?.__copy__(), (stdgo.Go.str() : stdgo.GoString)?.__copy__(), (stdgo.Go.str() : stdgo.GoString)?.__copy__(), (stdgo.Go.str() : stdgo.GoString)?.__copy__()]).__setString__() : stdgo.Slice<stdgo.GoString>)]) : stdgo.Slice<stdgo.Slice<stdgo.GoString>>) } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("TrailingCommaIneffective1" : stdgo.GoString), input : ("§a,§b,§\n¶§c,§d,§e" : stdgo.GoString), output : (new stdgo.Slice<stdgo.Slice<stdgo.GoString>>(2, 2, ...[(new stdgo.Slice<stdgo.GoString>(3, 3, ...[("a" : stdgo.GoString), ("b" : stdgo.GoString), (stdgo.Go.str() : stdgo.GoString)?.__copy__()]).__setString__() : stdgo.Slice<stdgo.GoString>), (new stdgo.Slice<stdgo.GoString>(3, 3, ...[("c" : stdgo.GoString), ("d" : stdgo.GoString), ("e" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>)]) : stdgo.Slice<stdgo.Slice<stdgo.GoString>>), trimLeadingSpace : true } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("ReadAllReuseRecord" : stdgo.GoString), input : ("§a,§b\n¶§c,§d" : stdgo.GoString), output : (new stdgo.Slice<stdgo.Slice<stdgo.GoString>>(2, 2, ...[(new stdgo.Slice<stdgo.GoString>(2, 2, ...[("a" : stdgo.GoString), ("b" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>), (new stdgo.Slice<stdgo.GoString>(2, 2, ...[("c" : stdgo.GoString), ("d" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>)]) : stdgo.Slice<stdgo.Slice<stdgo.GoString>>), reuseRecord : true } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("StartLine1" : stdgo.GoString), input : ("§a,\"b\nc∑\"d,e" : stdgo.GoString), errors : (new stdgo.Slice<stdgo.Error>(1, 1, ...[stdgo.Go.asInterface((stdgo.Go.setRef(({ err : stdgo._internal.encoding.csv.Csv_errquote.errQuote } : stdgo._internal.encoding.csv.Csv_parseerror.ParseError)) : stdgo.Ref<stdgo._internal.encoding.csv.Csv_parseerror.ParseError>))]) : stdgo.Slice<stdgo.Error>) } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("StartLine2" : stdgo.GoString), input : ("§a,§b\n¶§\"d\n\n,e∑" : stdgo.GoString), errors : (new stdgo.Slice<stdgo.Error>(2, 2, ...[(null : stdgo.Error), stdgo.Go.asInterface((stdgo.Go.setRef(({ err : stdgo._internal.encoding.csv.Csv_errquote.errQuote } : stdgo._internal.encoding.csv.Csv_parseerror.ParseError)) : stdgo.Ref<stdgo._internal.encoding.csv.Csv_parseerror.ParseError>))]) : stdgo.Slice<stdgo.Error>), output : (new stdgo.Slice<stdgo.Slice<stdgo.GoString>>(1, 1, ...[(new stdgo.Slice<stdgo.GoString>(2, 2, ...[("a" : stdgo.GoString), ("b" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>)]) : stdgo.Slice<stdgo.Slice<stdgo.GoString>>) } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("CRLFInQuotedField" : stdgo.GoString), input : ("§A,§\"Hello\r\nHi\",§B\r\n" : stdgo.GoString), output : (new stdgo.Slice<stdgo.Slice<stdgo.GoString>>(1, 1, ...[(new stdgo.Slice<stdgo.GoString>(3, 3, ...[("A" : stdgo.GoString), ("Hello\nHi" : stdgo.GoString), ("B" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>)]) : stdgo.Slice<stdgo.Slice<stdgo.GoString>>) } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("BinaryBlobField" : stdgo.GoString), input : (stdgo.Go.str("§x09A", 180, 28, ",§aktau") : stdgo.GoString)?.__copy__(), output : (new stdgo.Slice<stdgo.Slice<stdgo.GoString>>(1, 1, ...[(new stdgo.Slice<stdgo.GoString>(2, 2, ...[(stdgo.Go.str("x09A", 180, 28) : stdgo.GoString)?.__copy__(), ("aktau" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>)]) : stdgo.Slice<stdgo.Slice<stdgo.GoString>>) } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("TrailingCR" : stdgo.GoString), input : ("§field1,§field2\r" : stdgo.GoString), output : (new stdgo.Slice<stdgo.Slice<stdgo.GoString>>(1, 1, ...[(new stdgo.Slice<stdgo.GoString>(2, 2, ...[("field1" : stdgo.GoString), ("field2" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>)]) : stdgo.Slice<stdgo.Slice<stdgo.GoString>>) } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("QuotedTrailingCR" : stdgo.GoString), input : ("§\"field\"\r" : stdgo.GoString), output : (new stdgo.Slice<stdgo.Slice<stdgo.GoString>>(1, 1, ...[(new stdgo.Slice<stdgo.GoString>(1, 1, ...[("field" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>)]) : stdgo.Slice<stdgo.Slice<stdgo.GoString>>) } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("QuotedTrailingCRCR" : stdgo.GoString), input : ("§\"field∑\"\r\r" : stdgo.GoString), errors : (new stdgo.Slice<stdgo.Error>(1, 1, ...[stdgo.Go.asInterface((stdgo.Go.setRef(({ err : stdgo._internal.encoding.csv.Csv_errquote.errQuote } : stdgo._internal.encoding.csv.Csv_parseerror.ParseError)) : stdgo.Ref<stdgo._internal.encoding.csv.Csv_parseerror.ParseError>))]) : stdgo.Slice<stdgo.Error>) } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("FieldCR" : stdgo.GoString), input : ("§field\rfield\r" : stdgo.GoString), output : (new stdgo.Slice<stdgo.Slice<stdgo.GoString>>(1, 1, ...[(new stdgo.Slice<stdgo.GoString>(1, 1, ...[("field\rfield" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>)]) : stdgo.Slice<stdgo.Slice<stdgo.GoString>>) } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("FieldCRCR" : stdgo.GoString), input : ("§field\r\rfield\r\r" : stdgo.GoString), output : (new stdgo.Slice<stdgo.Slice<stdgo.GoString>>(1, 1, ...[(new stdgo.Slice<stdgo.GoString>(1, 1, ...[("field\r\rfield\r" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>)]) : stdgo.Slice<stdgo.Slice<stdgo.GoString>>) } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("FieldCRCRLF" : stdgo.GoString), input : ("§field\r\r\n¶§field\r\r\n" : stdgo.GoString), output : (new stdgo.Slice<stdgo.Slice<stdgo.GoString>>(2, 2, ...[(new stdgo.Slice<stdgo.GoString>(1, 1, ...[("field\r" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>), (new stdgo.Slice<stdgo.GoString>(1, 1, ...[("field\r" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>)]) : stdgo.Slice<stdgo.Slice<stdgo.GoString>>) } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("FieldCRCRLFCR" : stdgo.GoString), input : ("§field\r\r\n¶§\rfield\r\r\n\r" : stdgo.GoString), output : (new stdgo.Slice<stdgo.Slice<stdgo.GoString>>(2, 2, ...[(new stdgo.Slice<stdgo.GoString>(1, 1, ...[("field\r" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>), (new stdgo.Slice<stdgo.GoString>(1, 1, ...[("\rfield\r" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>)]) : stdgo.Slice<stdgo.Slice<stdgo.GoString>>) } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("FieldCRCRLFCRCR" : stdgo.GoString), input : ("§field\r\r\n¶§\r\rfield\r\r\n¶§\r\r" : stdgo.GoString), output : (new stdgo.Slice<stdgo.Slice<stdgo.GoString>>(3, 3, ...[(new stdgo.Slice<stdgo.GoString>(1, 1, ...[("field\r" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>), (new stdgo.Slice<stdgo.GoString>(1, 1, ...[("\r\rfield\r" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>), (new stdgo.Slice<stdgo.GoString>(1, 1, ...[("\r" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>)]) : stdgo.Slice<stdgo.Slice<stdgo.GoString>>) } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("MultiFieldCRCRLFCRCR" : stdgo.GoString), input : ("§field1,§field2\r\r\n¶§\r\rfield1,§field2\r\r\n¶§\r\r,§" : stdgo.GoString), output : (new stdgo.Slice<stdgo.Slice<stdgo.GoString>>(3, 3, ...[(new stdgo.Slice<stdgo.GoString>(2, 2, ...[("field1" : stdgo.GoString), ("field2\r" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>), (new stdgo.Slice<stdgo.GoString>(2, 2, ...[("\r\rfield1" : stdgo.GoString), ("field2\r" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>), (new stdgo.Slice<stdgo.GoString>(2, 2, ...[("\r\r" : stdgo.GoString), (stdgo.Go.str() : stdgo.GoString)?.__copy__()]).__setString__() : stdgo.Slice<stdgo.GoString>)]) : stdgo.Slice<stdgo.Slice<stdgo.GoString>>) } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("NonASCIICommaAndComment" : stdgo.GoString), input : ("§a£§b,c£ \t§d,e\n€ comment\n" : stdgo.GoString), output : (new stdgo.Slice<stdgo.Slice<stdgo.GoString>>(1, 1, ...[(new stdgo.Slice<stdgo.GoString>(3, 3, ...[("a" : stdgo.GoString), ("b,c" : stdgo.GoString), ("d,e" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>)]) : stdgo.Slice<stdgo.Slice<stdgo.GoString>>), trimLeadingSpace : true, comma : (163 : stdgo.GoInt32), comment : (8364 : stdgo.GoInt32) } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("NonASCIICommaAndCommentWithQuotes" : stdgo.GoString), input : ("§a€§\"  b,\"€§ c\nλ comment\n" : stdgo.GoString), output : (new stdgo.Slice<stdgo.Slice<stdgo.GoString>>(1, 1, ...[(new stdgo.Slice<stdgo.GoString>(3, 3, ...[("a" : stdgo.GoString), ("  b," : stdgo.GoString), (" c" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>)]) : stdgo.Slice<stdgo.Slice<stdgo.GoString>>), comma : (8364 : stdgo.GoInt32), comment : (955 : stdgo.GoInt32) } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("NonASCIICommaConfusion" : stdgo.GoString), input : ("§\"abθcd\"λ§efθgh" : stdgo.GoString), output : (new stdgo.Slice<stdgo.Slice<stdgo.GoString>>(1, 1, ...[(new stdgo.Slice<stdgo.GoString>(2, 2, ...[("abθcd" : stdgo.GoString), ("efθgh" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>)]) : stdgo.Slice<stdgo.Slice<stdgo.GoString>>), comma : (955 : stdgo.GoInt32), comment : (8364 : stdgo.GoInt32) } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("NonASCIICommentConfusion" : stdgo.GoString), input : ("§λ\n¶§λ\nθ\n¶§λ\n" : stdgo.GoString), output : (new stdgo.Slice<stdgo.Slice<stdgo.GoString>>(3, 3, ...[(new stdgo.Slice<stdgo.GoString>(1, 1, ...[("λ" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>), (new stdgo.Slice<stdgo.GoString>(1, 1, ...[("λ" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>), (new stdgo.Slice<stdgo.GoString>(1, 1, ...[("λ" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>)]) : stdgo.Slice<stdgo.Slice<stdgo.GoString>>), comment : (952 : stdgo.GoInt32) } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("QuotedFieldMultipleLF" : stdgo.GoString), input : ("§\"\n\n\n\n\"" : stdgo.GoString), output : (new stdgo.Slice<stdgo.Slice<stdgo.GoString>>(1, 1, ...[(new stdgo.Slice<stdgo.GoString>(1, 1, ...[("\n\n\n\n" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>)]) : stdgo.Slice<stdgo.Slice<stdgo.GoString>>) } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("MultipleCRLF" : stdgo.GoString), input : ("\r\n\r\n\r\n\r\n" : stdgo.GoString) } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("HugeLines" : stdgo.GoString), input : ((((stdgo._internal.strings.Strings_repeat.repeat(("#ignore\n" : stdgo.GoString), (10000 : stdgo.GoInt)) + ("§" : stdgo.GoString)?.__copy__() : stdgo.GoString) + stdgo._internal.strings.Strings_repeat.repeat(("@" : stdgo.GoString), (5000 : stdgo.GoInt))?.__copy__() : stdgo.GoString) + (",§" : stdgo.GoString)?.__copy__() : stdgo.GoString) + stdgo._internal.strings.Strings_repeat.repeat(("*" : stdgo.GoString), (5000 : stdgo.GoInt))?.__copy__() : stdgo.GoString)?.__copy__(), output : (new stdgo.Slice<stdgo.Slice<stdgo.GoString>>(1, 1, ...[(new stdgo.Slice<stdgo.GoString>(2, 2, ...[stdgo._internal.strings.Strings_repeat.repeat(("@" : stdgo.GoString), (5000 : stdgo.GoInt))?.__copy__(), stdgo._internal.strings.Strings_repeat.repeat(("*" : stdgo.GoString), (5000 : stdgo.GoInt))?.__copy__()]).__setString__() : stdgo.Slice<stdgo.GoString>)]) : stdgo.Slice<stdgo.Slice<stdgo.GoString>>), comment : (35 : stdgo.GoInt32) } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("QuoteWithTrailingCRLF" : stdgo.GoString), input : ("§\"foo∑\"bar\"\r\n" : stdgo.GoString), errors : (new stdgo.Slice<stdgo.Error>(1, 1, ...[stdgo.Go.asInterface((stdgo.Go.setRef(({ err : stdgo._internal.encoding.csv.Csv_errquote.errQuote } : stdgo._internal.encoding.csv.Csv_parseerror.ParseError)) : stdgo.Ref<stdgo._internal.encoding.csv.Csv_parseerror.ParseError>))]) : stdgo.Slice<stdgo.Error>) } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("LazyQuoteWithTrailingCRLF" : stdgo.GoString), input : ("§\"foo\"bar\"\r\n" : stdgo.GoString), output : (new stdgo.Slice<stdgo.Slice<stdgo.GoString>>(1, 1, ...[(new stdgo.Slice<stdgo.GoString>(1, 1, ...[("foo\"bar" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>)]) : stdgo.Slice<stdgo.Slice<stdgo.GoString>>), lazyQuotes : true } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("DoubleQuoteWithTrailingCRLF" : stdgo.GoString), input : ("§\"foo\"\"bar\"\r\n" : stdgo.GoString), output : (new stdgo.Slice<stdgo.Slice<stdgo.GoString>>(1, 1, ...[(new stdgo.Slice<stdgo.GoString>(1, 1, ...[("foo\"bar" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>)]) : stdgo.Slice<stdgo.Slice<stdgo.GoString>>) } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("EvenQuotes" : stdgo.GoString), input : ("§\"\"\"\"\"\"\"\"" : stdgo.GoString), output : (new stdgo.Slice<stdgo.Slice<stdgo.GoString>>(1, 1, ...[(new stdgo.Slice<stdgo.GoString>(1, 1, ...[("\"\"\"" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>)]) : stdgo.Slice<stdgo.Slice<stdgo.GoString>>) } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("OddQuotes" : stdgo.GoString), input : ("§\"\"\"\"\"\"\"∑" : stdgo.GoString), errors : (new stdgo.Slice<stdgo.Error>(1, 1, ...[stdgo.Go.asInterface((stdgo.Go.setRef(({ err : stdgo._internal.encoding.csv.Csv_errquote.errQuote } : stdgo._internal.encoding.csv.Csv_parseerror.ParseError)) : stdgo.Ref<stdgo._internal.encoding.csv.Csv_parseerror.ParseError>))]) : stdgo.Slice<stdgo.Error>) } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("LazyOddQuotes" : stdgo.GoString), input : ("§\"\"\"\"\"\"\"" : stdgo.GoString), output : (new stdgo.Slice<stdgo.Slice<stdgo.GoString>>(1, 1, ...[(new stdgo.Slice<stdgo.GoString>(1, 1, ...[("\"\"\"" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>)]) : stdgo.Slice<stdgo.Slice<stdgo.GoString>>), lazyQuotes : true } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("BadComma1" : stdgo.GoString), comma : (10 : stdgo.GoInt32), errors : (new stdgo.Slice<stdgo.Error>(1, 1, ...[stdgo._internal.encoding.csv.Csv__errinvaliddelim._errInvalidDelim]) : stdgo.Slice<stdgo.Error>) } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("BadComma2" : stdgo.GoString), comma : (13 : stdgo.GoInt32), errors : (new stdgo.Slice<stdgo.Error>(1, 1, ...[stdgo._internal.encoding.csv.Csv__errinvaliddelim._errInvalidDelim]) : stdgo.Slice<stdgo.Error>) } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("BadComma3" : stdgo.GoString), comma : (34 : stdgo.GoInt32), errors : (new stdgo.Slice<stdgo.Error>(1, 1, ...[stdgo._internal.encoding.csv.Csv__errinvaliddelim._errInvalidDelim]) : stdgo.Slice<stdgo.Error>) } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("BadComma4" : stdgo.GoString), comma : (65533 : stdgo.GoInt32), errors : (new stdgo.Slice<stdgo.Error>(1, 1, ...[stdgo._internal.encoding.csv.Csv__errinvaliddelim._errInvalidDelim]) : stdgo.Slice<stdgo.Error>) } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("BadComment1" : stdgo.GoString), comment : (10 : stdgo.GoInt32), errors : (new stdgo.Slice<stdgo.Error>(1, 1, ...[stdgo._internal.encoding.csv.Csv__errinvaliddelim._errInvalidDelim]) : stdgo.Slice<stdgo.Error>) } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("BadComment2" : stdgo.GoString), comment : (13 : stdgo.GoInt32), errors : (new stdgo.Slice<stdgo.Error>(1, 1, ...[stdgo._internal.encoding.csv.Csv__errinvaliddelim._errInvalidDelim]) : stdgo.Slice<stdgo.Error>) } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("BadComment3" : stdgo.GoString), comment : (65533 : stdgo.GoInt32), errors : (new stdgo.Slice<stdgo.Error>(1, 1, ...[stdgo._internal.encoding.csv.Csv__errinvaliddelim._errInvalidDelim]) : stdgo.Slice<stdgo.Error>) } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest),
({ name : ("BadCommaComment" : stdgo.GoString), comma : (88 : stdgo.GoInt32), comment : (88 : stdgo.GoInt32), errors : (new stdgo.Slice<stdgo.Error>(1, 1, ...[stdgo._internal.encoding.csv.Csv__errinvaliddelim._errInvalidDelim]) : stdgo.Slice<stdgo.Error>) } : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest)].concat([for (i in 68 ... (68 > 68 ? 68 : 68 : stdgo.GoInt).toBasic()) ({} : stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest)])) : stdgo.Slice<stdgo._internal.encoding.csv.Csv_t_readtest.T_readTest>);
