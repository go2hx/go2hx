package stdgo._internal.encoding.json;
var _indentErrorTests : stdgo.Slice<stdgo._internal.encoding.json.Json_T_indentErrorTest.T_indentErrorTest> = (new stdgo.Slice<stdgo._internal.encoding.json.Json_T_indentErrorTest.T_indentErrorTest>(2, 2, ...[(new stdgo._internal.encoding.json.Json_T_indentErrorTest.T_indentErrorTest(("{\"X\": \"foo\", \"Y\"}" : stdgo.GoString), stdgo.Go.asInterface((stdgo.Go.setRef((new stdgo._internal.encoding.json.Json_SyntaxError.SyntaxError(("invalid character \'}\' after object key" : stdgo.GoString), (17i64 : stdgo.GoInt64)) : stdgo._internal.encoding.json.Json_SyntaxError.SyntaxError)) : stdgo.Ref<stdgo._internal.encoding.json.Json_SyntaxError.SyntaxError>))) : stdgo._internal.encoding.json.Json_T_indentErrorTest.T_indentErrorTest), (new stdgo._internal.encoding.json.Json_T_indentErrorTest.T_indentErrorTest(("{\"X\": \"foo\" \"Y\": \"bar\"}" : stdgo.GoString), stdgo.Go.asInterface((stdgo.Go.setRef((new stdgo._internal.encoding.json.Json_SyntaxError.SyntaxError(("invalid character \'\"\' after object key:value pair" : stdgo.GoString), (13i64 : stdgo.GoInt64)) : stdgo._internal.encoding.json.Json_SyntaxError.SyntaxError)) : stdgo.Ref<stdgo._internal.encoding.json.Json_SyntaxError.SyntaxError>))) : stdgo._internal.encoding.json.Json_T_indentErrorTest.T_indentErrorTest)].concat([for (i in 2 ... (2 > 2 ? 2 : 2 : stdgo.GoInt).toBasic()) ({} : stdgo._internal.encoding.json.Json_T_indentErrorTest.T_indentErrorTest)])) : stdgo.Slice<stdgo._internal.encoding.json.Json_T_indentErrorTest.T_indentErrorTest>);
