package stdgo._internal.encoding.json;
var _invalidUnmarshalTextTests : stdgo.Slice<stdgo._internal.encoding.json.Json_t__struct_12.T__struct_12> = (new stdgo.Slice<stdgo._internal.encoding.json.Json_t__struct_12.T__struct_12>(4, 4, ...[({ _v : (null : stdgo.AnyInterface), _want : ("json: Unmarshal(nil)" : stdgo.GoString) } : stdgo._internal.encoding.json.Json_t__struct_12.T__struct_12), ({ _v : stdgo.Go.toInterface(stdgo.Go.asInterface((new stdgo._internal.encoding.json.Json_t_unquotedvalue.T_unquotedValue() : stdgo._internal.encoding.json.Json_t_unquotedvalue.T_unquotedValue))), _want : ("json: Unmarshal(non-pointer struct {})" : stdgo.GoString) } : stdgo._internal.encoding.json.Json_t__struct_12.T__struct_12), ({ _v : stdgo.Go.toInterface((null : stdgo.Pointer<stdgo.GoInt>)), _want : ("json: Unmarshal(nil *int)" : stdgo.GoString) } : stdgo._internal.encoding.json.Json_t__struct_12.T__struct_12), ({ _v : stdgo.Go.toInterface(stdgo.Go.asInterface((stdgo.Go.setRef(new stdgo._internal.net.Net_ip.IP(0, 0)) : stdgo.Ref<stdgo._internal.net.Net_ip.IP>))), _want : ("json: cannot unmarshal number into Go value of type *net.IP" : stdgo.GoString) } : stdgo._internal.encoding.json.Json_t__struct_12.T__struct_12)].concat([for (i in 4 ... (4 > 4 ? 4 : 4 : stdgo.GoInt).toBasic()) ({ _v : (null : stdgo.AnyInterface), _want : ("" : stdgo.GoString) } : stdgo._internal.encoding.json.Json_t__struct_12.T__struct_12)])) : stdgo.Slice<stdgo._internal.encoding.json.Json_t__struct_12.T__struct_12>);
