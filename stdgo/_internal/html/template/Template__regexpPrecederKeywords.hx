package stdgo._internal.html.template;
import stdgo._internal.reflect.Reflect;
import stdgo._internal.internal.godebug.Godebug;
import stdgo._internal.regexp.Regexp;
import stdgo._internal.fmt.Fmt;
import stdgo._internal.strings.Strings;
import stdgo._internal.unicode.utf8.Utf8;
import stdgo._internal.bytes.Bytes;
import stdgo._internal.text.template.parse.Parse;
import stdgo._internal.html.Html;
import stdgo._internal.text.template.Template;
import stdgo._internal.encoding.json.Json;
import stdgo._internal.path.filepath.Filepath;
import stdgo._internal.io.fs.Fs;
import stdgo._internal.os.Os;
import stdgo._internal.path.Path;
import stdgo._internal.strconv.Strconv;
var _regexpPrecederKeywords : stdgo.GoMap<stdgo.GoString, Bool> = ({
        final x = new stdgo.GoMap.GoStringMap<Bool>();
        x.__defaultValue__ = () -> false;
        x.set(("break" : stdgo.GoString), true);
x.set(("case" : stdgo.GoString), true);
x.set(("continue" : stdgo.GoString), true);
x.set(("delete" : stdgo.GoString), true);
x.set(("do" : stdgo.GoString), true);
x.set(("else" : stdgo.GoString), true);
x.set(("finally" : stdgo.GoString), true);
x.set(("in" : stdgo.GoString), true);
x.set(("instanceof" : stdgo.GoString), true);
x.set(("return" : stdgo.GoString), true);
x.set(("throw" : stdgo.GoString), true);
x.set(("try" : stdgo.GoString), true);
x.set(("typeof" : stdgo.GoString), true);
x.set(("void" : stdgo.GoString), true);
        x;
    } : stdgo.GoMap<stdgo.GoString, Bool>);
