package stdgo._internal.math.big;
import stdgo._internal.strings.Strings;
import stdgo._internal.internal.testenv.Testenv;
import stdgo._internal.math.rand.Rand;
import stdgo._internal.flag.Flag;
import stdgo._internal.errors.Errors;
import stdgo._internal.math.bits.Bits;
import stdgo._internal.fmt.Fmt;
import stdgo._internal.testing.Testing;
import stdgo._internal.math.Math;
import stdgo._internal.strconv.Strconv;
import stdgo._internal.encoding.gob.Gob;
import stdgo._internal.bytes.Bytes;
import stdgo._internal.io.Io;
import stdgo._internal.encoding.json.Json;
import stdgo._internal.testing.quick.Quick;
import stdgo._internal.encoding.hex.Hex;
import stdgo._internal.encoding.xml.Xml;
import stdgo._internal.path.filepath.Filepath;
import stdgo._internal.os.Os;
import stdgo._internal.os.exec.Exec;
import stdgo._internal.encoding.binary.Binary;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.unicode.Unicode;
import stdgo._internal.reflect.Reflect;
import stdgo._internal.sort.Sort;
function _lehmerUpdate(a:stdgo.Ref<stdgo._internal.math.big.Big_Int_.Int_>, b:stdgo.Ref<stdgo._internal.math.big.Big_Int_.Int_>, _q:stdgo.Ref<stdgo._internal.math.big.Big_Int_.Int_>, _r:stdgo.Ref<stdgo._internal.math.big.Big_Int_.Int_>, _s:stdgo.Ref<stdgo._internal.math.big.Big_Int_.Int_>, _t:stdgo.Ref<stdgo._internal.math.big.Big_Int_.Int_>, _u0:stdgo._internal.math.big.Big_Word.Word, _u1:stdgo._internal.math.big.Big_Word.Word, _v0:stdgo._internal.math.big.Big_Word.Word, _v1:stdgo._internal.math.big.Big_Word.Word, _even:Bool):Void {
        (@:checkr _t ?? throw "null pointer dereference")._abs = (@:checkr _t ?? throw "null pointer dereference")._abs._setWord(_u0);
        (@:checkr _s ?? throw "null pointer dereference")._abs = (@:checkr _s ?? throw "null pointer dereference")._abs._setWord(_v0);
        (@:checkr _t ?? throw "null pointer dereference")._neg = !_even;
        (@:checkr _s ?? throw "null pointer dereference")._neg = _even;
        @:check2r _t.mul(a, _t);
        @:check2r _s.mul(b, _s);
        (@:checkr _r ?? throw "null pointer dereference")._abs = (@:checkr _r ?? throw "null pointer dereference")._abs._setWord(_u1);
        (@:checkr _q ?? throw "null pointer dereference")._abs = (@:checkr _q ?? throw "null pointer dereference")._abs._setWord(_v1);
        (@:checkr _r ?? throw "null pointer dereference")._neg = _even;
        (@:checkr _q ?? throw "null pointer dereference")._neg = !_even;
        @:check2r _r.mul(a, _r);
        @:check2r _q.mul(b, _q);
        @:check2r a.add(_t, _s);
        @:check2r b.add(_r, _q);
    }
