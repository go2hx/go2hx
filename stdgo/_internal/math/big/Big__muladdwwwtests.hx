package stdgo._internal.math.big;
var _mulAddWWWTests : stdgo.Slice<stdgo._internal.math.big.Big_t__struct_2.T__struct_2> = (new stdgo.Slice<stdgo._internal.math.big.Big_t__struct_2.T__struct_2>(2, 2, ...[({ _x : (-1u32 : stdgo._internal.math.big.Big_word.Word), _y : (-1u32 : stdgo._internal.math.big.Big_word.Word), _c : (0u32 : stdgo._internal.math.big.Big_word.Word), _q : (-2u32 : stdgo._internal.math.big.Big_word.Word), _r : (1u32 : stdgo._internal.math.big.Big_word.Word) } : stdgo._internal.math.big.Big_t__struct_2.T__struct_2), ({ _x : (-1u32 : stdgo._internal.math.big.Big_word.Word), _y : (-1u32 : stdgo._internal.math.big.Big_word.Word), _c : (-1u32 : stdgo._internal.math.big.Big_word.Word), _q : (-1u32 : stdgo._internal.math.big.Big_word.Word), _r : (0u32 : stdgo._internal.math.big.Big_word.Word) } : stdgo._internal.math.big.Big_t__struct_2.T__struct_2)].concat([for (i in 2 ... (2 > 2 ? 2 : 2 : stdgo.GoInt).toBasic()) ({ _x : ((0 : stdgo.GoUInt) : stdgo._internal.math.big.Big_word.Word), _y : ((0 : stdgo.GoUInt) : stdgo._internal.math.big.Big_word.Word), _c : ((0 : stdgo.GoUInt) : stdgo._internal.math.big.Big_word.Word), _q : ((0 : stdgo.GoUInt) : stdgo._internal.math.big.Big_word.Word), _r : ((0 : stdgo.GoUInt) : stdgo._internal.math.big.Big_word.Word) } : stdgo._internal.math.big.Big_t__struct_2.T__struct_2)])) : stdgo.Slice<stdgo._internal.math.big.Big_t__struct_2.T__struct_2>);
