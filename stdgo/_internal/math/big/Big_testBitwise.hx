package stdgo._internal.math.big;
import stdgo._internal.strings.Strings;
import stdgo._internal.internal.testenv.Testenv;
import stdgo._internal.math.rand.Rand;
import stdgo._internal.flag.Flag;
import stdgo._internal.errors.Errors;
import stdgo._internal.math.bits.Bits;
import stdgo._internal.fmt.Fmt;
import stdgo._internal.testing.Testing;
import stdgo._internal.math.Math;
import stdgo._internal.strconv.Strconv;
import stdgo._internal.encoding.gob.Gob;
import stdgo._internal.bytes.Bytes;
import stdgo._internal.io.Io;
import stdgo._internal.encoding.json.Json;
import stdgo._internal.testing.quick.Quick;
import stdgo._internal.encoding.hex.Hex;
import stdgo._internal.encoding.xml.Xml;
import stdgo._internal.path.filepath.Filepath;
import stdgo._internal.os.Os;
import stdgo._internal.os.exec.Exec;
import stdgo._internal.encoding.binary.Binary;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.unicode.Unicode;
import stdgo._internal.reflect.Reflect;
import stdgo._internal.sort.Sort;
function testBitwise(_t:stdgo.Ref<stdgo._internal.testing.Testing_T_.T_>):Void {
        var _x = (stdgo.Go.setRef(({} : stdgo._internal.math.big.Big_Int_.Int_)) : stdgo.Ref<stdgo._internal.math.big.Big_Int_.Int_>);
        var _y = (stdgo.Go.setRef(({} : stdgo._internal.math.big.Big_Int_.Int_)) : stdgo.Ref<stdgo._internal.math.big.Big_Int_.Int_>);
        for (__8 => _test in stdgo._internal.math.big.Big__bitwiseTests._bitwiseTests) {
            @:check2r _x.setString(_test._x?.__copy__(), (0 : stdgo.GoInt));
            @:check2r _y.setString(_test._y?.__copy__(), (0 : stdgo.GoInt));
            stdgo._internal.math.big.Big__testBitFun._testBitFun(_t, ("and" : stdgo.GoString), stdgo._internal.math.big.Big_Int__static_extension.Int__static_extension.and, _x, _y, _test._and?.__copy__());
            stdgo._internal.math.big.Big__testBitFunSelf._testBitFunSelf(_t, ("and" : stdgo.GoString), stdgo._internal.math.big.Big_Int__static_extension.Int__static_extension.and, _x, _y, _test._and?.__copy__());
            stdgo._internal.math.big.Big__testBitFun._testBitFun(_t, ("andNot" : stdgo.GoString), stdgo._internal.math.big.Big_Int__static_extension.Int__static_extension.andNot, _x, _y, _test._andNot?.__copy__());
            stdgo._internal.math.big.Big__testBitFunSelf._testBitFunSelf(_t, ("andNot" : stdgo.GoString), stdgo._internal.math.big.Big_Int__static_extension.Int__static_extension.andNot, _x, _y, _test._andNot?.__copy__());
            stdgo._internal.math.big.Big__testBitFun._testBitFun(_t, ("or" : stdgo.GoString), stdgo._internal.math.big.Big_Int__static_extension.Int__static_extension.or, _x, _y, _test._or?.__copy__());
            stdgo._internal.math.big.Big__testBitFunSelf._testBitFunSelf(_t, ("or" : stdgo.GoString), stdgo._internal.math.big.Big_Int__static_extension.Int__static_extension.or, _x, _y, _test._or?.__copy__());
            stdgo._internal.math.big.Big__testBitFun._testBitFun(_t, ("xor" : stdgo.GoString), stdgo._internal.math.big.Big_Int__static_extension.Int__static_extension.xor, _x, _y, _test._xor?.__copy__());
            stdgo._internal.math.big.Big__testBitFunSelf._testBitFunSelf(_t, ("xor" : stdgo.GoString), stdgo._internal.math.big.Big_Int__static_extension.Int__static_extension.xor, _x, _y, _test._xor?.__copy__());
        };
    }
