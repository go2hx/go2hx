package stdgo._internal.regexp.syntax;
import stdgo._internal.unicode.Unicode;
import stdgo._internal.strings.Strings;
import stdgo._internal.sort.Sort;
import stdgo._internal.unicode.utf8.Utf8;
import stdgo._internal.fmt.Fmt;
import stdgo._internal.strconv.Strconv;
var _foldcaseTests : stdgo.Slice<stdgo._internal.regexp.syntax.Syntax_T_parseTest.T_parseTest> = (new stdgo.Slice<stdgo._internal.regexp.syntax.Syntax_T_parseTest.T_parseTest>(6, 6, ...[(new stdgo._internal.regexp.syntax.Syntax_T_parseTest.T_parseTest(("AbCdE" : stdgo.GoString), ("strfold{ABCDE}" : stdgo.GoString)) : stdgo._internal.regexp.syntax.Syntax_T_parseTest.T_parseTest), (new stdgo._internal.regexp.syntax.Syntax_T_parseTest.T_parseTest(("[Aa]" : stdgo.GoString), ("litfold{A}" : stdgo.GoString)) : stdgo._internal.regexp.syntax.Syntax_T_parseTest.T_parseTest), (new stdgo._internal.regexp.syntax.Syntax_T_parseTest.T_parseTest(("a" : stdgo.GoString), ("litfold{A}" : stdgo.GoString)) : stdgo._internal.regexp.syntax.Syntax_T_parseTest.T_parseTest), (new stdgo._internal.regexp.syntax.Syntax_T_parseTest.T_parseTest(("A[F-g]" : stdgo.GoString), ("cat{litfold{A}cc{0x41-0x7a 0x17f 0x212a}}" : stdgo.GoString)) : stdgo._internal.regexp.syntax.Syntax_T_parseTest.T_parseTest), (new stdgo._internal.regexp.syntax.Syntax_T_parseTest.T_parseTest(("[[:upper:]]" : stdgo.GoString), ("cc{0x41-0x5a 0x61-0x7a 0x17f 0x212a}" : stdgo.GoString)) : stdgo._internal.regexp.syntax.Syntax_T_parseTest.T_parseTest), (new stdgo._internal.regexp.syntax.Syntax_T_parseTest.T_parseTest(("[[:lower:]]" : stdgo.GoString), ("cc{0x41-0x5a 0x61-0x7a 0x17f 0x212a}" : stdgo.GoString)) : stdgo._internal.regexp.syntax.Syntax_T_parseTest.T_parseTest)].concat([for (i in 6 ... (6 > 6 ? 6 : 6 : stdgo.GoInt).toBasic()) ({} : stdgo._internal.regexp.syntax.Syntax_T_parseTest.T_parseTest)])) : stdgo.Slice<stdgo._internal.regexp.syntax.Syntax_T_parseTest.T_parseTest>);
