package stdgo._internal.runtime;
@:keep var __init_go2hx__ = {
        try {
            var __tmp__0 = stdgo._internal.runtime.Runtime_memprofilerate.memProfileRate, __tmp__1 = stdgo._internal.runtime.Runtime_atomicfields.atomicFields, __tmp__2 = stdgo._internal.runtime.Runtime_atomicvariables.atomicVariables, __tmp__3 = stdgo._internal.runtime.Runtime_dlog.dlog, __tmp__4 = stdgo._internal.runtime.Runtime_fadd64.fadd64, __tmp__5 = stdgo._internal.runtime.Runtime_fsub64.fsub64, __tmp__6 = stdgo._internal.runtime.Runtime_fmul64.fmul64, __tmp__7 = stdgo._internal.runtime.Runtime_fdiv64.fdiv64, __tmp__8 = stdgo._internal.runtime.Runtime_f64to32.f64to32, __tmp__9 = stdgo._internal.runtime.Runtime_f32to64.f32to64, __tmp__10 = stdgo._internal.runtime.Runtime_fcmp64.fcmp64, __tmp__11 = stdgo._internal.runtime.Runtime_fintto64.fintto64, __tmp__12 = stdgo._internal.runtime.Runtime_f64toint.f64toint, __tmp__13 = stdgo._internal.runtime.Runtime_entersyscall.entersyscall, __tmp__14 = stdgo._internal.runtime.Runtime_exitsyscall.exitsyscall, __tmp__15 = stdgo._internal.runtime.Runtime_lockedosthread.lockedOSThread, __tmp__16 = stdgo._internal.runtime.Runtime_xadduintptr.xadduintptr, __tmp__17 = stdgo._internal.runtime.Runtime_fastlog2.fastlog2, __tmp__18 = stdgo._internal.runtime.Runtime_atoi.atoi, __tmp__19 = stdgo._internal.runtime.Runtime_atoi32.atoi32, __tmp__20 = stdgo._internal.runtime.Runtime_parsebytecount.parseByteCount, __tmp__21 = stdgo._internal.runtime.Runtime_nanotime.nanotime, __tmp__22 = stdgo._internal.runtime.Runtime_netpollbreak.netpollBreak, __tmp__23 = stdgo._internal.runtime.Runtime_usleep.usleep, __tmp__24 = stdgo._internal.runtime.Runtime_physpagesize.physPageSize, __tmp__25 = stdgo._internal.runtime.Runtime_physhugepagesize.physHugePageSize, __tmp__26 = stdgo._internal.runtime.Runtime_netpollgenericinit.netpollGenericInit, __tmp__27 = stdgo._internal.runtime.Runtime_memmove.memmove, __tmp__28 = stdgo._internal.runtime.Runtime_memclrnoheappointers.memclrNoHeapPointers, __tmp__29 = stdgo._internal.runtime.Runtime_cgocheckpointer.cgoCheckPointer, __tmp__30 = stdgo._internal.runtime.Runtime_lockpartialorder.lockPartialOrder, __tmp__31 = stdgo._internal.runtime.Runtime_stringhash.stringHash, __tmp__32 = stdgo._internal.runtime.Runtime_byteshash.bytesHash, __tmp__33 = stdgo._internal.runtime.Runtime_int32hash.int32Hash, __tmp__34 = stdgo._internal.runtime.Runtime_int64hash.int64Hash, __tmp__35 = stdgo._internal.runtime.Runtime_memhash.memHash, __tmp__36 = stdgo._internal.runtime.Runtime_memhash32.memHash32, __tmp__37 = stdgo._internal.runtime.Runtime_memhash64.memHash64, __tmp__38 = stdgo._internal.runtime.Runtime_efacehash.efaceHash, __tmp__39 = stdgo._internal.runtime.Runtime_ifacehash.ifaceHash, __tmp__40 = stdgo._internal.runtime.Runtime_useaeshash.useAeshash, __tmp__41 = stdgo._internal.runtime.Runtime_open.open, __tmp__42 = stdgo._internal.runtime.Runtime_close.close, __tmp__43 = stdgo._internal.runtime.Runtime_read.read, __tmp__44 = stdgo._internal.runtime.Runtime_write.write, __tmp__45 = stdgo._internal.runtime.Runtime_forcegcperiod.forceGCPeriod, __tmp__46 = stdgo._internal.runtime.Runtime_readunaligned32.readUnaligned32, __tmp__47 = stdgo._internal.runtime.Runtime_readunaligned64.readUnaligned64, __tmp__48 = stdgo._internal.runtime.Runtime_casgstatusalwaystrack.casGStatusAlwaysTrack, __tmp__49 = stdgo._internal.runtime.Runtime_basechunkidx.baseChunkIdx, __tmp__50 = stdgo._internal.runtime.Runtime_semacquire.semacquire, __tmp__51 = stdgo._internal.runtime.Runtime_semrelease1.semrelease1, __tmp__52 = stdgo._internal.runtime.Runtime_timehistogrammetricsbuckets.timeHistogramMetricsBuckets, __tmp__53 = stdgo._internal.runtime.Runtime_gctestmovestackonnextcall.gCTestMoveStackOnNextCall, __tmp__54 = stdgo._internal.runtime.Runtime_timediv.timediv, __tmp__55 = stdgo._internal.runtime.Runtime_zerobase.zeroBase, __tmp__56 = stdgo._internal.runtime.Runtime_alignup.alignUp, __tmp__57 = stdgo._internal.runtime.Runtime_ispinned.isPinned, __tmp__58 = stdgo._internal.runtime.Runtime_getpincounter.getPinCounter;
        } catch(__exception__) if (__exception__.message != "__return__") throw __exception__;
        true;
    };
