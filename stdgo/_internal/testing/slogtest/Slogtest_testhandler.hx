package stdgo._internal.testing.slogtest;
function testHandler(_h:stdgo._internal.log.slog.Slog_handler.Handler, _results:() -> stdgo.Slice<stdgo.GoMap<stdgo.GoString, stdgo.AnyInterface>>):stdgo.Error {
        var _cases = (new stdgo.Slice<stdgo._internal.testing.slogtest.Slogtest_t_testcase.T_testCase>(15, 15, ...[
({ _explanation : stdgo._internal.testing.slogtest.Slogtest__withsource._withSource(("this test expects slog.TimeKey, slog.LevelKey and slog.MessageKey" : stdgo.GoString))?.__copy__(), _f : function(_l:stdgo.Ref<stdgo._internal.log.slog.Slog_logger.Logger>):Void {
            @:check2r _l.info(("message" : stdgo.GoString));
        }, _checks : (new stdgo.Slice<stdgo._internal.testing.slogtest.Slogtest_t_check.T_check>(3, 3, ...[stdgo._internal.testing.slogtest.Slogtest__haskey._hasKey(("time" : stdgo.GoString)), stdgo._internal.testing.slogtest.Slogtest__haskey._hasKey(("level" : stdgo.GoString)), stdgo._internal.testing.slogtest.Slogtest__hasattr._hasAttr(("msg" : stdgo.GoString), stdgo.Go.toInterface(("message" : stdgo.GoString)))]) : stdgo.Slice<stdgo._internal.testing.slogtest.Slogtest_t_check.T_check>) } : stdgo._internal.testing.slogtest.Slogtest_t_testcase.T_testCase),
({ _explanation : stdgo._internal.testing.slogtest.Slogtest__withsource._withSource(("a Handler should output attributes passed to the logging function" : stdgo.GoString))?.__copy__(), _f : function(_l:stdgo.Ref<stdgo._internal.log.slog.Slog_logger.Logger>):Void {
            @:check2r _l.info(("message" : stdgo.GoString), stdgo.Go.toInterface(("k" : stdgo.GoString)), stdgo.Go.toInterface(("v" : stdgo.GoString)));
        }, _checks : (new stdgo.Slice<stdgo._internal.testing.slogtest.Slogtest_t_check.T_check>(1, 1, ...[stdgo._internal.testing.slogtest.Slogtest__hasattr._hasAttr(("k" : stdgo.GoString), stdgo.Go.toInterface(("v" : stdgo.GoString)))]) : stdgo.Slice<stdgo._internal.testing.slogtest.Slogtest_t_check.T_check>) } : stdgo._internal.testing.slogtest.Slogtest_t_testcase.T_testCase),
({ _explanation : stdgo._internal.testing.slogtest.Slogtest__withsource._withSource(("a Handler should ignore an empty Attr" : stdgo.GoString))?.__copy__(), _f : function(_l:stdgo.Ref<stdgo._internal.log.slog.Slog_logger.Logger>):Void {
            @:check2r _l.info(("msg" : stdgo.GoString), stdgo.Go.toInterface(("a" : stdgo.GoString)), stdgo.Go.toInterface(("b" : stdgo.GoString)), stdgo.Go.toInterface((stdgo.Go.str() : stdgo.GoString)), (null : stdgo.AnyInterface), stdgo.Go.toInterface(("c" : stdgo.GoString)), stdgo.Go.toInterface(("d" : stdgo.GoString)));
        }, _checks : (new stdgo.Slice<stdgo._internal.testing.slogtest.Slogtest_t_check.T_check>(3, 3, ...[stdgo._internal.testing.slogtest.Slogtest__hasattr._hasAttr(("a" : stdgo.GoString), stdgo.Go.toInterface(("b" : stdgo.GoString))), stdgo._internal.testing.slogtest.Slogtest__missingkey._missingKey((stdgo.Go.str() : stdgo.GoString)?.__copy__()), stdgo._internal.testing.slogtest.Slogtest__hasattr._hasAttr(("c" : stdgo.GoString), stdgo.Go.toInterface(("d" : stdgo.GoString)))]) : stdgo.Slice<stdgo._internal.testing.slogtest.Slogtest_t_check.T_check>) } : stdgo._internal.testing.slogtest.Slogtest_t_testcase.T_testCase),
({ _explanation : stdgo._internal.testing.slogtest.Slogtest__withsource._withSource(("a Handler should ignore a zero Record.Time" : stdgo.GoString))?.__copy__(), _f : function(_l:stdgo.Ref<stdgo._internal.log.slog.Slog_logger.Logger>):Void {
            @:check2r _l.info(("msg" : stdgo.GoString), stdgo.Go.toInterface(("k" : stdgo.GoString)), stdgo.Go.toInterface(("v" : stdgo.GoString)));
        }, _mod : function(_r:stdgo.Ref<stdgo._internal.log.slog.Slog_record.Record>):Void {
            (@:checkr _r ?? throw "null pointer dereference").time = (new stdgo._internal.time.Time_time.Time() : stdgo._internal.time.Time_time.Time);
        }, _checks : (new stdgo.Slice<stdgo._internal.testing.slogtest.Slogtest_t_check.T_check>(1, 1, ...[stdgo._internal.testing.slogtest.Slogtest__missingkey._missingKey(("time" : stdgo.GoString))]) : stdgo.Slice<stdgo._internal.testing.slogtest.Slogtest_t_check.T_check>) } : stdgo._internal.testing.slogtest.Slogtest_t_testcase.T_testCase),
({ _explanation : stdgo._internal.testing.slogtest.Slogtest__withsource._withSource(("a Handler should include the attributes from the WithAttrs method" : stdgo.GoString))?.__copy__(), _f : function(_l:stdgo.Ref<stdgo._internal.log.slog.Slog_logger.Logger>):Void {
            @:check2r @:check2r _l.with(stdgo.Go.toInterface(("a" : stdgo.GoString)), stdgo.Go.toInterface(("b" : stdgo.GoString))).info(("msg" : stdgo.GoString), stdgo.Go.toInterface(("k" : stdgo.GoString)), stdgo.Go.toInterface(("v" : stdgo.GoString)));
        }, _checks : (new stdgo.Slice<stdgo._internal.testing.slogtest.Slogtest_t_check.T_check>(2, 2, ...[stdgo._internal.testing.slogtest.Slogtest__hasattr._hasAttr(("a" : stdgo.GoString), stdgo.Go.toInterface(("b" : stdgo.GoString))), stdgo._internal.testing.slogtest.Slogtest__hasattr._hasAttr(("k" : stdgo.GoString), stdgo.Go.toInterface(("v" : stdgo.GoString)))]) : stdgo.Slice<stdgo._internal.testing.slogtest.Slogtest_t_check.T_check>) } : stdgo._internal.testing.slogtest.Slogtest_t_testcase.T_testCase),
({ _explanation : stdgo._internal.testing.slogtest.Slogtest__withsource._withSource(("a Handler should handle Group attributes" : stdgo.GoString))?.__copy__(), _f : function(_l:stdgo.Ref<stdgo._internal.log.slog.Slog_logger.Logger>):Void {
            @:check2r _l.info(("msg" : stdgo.GoString), stdgo.Go.toInterface(("a" : stdgo.GoString)), stdgo.Go.toInterface(("b" : stdgo.GoString)), stdgo.Go.toInterface(stdgo.Go.asInterface(stdgo._internal.log.slog.Slog_group.group(("G" : stdgo.GoString), stdgo.Go.toInterface(stdgo.Go.asInterface(stdgo._internal.log.slog.Slog_string.string(("c" : stdgo.GoString), ("d" : stdgo.GoString))))))), stdgo.Go.toInterface(("e" : stdgo.GoString)), stdgo.Go.toInterface(("f" : stdgo.GoString)));
        }, _checks : (new stdgo.Slice<stdgo._internal.testing.slogtest.Slogtest_t_check.T_check>(3, 3, ...[stdgo._internal.testing.slogtest.Slogtest__hasattr._hasAttr(("a" : stdgo.GoString), stdgo.Go.toInterface(("b" : stdgo.GoString))), stdgo._internal.testing.slogtest.Slogtest__ingroup._inGroup(("G" : stdgo.GoString), stdgo._internal.testing.slogtest.Slogtest__hasattr._hasAttr(("c" : stdgo.GoString), stdgo.Go.toInterface(("d" : stdgo.GoString)))), stdgo._internal.testing.slogtest.Slogtest__hasattr._hasAttr(("e" : stdgo.GoString), stdgo.Go.toInterface(("f" : stdgo.GoString)))]) : stdgo.Slice<stdgo._internal.testing.slogtest.Slogtest_t_check.T_check>) } : stdgo._internal.testing.slogtest.Slogtest_t_testcase.T_testCase),
({ _explanation : stdgo._internal.testing.slogtest.Slogtest__withsource._withSource(("a Handler should ignore an empty group" : stdgo.GoString))?.__copy__(), _f : function(_l:stdgo.Ref<stdgo._internal.log.slog.Slog_logger.Logger>):Void {
            @:check2r _l.info(("msg" : stdgo.GoString), stdgo.Go.toInterface(("a" : stdgo.GoString)), stdgo.Go.toInterface(("b" : stdgo.GoString)), stdgo.Go.toInterface(stdgo.Go.asInterface(stdgo._internal.log.slog.Slog_group.group(("G" : stdgo.GoString)))), stdgo.Go.toInterface(("e" : stdgo.GoString)), stdgo.Go.toInterface(("f" : stdgo.GoString)));
        }, _checks : (new stdgo.Slice<stdgo._internal.testing.slogtest.Slogtest_t_check.T_check>(3, 3, ...[stdgo._internal.testing.slogtest.Slogtest__hasattr._hasAttr(("a" : stdgo.GoString), stdgo.Go.toInterface(("b" : stdgo.GoString))), stdgo._internal.testing.slogtest.Slogtest__missingkey._missingKey(("G" : stdgo.GoString)), stdgo._internal.testing.slogtest.Slogtest__hasattr._hasAttr(("e" : stdgo.GoString), stdgo.Go.toInterface(("f" : stdgo.GoString)))]) : stdgo.Slice<stdgo._internal.testing.slogtest.Slogtest_t_check.T_check>) } : stdgo._internal.testing.slogtest.Slogtest_t_testcase.T_testCase),
({ _explanation : stdgo._internal.testing.slogtest.Slogtest__withsource._withSource(("a Handler should inline the Attrs of a group with an empty key" : stdgo.GoString))?.__copy__(), _f : function(_l:stdgo.Ref<stdgo._internal.log.slog.Slog_logger.Logger>):Void {
            @:check2r _l.info(("msg" : stdgo.GoString), stdgo.Go.toInterface(("a" : stdgo.GoString)), stdgo.Go.toInterface(("b" : stdgo.GoString)), stdgo.Go.toInterface(stdgo.Go.asInterface(stdgo._internal.log.slog.Slog_group.group((stdgo.Go.str() : stdgo.GoString)?.__copy__(), stdgo.Go.toInterface(stdgo.Go.asInterface(stdgo._internal.log.slog.Slog_string.string(("c" : stdgo.GoString), ("d" : stdgo.GoString))))))), stdgo.Go.toInterface(("e" : stdgo.GoString)), stdgo.Go.toInterface(("f" : stdgo.GoString)));
        }, _checks : (new stdgo.Slice<stdgo._internal.testing.slogtest.Slogtest_t_check.T_check>(3, 3, ...[stdgo._internal.testing.slogtest.Slogtest__hasattr._hasAttr(("a" : stdgo.GoString), stdgo.Go.toInterface(("b" : stdgo.GoString))), stdgo._internal.testing.slogtest.Slogtest__hasattr._hasAttr(("c" : stdgo.GoString), stdgo.Go.toInterface(("d" : stdgo.GoString))), stdgo._internal.testing.slogtest.Slogtest__hasattr._hasAttr(("e" : stdgo.GoString), stdgo.Go.toInterface(("f" : stdgo.GoString)))]) : stdgo.Slice<stdgo._internal.testing.slogtest.Slogtest_t_check.T_check>) } : stdgo._internal.testing.slogtest.Slogtest_t_testcase.T_testCase),
({ _explanation : stdgo._internal.testing.slogtest.Slogtest__withsource._withSource(("a Handler should handle the WithGroup method" : stdgo.GoString))?.__copy__(), _f : function(_l:stdgo.Ref<stdgo._internal.log.slog.Slog_logger.Logger>):Void {
            @:check2r @:check2r _l.withGroup(("G" : stdgo.GoString)).info(("msg" : stdgo.GoString), stdgo.Go.toInterface(("a" : stdgo.GoString)), stdgo.Go.toInterface(("b" : stdgo.GoString)));
        }, _checks : (new stdgo.Slice<stdgo._internal.testing.slogtest.Slogtest_t_check.T_check>(5, 5, ...[stdgo._internal.testing.slogtest.Slogtest__haskey._hasKey(("time" : stdgo.GoString)), stdgo._internal.testing.slogtest.Slogtest__haskey._hasKey(("level" : stdgo.GoString)), stdgo._internal.testing.slogtest.Slogtest__hasattr._hasAttr(("msg" : stdgo.GoString), stdgo.Go.toInterface(("msg" : stdgo.GoString))), stdgo._internal.testing.slogtest.Slogtest__missingkey._missingKey(("a" : stdgo.GoString)), stdgo._internal.testing.slogtest.Slogtest__ingroup._inGroup(("G" : stdgo.GoString), stdgo._internal.testing.slogtest.Slogtest__hasattr._hasAttr(("a" : stdgo.GoString), stdgo.Go.toInterface(("b" : stdgo.GoString))))]) : stdgo.Slice<stdgo._internal.testing.slogtest.Slogtest_t_check.T_check>) } : stdgo._internal.testing.slogtest.Slogtest_t_testcase.T_testCase),
({ _explanation : stdgo._internal.testing.slogtest.Slogtest__withsource._withSource(("a Handler should handle multiple WithGroup and WithAttr calls" : stdgo.GoString))?.__copy__(), _f : function(_l:stdgo.Ref<stdgo._internal.log.slog.Slog_logger.Logger>):Void {
            @:check2r @:check2r @:check2r @:check2r @:check2r _l.with(stdgo.Go.toInterface(("a" : stdgo.GoString)), stdgo.Go.toInterface(("b" : stdgo.GoString))).withGroup(("G" : stdgo.GoString)).with(stdgo.Go.toInterface(("c" : stdgo.GoString)), stdgo.Go.toInterface(("d" : stdgo.GoString))).withGroup(("H" : stdgo.GoString)).info(("msg" : stdgo.GoString), stdgo.Go.toInterface(("e" : stdgo.GoString)), stdgo.Go.toInterface(("f" : stdgo.GoString)));
        }, _checks : (new stdgo.Slice<stdgo._internal.testing.slogtest.Slogtest_t_check.T_check>(6, 6, ...[stdgo._internal.testing.slogtest.Slogtest__haskey._hasKey(("time" : stdgo.GoString)), stdgo._internal.testing.slogtest.Slogtest__haskey._hasKey(("level" : stdgo.GoString)), stdgo._internal.testing.slogtest.Slogtest__hasattr._hasAttr(("msg" : stdgo.GoString), stdgo.Go.toInterface(("msg" : stdgo.GoString))), stdgo._internal.testing.slogtest.Slogtest__hasattr._hasAttr(("a" : stdgo.GoString), stdgo.Go.toInterface(("b" : stdgo.GoString))), stdgo._internal.testing.slogtest.Slogtest__ingroup._inGroup(("G" : stdgo.GoString), stdgo._internal.testing.slogtest.Slogtest__hasattr._hasAttr(("c" : stdgo.GoString), stdgo.Go.toInterface(("d" : stdgo.GoString)))), stdgo._internal.testing.slogtest.Slogtest__ingroup._inGroup(("G" : stdgo.GoString), stdgo._internal.testing.slogtest.Slogtest__ingroup._inGroup(("H" : stdgo.GoString), stdgo._internal.testing.slogtest.Slogtest__hasattr._hasAttr(("e" : stdgo.GoString), stdgo.Go.toInterface(("f" : stdgo.GoString)))))]) : stdgo.Slice<stdgo._internal.testing.slogtest.Slogtest_t_check.T_check>) } : stdgo._internal.testing.slogtest.Slogtest_t_testcase.T_testCase),
({ _explanation : stdgo._internal.testing.slogtest.Slogtest__withsource._withSource(("a Handler should not output groups for an empty Record" : stdgo.GoString))?.__copy__(), _f : function(_l:stdgo.Ref<stdgo._internal.log.slog.Slog_logger.Logger>):Void {
            @:check2r @:check2r @:check2r @:check2r @:check2r _l.with(stdgo.Go.toInterface(("a" : stdgo.GoString)), stdgo.Go.toInterface(("b" : stdgo.GoString))).withGroup(("G" : stdgo.GoString)).with(stdgo.Go.toInterface(("c" : stdgo.GoString)), stdgo.Go.toInterface(("d" : stdgo.GoString))).withGroup(("H" : stdgo.GoString)).info(("msg" : stdgo.GoString));
        }, _checks : (new stdgo.Slice<stdgo._internal.testing.slogtest.Slogtest_t_check.T_check>(6, 6, ...[stdgo._internal.testing.slogtest.Slogtest__haskey._hasKey(("time" : stdgo.GoString)), stdgo._internal.testing.slogtest.Slogtest__haskey._hasKey(("level" : stdgo.GoString)), stdgo._internal.testing.slogtest.Slogtest__hasattr._hasAttr(("msg" : stdgo.GoString), stdgo.Go.toInterface(("msg" : stdgo.GoString))), stdgo._internal.testing.slogtest.Slogtest__hasattr._hasAttr(("a" : stdgo.GoString), stdgo.Go.toInterface(("b" : stdgo.GoString))), stdgo._internal.testing.slogtest.Slogtest__ingroup._inGroup(("G" : stdgo.GoString), stdgo._internal.testing.slogtest.Slogtest__hasattr._hasAttr(("c" : stdgo.GoString), stdgo.Go.toInterface(("d" : stdgo.GoString)))), stdgo._internal.testing.slogtest.Slogtest__ingroup._inGroup(("G" : stdgo.GoString), stdgo._internal.testing.slogtest.Slogtest__missingkey._missingKey(("H" : stdgo.GoString)))]) : stdgo.Slice<stdgo._internal.testing.slogtest.Slogtest_t_check.T_check>) } : stdgo._internal.testing.slogtest.Slogtest_t_testcase.T_testCase),
({ _explanation : stdgo._internal.testing.slogtest.Slogtest__withsource._withSource(("a Handler should call Resolve on attribute values" : stdgo.GoString))?.__copy__(), _f : function(_l:stdgo.Ref<stdgo._internal.log.slog.Slog_logger.Logger>):Void {
            @:check2r _l.info(("msg" : stdgo.GoString), stdgo.Go.toInterface(("k" : stdgo.GoString)), stdgo.Go.toInterface(stdgo.Go.asInterface((stdgo.Go.setRef((new stdgo._internal.testing.slogtest.Slogtest_t_replace.T_replace(stdgo.Go.toInterface(("replaced" : stdgo.GoString))) : stdgo._internal.testing.slogtest.Slogtest_t_replace.T_replace)) : stdgo.Ref<stdgo._internal.testing.slogtest.Slogtest_t_replace.T_replace>))));
        }, _checks : (new stdgo.Slice<stdgo._internal.testing.slogtest.Slogtest_t_check.T_check>(1, 1, ...[stdgo._internal.testing.slogtest.Slogtest__hasattr._hasAttr(("k" : stdgo.GoString), stdgo.Go.toInterface(("replaced" : stdgo.GoString)))]) : stdgo.Slice<stdgo._internal.testing.slogtest.Slogtest_t_check.T_check>) } : stdgo._internal.testing.slogtest.Slogtest_t_testcase.T_testCase),
({ _explanation : stdgo._internal.testing.slogtest.Slogtest__withsource._withSource(("a Handler should call Resolve on attribute values in groups" : stdgo.GoString))?.__copy__(), _f : function(_l:stdgo.Ref<stdgo._internal.log.slog.Slog_logger.Logger>):Void {
            @:check2r _l.info(("msg" : stdgo.GoString), stdgo.Go.toInterface(stdgo.Go.asInterface(stdgo._internal.log.slog.Slog_group.group(("G" : stdgo.GoString), stdgo.Go.toInterface(stdgo.Go.asInterface(stdgo._internal.log.slog.Slog_string.string(("a" : stdgo.GoString), ("v1" : stdgo.GoString)))), stdgo.Go.toInterface(stdgo.Go.asInterface(stdgo._internal.log.slog.Slog_any.any(("b" : stdgo.GoString), stdgo.Go.toInterface(stdgo.Go.asInterface((stdgo.Go.setRef((new stdgo._internal.testing.slogtest.Slogtest_t_replace.T_replace(stdgo.Go.toInterface(("v2" : stdgo.GoString))) : stdgo._internal.testing.slogtest.Slogtest_t_replace.T_replace)) : stdgo.Ref<stdgo._internal.testing.slogtest.Slogtest_t_replace.T_replace>))))))))));
        }, _checks : (new stdgo.Slice<stdgo._internal.testing.slogtest.Slogtest_t_check.T_check>(2, 2, ...[stdgo._internal.testing.slogtest.Slogtest__ingroup._inGroup(("G" : stdgo.GoString), stdgo._internal.testing.slogtest.Slogtest__hasattr._hasAttr(("a" : stdgo.GoString), stdgo.Go.toInterface(("v1" : stdgo.GoString)))), stdgo._internal.testing.slogtest.Slogtest__ingroup._inGroup(("G" : stdgo.GoString), stdgo._internal.testing.slogtest.Slogtest__hasattr._hasAttr(("b" : stdgo.GoString), stdgo.Go.toInterface(("v2" : stdgo.GoString))))]) : stdgo.Slice<stdgo._internal.testing.slogtest.Slogtest_t_check.T_check>) } : stdgo._internal.testing.slogtest.Slogtest_t_testcase.T_testCase),
({ _explanation : stdgo._internal.testing.slogtest.Slogtest__withsource._withSource(("a Handler should call Resolve on attribute values from WithAttrs" : stdgo.GoString))?.__copy__(), _f : function(_l:stdgo.Ref<stdgo._internal.log.slog.Slog_logger.Logger>):Void {
            _l = @:check2r _l.with(stdgo.Go.toInterface(("k" : stdgo.GoString)), stdgo.Go.toInterface(stdgo.Go.asInterface((stdgo.Go.setRef((new stdgo._internal.testing.slogtest.Slogtest_t_replace.T_replace(stdgo.Go.toInterface(("replaced" : stdgo.GoString))) : stdgo._internal.testing.slogtest.Slogtest_t_replace.T_replace)) : stdgo.Ref<stdgo._internal.testing.slogtest.Slogtest_t_replace.T_replace>))));
            @:check2r _l.info(("msg" : stdgo.GoString));
        }, _checks : (new stdgo.Slice<stdgo._internal.testing.slogtest.Slogtest_t_check.T_check>(1, 1, ...[stdgo._internal.testing.slogtest.Slogtest__hasattr._hasAttr(("k" : stdgo.GoString), stdgo.Go.toInterface(("replaced" : stdgo.GoString)))]) : stdgo.Slice<stdgo._internal.testing.slogtest.Slogtest_t_check.T_check>) } : stdgo._internal.testing.slogtest.Slogtest_t_testcase.T_testCase),
({ _explanation : stdgo._internal.testing.slogtest.Slogtest__withsource._withSource(("a Handler should call Resolve on attribute values in groups from WithAttrs" : stdgo.GoString))?.__copy__(), _f : function(_l:stdgo.Ref<stdgo._internal.log.slog.Slog_logger.Logger>):Void {
            _l = @:check2r _l.with(stdgo.Go.toInterface(stdgo.Go.asInterface(stdgo._internal.log.slog.Slog_group.group(("G" : stdgo.GoString), stdgo.Go.toInterface(stdgo.Go.asInterface(stdgo._internal.log.slog.Slog_string.string(("a" : stdgo.GoString), ("v1" : stdgo.GoString)))), stdgo.Go.toInterface(stdgo.Go.asInterface(stdgo._internal.log.slog.Slog_any.any(("b" : stdgo.GoString), stdgo.Go.toInterface(stdgo.Go.asInterface((stdgo.Go.setRef((new stdgo._internal.testing.slogtest.Slogtest_t_replace.T_replace(stdgo.Go.toInterface(("v2" : stdgo.GoString))) : stdgo._internal.testing.slogtest.Slogtest_t_replace.T_replace)) : stdgo.Ref<stdgo._internal.testing.slogtest.Slogtest_t_replace.T_replace>))))))))));
            @:check2r _l.info(("msg" : stdgo.GoString));
        }, _checks : (new stdgo.Slice<stdgo._internal.testing.slogtest.Slogtest_t_check.T_check>(2, 2, ...[stdgo._internal.testing.slogtest.Slogtest__ingroup._inGroup(("G" : stdgo.GoString), stdgo._internal.testing.slogtest.Slogtest__hasattr._hasAttr(("a" : stdgo.GoString), stdgo.Go.toInterface(("v1" : stdgo.GoString)))), stdgo._internal.testing.slogtest.Slogtest__ingroup._inGroup(("G" : stdgo.GoString), stdgo._internal.testing.slogtest.Slogtest__hasattr._hasAttr(("b" : stdgo.GoString), stdgo.Go.toInterface(("v2" : stdgo.GoString))))]) : stdgo.Slice<stdgo._internal.testing.slogtest.Slogtest_t_check.T_check>) } : stdgo._internal.testing.slogtest.Slogtest_t_testcase.T_testCase)].concat([for (i in 15 ... (15 > 15 ? 15 : 15 : stdgo.GoInt).toBasic()) ({} : stdgo._internal.testing.slogtest.Slogtest_t_testcase.T_testCase)])) : stdgo.Slice<stdgo._internal.testing.slogtest.Slogtest_t_testcase.T_testCase>);
        for (__0 => _c in _cases) {
            var _ht = (_h : stdgo._internal.log.slog.Slog_handler.Handler);
            if (_c._mod != null) {
                _ht = stdgo.Go.asInterface((stdgo.Go.setRef((new stdgo._internal.testing.slogtest.Slogtest_t_wrapper.T_wrapper(_h, _c._mod) : stdgo._internal.testing.slogtest.Slogtest_t_wrapper.T_wrapper)) : stdgo.Ref<stdgo._internal.testing.slogtest.Slogtest_t_wrapper.T_wrapper>));
            };
            var _l = stdgo._internal.log.slog.Slog_new_.new_(_ht);
            _c._f(_l);
        };
        var _errs:stdgo.Slice<stdgo.Error> = (null : stdgo.Slice<stdgo.Error>);
        var _res = _results();
        {
            var __0 = (_res.length : stdgo.GoInt), __1 = (_cases.length : stdgo.GoInt);
var _w = __1, _g = __0;
            if (_g != (_w)) {
                return stdgo._internal.fmt.Fmt_errorf.errorf(("got %d results, want %d" : stdgo.GoString), stdgo.Go.toInterface(_g), stdgo.Go.toInterface(_w));
            };
        };
        for (_i => _got in _results()) {
            var _c = (_cases[(_i : stdgo.GoInt)] : stdgo._internal.testing.slogtest.Slogtest_t_testcase.T_testCase);
            for (__1 => _check in _c._checks) {
                {
                    var _p = (_check(_got)?.__copy__() : stdgo.GoString);
                    if (_p != ((stdgo.Go.str() : stdgo.GoString))) {
                        _errs = (_errs.__append__(stdgo._internal.fmt.Fmt_errorf.errorf(("%s: %s" : stdgo.GoString), stdgo.Go.toInterface(_p), stdgo.Go.toInterface(_c._explanation))));
                    };
                };
            };
        };
        return stdgo._internal.errors.Errors_join.join(...(_errs : Array<stdgo.Error>));
    }
