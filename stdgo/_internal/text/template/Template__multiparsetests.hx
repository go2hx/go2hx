package stdgo._internal.text.template;
var _multiParseTests : stdgo.Slice<stdgo._internal.text.template.Template_t_multiparsetest.T_multiParseTest> = (new stdgo.Slice<stdgo._internal.text.template.Template_t_multiparsetest.T_multiParseTest>(5, 5, ...[(new stdgo._internal.text.template.Template_t_multiparsetest.T_multiParseTest(("empty" : stdgo.GoString), (stdgo.Go.str() : stdgo.GoString)?.__copy__(), true, (null : stdgo.Slice<stdgo.GoString>), (null : stdgo.Slice<stdgo.GoString>)) : stdgo._internal.text.template.Template_t_multiparsetest.T_multiParseTest), (new stdgo._internal.text.template.Template_t_multiparsetest.T_multiParseTest(("one" : stdgo.GoString), ("{{define \"foo\"}} FOO {{end}}" : stdgo.GoString), true, (new stdgo.Slice<stdgo.GoString>(1, 1, ...[("foo" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>), (new stdgo.Slice<stdgo.GoString>(1, 1, ...[(" FOO " : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>)) : stdgo._internal.text.template.Template_t_multiparsetest.T_multiParseTest), (new stdgo._internal.text.template.Template_t_multiparsetest.T_multiParseTest(("two" : stdgo.GoString), ("{{define \"foo\"}} FOO {{end}}{{define \"bar\"}} BAR {{end}}" : stdgo.GoString), true, (new stdgo.Slice<stdgo.GoString>(2, 2, ...[("foo" : stdgo.GoString), ("bar" : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>), (new stdgo.Slice<stdgo.GoString>(2, 2, ...[(" FOO " : stdgo.GoString), (" BAR " : stdgo.GoString)]).__setString__() : stdgo.Slice<stdgo.GoString>)) : stdgo._internal.text.template.Template_t_multiparsetest.T_multiParseTest), (new stdgo._internal.text.template.Template_t_multiparsetest.T_multiParseTest(("missing end" : stdgo.GoString), ("{{define \"foo\"}} FOO " : stdgo.GoString), false, (null : stdgo.Slice<stdgo.GoString>), (null : stdgo.Slice<stdgo.GoString>)) : stdgo._internal.text.template.Template_t_multiparsetest.T_multiParseTest), (new stdgo._internal.text.template.Template_t_multiparsetest.T_multiParseTest(("malformed name" : stdgo.GoString), ("{{define \"foo}} FOO " : stdgo.GoString), false, (null : stdgo.Slice<stdgo.GoString>), (null : stdgo.Slice<stdgo.GoString>)) : stdgo._internal.text.template.Template_t_multiparsetest.T_multiParseTest)].concat([for (i in 5 ... (5 > 5 ? 5 : 5 : stdgo.GoInt).toBasic()) ({} : stdgo._internal.text.template.Template_t_multiparsetest.T_multiParseTest)])) : stdgo.Slice<stdgo._internal.text.template.Template_t_multiparsetest.T_multiParseTest>);
