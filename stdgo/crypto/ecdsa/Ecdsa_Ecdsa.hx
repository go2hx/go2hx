package stdgo.crypto.ecdsa;
/**
    Package ecdsa implements the Elliptic Curve Digital Signature Algorithm, as
    defined in FIPS 186-4 and SEC 1, Version 2.0.
    
    Signatures generated by this package are not deterministic, but entropy is
    mixed with the private key and the message, achieving the same level of
    security in case of randomness source failure.
**/
class Ecdsa {
    /**
        GenerateKey generates a new ECDSA private key for the specified curve.
        
        Most applications should use [crypto/rand.Reader] as rand. Note that the
        returned key does not depend deterministically on the bytes read from rand,
        and may change between calls and/or between versions.
    **/
    static public inline function generateKey(_c:stdgo._internal.crypto.elliptic.Elliptic_Curve.Curve, _rand:stdgo._internal.io.Io_Reader.Reader):stdgo.Tuple<PrivateKey, stdgo.Error> {
        return {
            final obj = stdgo._internal.crypto.ecdsa.Ecdsa_generateKey.generateKey(_c, _rand);
            { _0 : obj._0, _1 : obj._1 };
        };
    }
    /**
        SignASN1 signs a hash (which should be the result of hashing a larger message)
        using the private key, priv. If the hash is longer than the bit-length of the
        private key's curve order, the hash will be truncated to that length. It
        returns the ASN.1 encoded signature.
        
        The signature is randomized. Most applications should use [crypto/rand.Reader]
        as rand. Note that the returned signature does not depend deterministically on
        the bytes read from rand, and may change between calls and/or between versions.
    **/
    static public inline function signASN1(_rand:stdgo._internal.io.Io_Reader.Reader, _priv:PrivateKey, _hash:Array<std.UInt>):stdgo.Tuple<Array<std.UInt>, stdgo.Error> {
        final _priv = (_priv : stdgo.Ref<stdgo._internal.crypto.ecdsa.Ecdsa_PrivateKey.PrivateKey>);
        final _hash = ([for (i in _hash) (i : stdgo.GoUInt8)] : stdgo.Slice<stdgo.GoUInt8>);
        return {
            final obj = stdgo._internal.crypto.ecdsa.Ecdsa_signASN1.signASN1(_rand, _priv, _hash);
            { _0 : [for (i in obj._0) i], _1 : obj._1 };
        };
    }
    /**
        VerifyASN1 verifies the ASN.1 encoded signature, sig, of hash using the
        public key, pub. Its return value records whether the signature is valid.
    **/
    static public inline function verifyASN1(_pub:PublicKey, _hash:Array<std.UInt>, _sig:Array<std.UInt>):Bool {
        final _pub = (_pub : stdgo.Ref<stdgo._internal.crypto.ecdsa.Ecdsa_PublicKey.PublicKey>);
        final _hash = ([for (i in _hash) (i : stdgo.GoUInt8)] : stdgo.Slice<stdgo.GoUInt8>);
        final _sig = ([for (i in _sig) (i : stdgo.GoUInt8)] : stdgo.Slice<stdgo.GoUInt8>);
        return stdgo._internal.crypto.ecdsa.Ecdsa_verifyASN1.verifyASN1(_pub, _hash, _sig);
    }
    /**
        Sign signs a hash (which should be the result of hashing a larger message)
        using the private key, priv. If the hash is longer than the bit-length of the
        private key's curve order, the hash will be truncated to that length. It
        returns the signature as a pair of integers. Most applications should use
        SignASN1 instead of dealing directly with r, s.
    **/
    static public inline function sign(_rand:stdgo._internal.io.Io_Reader.Reader, _priv:PrivateKey, _hash:Array<std.UInt>):stdgo.Tuple.Tuple3<stdgo._internal.math.big.Big_Int_.Int_, stdgo._internal.math.big.Big_Int_.Int_, stdgo.Error> {
        final _priv = (_priv : stdgo.Ref<stdgo._internal.crypto.ecdsa.Ecdsa_PrivateKey.PrivateKey>);
        final _hash = ([for (i in _hash) (i : stdgo.GoUInt8)] : stdgo.Slice<stdgo.GoUInt8>);
        return {
            final obj = stdgo._internal.crypto.ecdsa.Ecdsa_sign.sign(_rand, _priv, _hash);
            { _0 : obj._0, _1 : obj._1, _2 : obj._2 };
        };
    }
    /**
        Verify verifies the signature in r, s of hash using the public key, pub. Its
        return value records whether the signature is valid. Most applications should
        use VerifyASN1 instead of dealing directly with r, s.
    **/
    static public inline function verify(_pub:PublicKey, _hash:Array<std.UInt>, _r:stdgo._internal.math.big.Big_Int_.Int_, _s:stdgo._internal.math.big.Big_Int_.Int_):Bool {
        final _pub = (_pub : stdgo.Ref<stdgo._internal.crypto.ecdsa.Ecdsa_PublicKey.PublicKey>);
        final _hash = ([for (i in _hash) (i : stdgo.GoUInt8)] : stdgo.Slice<stdgo.GoUInt8>);
        final _r = (_r : stdgo.Ref<stdgo._internal.math.big.Big_Int_.Int_>);
        final _s = (_s : stdgo.Ref<stdgo._internal.math.big.Big_Int_.Int_>);
        return stdgo._internal.crypto.ecdsa.Ecdsa_verify.verify(_pub, _hash, _r, _s);
    }
}
