package stdgo.math.rand;

import stdgo.StdGoTypes;
import stdgo.Error;
import stdgo.Go;
import stdgo.GoString;
import stdgo.Pointer;
import stdgo.Slice;
import stdgo.GoArray;
import stdgo.GoMap;
import stdgo.Chan;

/**
	// Package rand implements pseudo-random number generators unsuitable for
	// security-sensitive work.
	//
	// Random numbers are generated by a Source. Top-level functions, such as
	// Float64 and Int, use a default shared Source that produces a deterministic
	// sequence of values each time a program is run. Use the Seed function to
	// initialize the default Source if different behavior is required for each run.
	// The default Source is safe for concurrent use by multiple goroutines, but
	// Sources created by NewSource are not.
	//
	// This package's outputs might be easily predictable regardless of how it's
	// seeded. For random numbers suitable for security-sensitive work, see the
	// crypto/rand package.
**/
private var __go2hxdoc__package:Bool;

private var _ke:GoArray<GoUInt32> = (new GoArray<GoUInt32>(("3801129273" : GoUInt32), ("0" : GoUInt32), ("2615860924" : GoUInt32), ("3279400049" : GoUInt32),
	("3571300752" : GoUInt32), ("3733536696" : GoUInt32), ("3836274812" : GoUInt32), ("3906990442" : GoUInt32), ("3958562475" : GoUInt32),
	("3997804264" : GoUInt32), ("4028649213" : GoUInt32), ("4053523342" : GoUInt32), ("4074002619" : GoUInt32), ("4091154507" : GoUInt32),
	("4105727352" : GoUInt32), ("4118261130" : GoUInt32), ("4129155133" : GoUInt32), ("4138710916" : GoUInt32), ("4147160435" : GoUInt32),
	("4154685009" : GoUInt32), ("4161428406" : GoUInt32), ("4167506077" : GoUInt32), ("4173011791" : GoUInt32), ("4178022498" : GoUInt32),
	("4182601930" : GoUInt32), ("4186803325" : GoUInt32), ("4190671498" : GoUInt32), ("4194244443" : GoUInt32), ("4197554582" : GoUInt32),
	("4200629752" : GoUInt32), ("4203493986" : GoUInt32), ("4206168142" : GoUInt32), ("4208670408" : GoUInt32), ("4211016720" : GoUInt32),
	("4213221098" : GoUInt32), ("4215295924" : GoUInt32), ("4217252177" : GoUInt32), ("4219099625" : GoUInt32), ("4220846988" : GoUInt32),
	("4222502074" : GoUInt32), ("4224071896" : GoUInt32), ("4225562770" : GoUInt32), ("4226980400" : GoUInt32), ("4228329951" : GoUInt32),
	("4229616109" : GoUInt32), ("4230843138" : GoUInt32), ("4232014925" : GoUInt32), ("4233135020" : GoUInt32), ("4234206673" : GoUInt32),
	("4235232866" : GoUInt32), ("4236216336" : GoUInt32), ("4237159604" : GoUInt32), ("4238064994" : GoUInt32), ("4238934652" : GoUInt32),
	("4239770563" : GoUInt32), ("4240574564" : GoUInt32), ("4241348362" : GoUInt32), ("4242093539" : GoUInt32), ("4242811568" : GoUInt32),
	("4243503822" : GoUInt32), ("4244171579" : GoUInt32), ("4244816032" : GoUInt32), ("4245438297" : GoUInt32), ("4246039419" : GoUInt32),
	("4246620374" : GoUInt32), ("4247182079" : GoUInt32), ("4247725394" : GoUInt32), ("4248251127" : GoUInt32), ("4248760037" : GoUInt32),
	("4249252839" : GoUInt32), ("4249730206" : GoUInt32), ("4250192773" : GoUInt32), ("4250641138" : GoUInt32), ("4251075867" : GoUInt32),
	("4251497493" : GoUInt32), ("4251906522" : GoUInt32), ("4252303431" : GoUInt32), ("4252688672" : GoUInt32), ("4253062674" : GoUInt32),
	("4253425844" : GoUInt32), ("4253778565" : GoUInt32), ("4254121205" : GoUInt32), ("4254454110" : GoUInt32), ("4254777611" : GoUInt32),
	("4255092022" : GoUInt32), ("4255397640" : GoUInt32), ("4255694750" : GoUInt32), ("4255983622" : GoUInt32), ("4256264513" : GoUInt32),
	("4256537670" : GoUInt32), ("4256803325" : GoUInt32), ("4257061702" : GoUInt32), ("4257313014" : GoUInt32), ("4257557464" : GoUInt32),
	("4257795244" : GoUInt32), ("4258026541" : GoUInt32), ("4258251531" : GoUInt32), ("4258470383" : GoUInt32), ("4258683258" : GoUInt32),
	("4258890309" : GoUInt32), ("4259091685" : GoUInt32), ("4259287526" : GoUInt32), ("4259477966" : GoUInt32), ("4259663135" : GoUInt32),
	("4259843154" : GoUInt32), ("4260018142" : GoUInt32), ("4260188212" : GoUInt32), ("4260353470" : GoUInt32), ("4260514019" : GoUInt32),
	("4260669958" : GoUInt32), ("4260821380" : GoUInt32), ("4260968374" : GoUInt32), ("4261111028" : GoUInt32), ("4261249421" : GoUInt32),
	("4261383632" : GoUInt32), ("4261513736" : GoUInt32), ("4261639802" : GoUInt32), ("4261761900" : GoUInt32), ("4261880092" : GoUInt32),
	("4261994441" : GoUInt32), ("4262105003" : GoUInt32), ("4262211835" : GoUInt32), ("4262314988" : GoUInt32), ("4262414513" : GoUInt32),
	("4262510454" : GoUInt32), ("4262602857" : GoUInt32), ("4262691764" : GoUInt32), ("4262777212" : GoUInt32), ("4262859239" : GoUInt32),
	("4262937878" : GoUInt32), ("4263013162" : GoUInt32), ("4263085118" : GoUInt32), ("4263153776" : GoUInt32), ("4263219158" : GoUInt32),
	("4263281289" : GoUInt32), ("4263340187" : GoUInt32), ("4263395872" : GoUInt32), ("4263448358" : GoUInt32), ("4263497660" : GoUInt32),
	("4263543789" : GoUInt32), ("4263586755" : GoUInt32), ("4263626565" : GoUInt32), ("4263663224" : GoUInt32), ("4263696735" : GoUInt32),
	("4263727099" : GoUInt32), ("4263754314" : GoUInt32), ("4263778377" : GoUInt32), ("4263799282" : GoUInt32), ("4263817020" : GoUInt32),
	("4263831582" : GoUInt32), ("4263842955" : GoUInt32), ("4263851124" : GoUInt32), ("4263856071" : GoUInt32), ("4263857776" : GoUInt32),
	("4263856218" : GoUInt32), ("4263851370" : GoUInt32), ("4263843206" : GoUInt32), ("4263831695" : GoUInt32), ("4263816804" : GoUInt32),
	("4263798497" : GoUInt32), ("4263776735" : GoUInt32), ("4263751476" : GoUInt32), ("4263722676" : GoUInt32), ("4263690284" : GoUInt32),
	("4263654251" : GoUInt32), ("4263614520" : GoUInt32), ("4263571032" : GoUInt32), ("4263523724" : GoUInt32), ("4263472530" : GoUInt32),
	("4263417377" : GoUInt32), ("4263358192" : GoUInt32), ("4263294892" : GoUInt32), ("4263227394" : GoUInt32), ("4263155608" : GoUInt32),
	("4263079437" : GoUInt32), ("4262998781" : GoUInt32), ("4262913534" : GoUInt32), ("4262823581" : GoUInt32), ("4262728804" : GoUInt32),
	("4262629075" : GoUInt32), ("4262524261" : GoUInt32), ("4262414220" : GoUInt32), ("4262298801" : GoUInt32), ("4262177846" : GoUInt32),
	("4262051187" : GoUInt32), ("4261918645" : GoUInt32), ("4261780032" : GoUInt32), ("4261635148" : GoUInt32), ("4261483780" : GoUInt32),
	("4261325704" : GoUInt32), ("4261160681" : GoUInt32), ("4260988457" : GoUInt32), ("4260808763" : GoUInt32), ("4260621313" : GoUInt32),
	("4260425802" : GoUInt32), ("4260221905" : GoUInt32), ("4260009277" : GoUInt32), ("4259787550" : GoUInt32), ("4259556329" : GoUInt32),
	("4259315195" : GoUInt32), ("4259063697" : GoUInt32), ("4258801357" : GoUInt32), ("4258527656" : GoUInt32), ("4258242044" : GoUInt32),
	("4257943926" : GoUInt32), ("4257632664" : GoUInt32), ("4257307571" : GoUInt32), ("4256967906" : GoUInt32), ("4256612870" : GoUInt32),
	("4256241598" : GoUInt32), ("4255853155" : GoUInt32), ("4255446525" : GoUInt32), ("4255020608" : GoUInt32), ("4254574202" : GoUInt32),
	("4254106002" : GoUInt32), ("4253614578" : GoUInt32), ("4253098370" : GoUInt32), ("4252555662" : GoUInt32), ("4251984571" : GoUInt32),
	("4251383021" : GoUInt32), ("4250748722" : GoUInt32), ("4250079132" : GoUInt32), ("4249371435" : GoUInt32), ("4248622490" : GoUInt32),
	("4247828790" : GoUInt32), ("4246986404" : GoUInt32), ("4246090910" : GoUInt32), ("4245137315" : GoUInt32), ("4244119963" : GoUInt32),
	("4243032411" : GoUInt32), ("4241867296" : GoUInt32), ("4240616155" : GoUInt32), ("4239269214" : GoUInt32), ("4237815118" : GoUInt32),
	("4236240596" : GoUInt32), ("4234530035" : GoUInt32), ("4232664930" : GoUInt32), ("4230623176" : GoUInt32), ("4228378137" : GoUInt32),
	("4225897409" : GoUInt32), ("4223141146" : GoUInt32), ("4220059768" : GoUInt32), ("4216590757" : GoUInt32), ("4212654085" : GoUInt32),
	("4208145538" : GoUInt32), ("4202926710" : GoUInt32), ("4196809522" : GoUInt32), ("4189531420" : GoUInt32), ("4180713890" : GoUInt32),
	("4169789475" : GoUInt32), ("4155865042" : GoUInt32), ("4137444620" : GoUInt32), ("4111806704" : GoUInt32), ("4073393724" : GoUInt32),
	("4008685917" : GoUInt32), ("3873074895" : GoUInt32)) : GoArray<GoUInt32>);

private var _we:GoArray<GoFloat32> = (new GoArray<GoFloat32>((2.0249555365836613e-09 : GoFloat64), (1.4866739783681027e-11 : GoFloat64),
	(2.4409616689036184e-11 : GoFloat64), (3.1968806074589295e-11 : GoFloat64), (3.844677007314168e-11 : GoFloat64), (4.42282044321729e-11 : GoFloat64),
	(4.951644302919611e-11 : GoFloat64), (5.443358958023836e-11 : GoFloat64), (5.905943789574764e-11 : GoFloat64), (6.34494193296753e-11 : GoFloat64),
	(6.764381416113352e-11 : GoFloat64), (7.167294535648239e-11 : GoFloat64), (7.556032188826833e-11 : GoFloat64), (7.932458162551725e-11 : GoFloat64),
	(8.298078890689453e-11 : GoFloat64), (8.654132271912474e-11 : GoFloat64), (9.001651507523079e-11 : GoFloat64), (9.341507428706208e-11 : GoFloat64),
	(9.674443190998971e-11 : GoFloat64), (1.0001099254308699e-10 : GoFloat64), (1.0322031424037093e-10 : GoFloat64), (1.0637725422757427e-10 : GoFloat64),
	(1.0948611461891744e-10 : GoFloat64), (1.1255067711157807e-10 : GoFloat64), (1.1557434870246297e-10 : GoFloat64), (1.1856014781042035e-10 : GoFloat64),
	(1.2151082917633005e-10 : GoFloat64), (1.2442885610752796e-10 : GoFloat64), (1.2731647680563896e-10 : GoFloat64), (1.3017574518325858e-10 : GoFloat64),
	(1.330085347417409e-10 : GoFloat64), (1.3581656632677408e-10 : GoFloat64), (1.386014220061682e-10 : GoFloat64), (1.413645728254309e-10 : GoFloat64),
	(1.4410737880776736e-10 : GoFloat64), (1.4683107507629245e-10 : GoFloat64), (1.4953686899854546e-10 : GoFloat64), (1.522258291641876e-10 : GoFloat64),
	(1.5489899640730442e-10 : GoFloat64), (1.575573282952547e-10 : GoFloat64), (1.6020171300645814e-10 : GoFloat64), (1.628330109637588e-10 : GoFloat64),
	(1.6545202707884954e-10 : GoFloat64), (1.68059510752272e-10 : GoFloat64), (1.7065616975120435e-10 : GoFloat64), (1.73242697965037e-10 : GoFloat64),
	(1.758197337720091e-10 : GoFloat64), (1.783878739169964e-10 : GoFloat64), (1.8094774290045024e-10 : GoFloat64), (1.834998542005195e-10 : GoFloat64),
	(1.8604476292871652e-10 : GoFloat64), (1.8858298256319017e-10 : GoFloat64), (1.9111498494872592e-10 : GoFloat64), (1.9364125580789704e-10 : GoFloat64),
	(1.9616222535212557e-10 : GoFloat64), (1.9867835154840918e-10 : GoFloat64), (2.011900368525943e-10 : GoFloat64), (2.0369768372052732e-10 : GoFloat64),
	(2.062016807302669e-10 : GoFloat64), (2.0870240258208383e-10 : GoFloat64), (2.1120022397624894e-10 : GoFloat64), (2.136955057352452e-10 : GoFloat64),
	(2.1618855317040442e-10 : GoFloat64), (2.1867974098199738e-10 : GoFloat64), (2.2116936060356807e-10 : GoFloat64), (2.2365774510202385e-10 : GoFloat64),
	(2.2614519978869652e-10 : GoFloat64), (2.2863201609713002e-10 : GoFloat64), (2.3111849933865614e-10 : GoFloat64), (2.3360494094681883e-10 : GoFloat64),
	(2.3609159072179864e-10 : GoFloat64), (2.3857874009713953e-10 : GoFloat64), (2.4106666662859766e-10 : GoFloat64), (2.4355562011635357e-10 : GoFloat64),
	(2.460458781161634e-10 : GoFloat64), (2.485376904282077e-10 : GoFloat64), (2.5103127909709144e-10 : GoFloat64), (2.5352694943414633e-10 : GoFloat64),
	(2.560248957284017e-10 : GoFloat64), (2.585253955356137e-10 : GoFloat64), (2.610286709003873e-10 : GoFloat64), (2.6353494386732734e-10 : GoFloat64),
	(2.6604446423661443e-10 : GoFloat64), (2.6855745405285347e-10 : GoFloat64), (2.71074163116225e-10 : GoFloat64), (2.7359478571575835e-10 : GoFloat64),
	(2.7611959940720965e-10 : GoFloat64), (2.786487707240326e-10 : GoFloat64), (2.8118254946640775e-10 : GoFloat64), (2.8372118543451563e-10 : GoFloat64),
	(2.8626484516180994e-10 : GoFloat64), (2.8881380620404684e-10 : GoFloat64), (2.9136826285025563e-10 : GoFloat64), (2.9392840938946563e-10 : GoFloat64),
	(2.96494523377433e-10 : GoFloat64), (2.990667713476114e-10 : GoFloat64), (3.016454031001814e-10 : GoFloat64), (3.042306406797479e-10 : GoFloat64),
	(3.068226783753403e-10 : GoFloat64), (3.09421765987139e-10 : GoFloat64), (3.12028125559749e-10 : GoFloat64), (3.1464195138219964e-10 : GoFloat64),
	(3.17263521010247e-10 : GoFloat64), (3.1989300097734485e-10 : GoFloat64), (3.225306410836737e-10 : GoFloat64), (3.2517669112941405e-10 : GoFloat64),
	(3.2783134540359526e-10 : GoFloat64), (3.3049485370639786e-10 : GoFloat64), (3.3316743808242677e-10 : GoFloat64), (3.3584937608743815e-10 : GoFloat64),
	(3.385408342548857e-10 : GoFloat64), (3.4124211789610115e-10 : GoFloat64), (3.4395342130011386e-10 : GoFloat64), (3.4667499426710435e-10 : GoFloat64),
	(3.494071143528288e-10 : GoFloat64), (3.521500313574677e-10 : GoFloat64), (3.54903967325626e-10 : GoFloat64), (3.576691720574843e-10 : GoFloat64),
	(3.6044595086437425e-10 : GoFloat64), (3.632345535464765e-10 : GoFloat64), (3.660352021483959e-10 : GoFloat64), (3.688482297370399e-10 : GoFloat64),
	(3.716738583570134e-10 : GoFloat64), (3.7451239331964814e-10 : GoFloat64), (3.773641121807003e-10 : GoFloat64), (3.802292924959261e-10 : GoFloat64),
	(3.831082673322328e-10 : GoFloat64), (3.8600128648980103e-10 : GoFloat64), (3.8890865527996255e-10 : GoFloat64), (3.9183070676962473e-10 : GoFloat64),
	(3.9476774627011935e-10 : GoFloat64), (3.977200790927782e-10 : GoFloat64), (4.006880383045086e-10 : GoFloat64), (4.0367195697221803e-10 : GoFloat64),
	(4.066721681628138e-10 : GoFloat64), (4.0968900494320337e-10 : GoFloat64), (4.127228558914453e-10 : GoFloat64), (4.15774054074447e-10 : GoFloat64),
	(4.188429603146915e-10 : GoFloat64), (4.2192993543466173e-10 : GoFloat64), (4.25035395767992e-10 : GoFloat64), (4.2815970213716525e-10 : GoFloat64),
	(4.313032986313914e-10 : GoFloat64), (4.3446651831757777e-10 : GoFloat64), (4.376498607960855e-10 : GoFloat64), (4.408536868893975e-10 : GoFloat64),
	(4.4407846844229937e-10 : GoFloat64), (4.4732464954400086e-10 : GoFloat64), (4.5059267428371186e-10 : GoFloat64), (4.538830145062178e-10 : GoFloat64),
	(4.5719619756745544e-10 : GoFloat64), (4.605326675566346e-10 : GoFloat64), (4.638929240741163e-10 : GoFloat64), (4.672775499869886e-10 : GoFloat64),
	(4.706869893844612e-10 : GoFloat64), (4.74121908400349e-10 : GoFloat64), (4.775827511238617e-10 : GoFloat64), (4.810701836888143e-10 : GoFloat64),
	(4.845848167178701e-10 : GoFloat64), (4.881271498113904e-10 : GoFloat64), (4.916979601254923e-10 : GoFloat64), (4.952977472605369e-10 : GoFloat64),
	(4.989272883726414e-10 : GoFloat64), (5.025872495956207e-10 : GoFloat64), (5.062783525744408e-10 : GoFloat64), (5.100013189540675e-10 : GoFloat64),
	(5.13756870379467e-10 : GoFloat64), (5.175458395179078e-10 : GoFloat64), (5.21369003525507e-10 : GoFloat64), (5.252272505806843e-10 : GoFloat64),
	(5.29121357839557e-10 : GoFloat64), (5.330522134805449e-10 : GoFloat64), (5.3702081670437e-10 : GoFloat64), (5.41028055689452e-10 : GoFloat64),
	(5.450749851476644e-10 : GoFloat64), (5.491624932574268e-10 : GoFloat64), (5.532918012640664e-10 : GoFloat64), (5.574638528571541e-10 : GoFloat64),
	(5.616799247931681e-10 : GoFloat64), (5.659410717839819e-10 : GoFloat64), (5.702485705860738e-10 : GoFloat64), (5.746036979559221e-10 : GoFloat64),
	(5.790077306500052e-10 : GoFloat64), (5.83462111958255e-10 : GoFloat64), (5.879682296594524e-10 : GoFloat64), (5.925275825546805e-10 : GoFloat64),
	(5.971417249561739e-10 : GoFloat64), (6.01812211176167e-10 : GoFloat64), (6.065408175714992e-10 : GoFloat64), (6.113292094767075e-10 : GoFloat64),
	(6.16179329782085e-10 : GoFloat64), (6.21092954844471e-10 : GoFloat64), (6.260721940876124e-10 : GoFloat64), (6.311191569352559e-10 : GoFloat64),
	(6.362359528111483e-10 : GoFloat64), (6.414249686947926e-10 : GoFloat64), (6.466885360545405e-10 : GoFloat64), (6.520292639144998e-10 : GoFloat64),
	(6.574497612987784e-10 : GoFloat64), (6.629528592760892e-10 : GoFloat64), (6.685415554485985e-10 : GoFloat64), (6.742187919073217e-10 : GoFloat64),
	(6.799880103436351e-10 : GoFloat64), (6.858525969377638e-10 : GoFloat64), (6.918161599145378e-10 : GoFloat64), (6.978825850545434e-10 : GoFloat64),
	(7.040559801829716e-10 : GoFloat64), (7.103406751696184e-10 : GoFloat64), (7.167412219288849e-10 : GoFloat64), (7.232625609532306e-10 : GoFloat64),
	(7.2990985477972e-10 : GoFloat64), (7.366885990123251e-10 : GoFloat64), (7.436047333442275e-10 : GoFloat64), (7.506645305355164e-10 : GoFloat64),
	(7.57874762946642e-10 : GoFloat64), (7.652426470272644e-10 : GoFloat64), (7.727759543385559e-10 : GoFloat64), (7.804830115532013e-10 : GoFloat64),
	(7.883728114777e-10 : GoFloat64), (7.964550685635174e-10 : GoFloat64), (8.047402189070851e-10 : GoFloat64), (8.132396422944055e-10 : GoFloat64),
	(8.219657177122031e-10 : GoFloat64), (8.309318788590758e-10 : GoFloat64), (8.401527806789488e-10 : GoFloat64), (8.496445214056791e-10 : GoFloat64),
	(8.594246980742071e-10 : GoFloat64), (8.695127395874636e-10 : GoFloat64), (8.799300732498239e-10 : GoFloat64), (8.90700457834015e-10 : GoFloat64),
	(9.01850316648023e-10 : GoFloat64), (9.134091816243028e-10 : GoFloat64), (9.254100818978372e-10 : GoFloat64), (9.37890431984556e-10 : GoFloat64),
	(9.508922538259412e-10 : GoFloat64), (9.64463842123564e-10 : GoFloat64), (9.78660263939446e-10 : GoFloat64), (9.935448019859905e-10 : GoFloat64),
	(1.0091912860943353e-09 : GoFloat64), (1.0256859805934937e-09 : GoFloat64), (1.0431305819125214e-09 : GoFloat64), (1.0616465484503124e-09 : GoFloat64),
	(1.0813799855569073e-09 : GoFloat64), (1.1025096391392708e-09 : GoFloat64), (1.1252564435793033e-09 : GoFloat64), (1.149898620766976e-09 : GoFloat64),
	(1.176793218427008e-09 : GoFloat64), (1.2064089727203964e-09 : GoFloat64), (1.2393785997488749e-09 : GoFloat64), (1.2765849488616254e-09 : GoFloat64),
	(1.319313880365769e-09 : GoFloat64), (1.36954347862428e-09 : GoFloat64), (1.4305497897382224e-09 : GoFloat64), (1.5083649884672923e-09 : GoFloat64),
	(1.6160853766322703e-09 : GoFloat64), (1.7921247819074893e-09 : GoFloat64)) : GoArray<GoFloat32>);

private var _fe:GoArray<GoFloat32> = (new GoArray<GoFloat32>((1 : GoFloat64), (0.9381436705589294 : GoFloat64), (0.900469958782196 : GoFloat64),
	(0.8717043399810791 : GoFloat64), (0.847785472869873 : GoFloat64), (0.8269932866096497 : GoFloat64), (0.8084216713905334 : GoFloat64),
	(0.7915276288986206 : GoFloat64), (0.7759568691253662 : GoFloat64), (0.7614634037017822 : GoFloat64), (0.7478685975074768 : GoFloat64),
	(0.7350381016731262 : GoFloat64), (0.7228676676750183 : GoFloat64), (0.7112747430801392 : GoFloat64), (0.7001926302909851 : GoFloat64),
	(0.6895664930343628 : GoFloat64), (0.6793505549430847 : GoFloat64), (0.669506311416626 : GoFloat64), (0.6600008606910706 : GoFloat64),
	(0.6508058309555054 : GoFloat64), (0.6418967247009277 : GoFloat64), (0.633251965045929 : GoFloat64), (0.62485271692276 : GoFloat64),
	(0.6166821718215942 : GoFloat64), (0.608725368976593 : GoFloat64), (0.6009689569473267 : GoFloat64), (0.5934008955955505 : GoFloat64),
	(0.5860103368759155 : GoFloat64), (0.5787873864173889 : GoFloat64), (0.5717230439186096 : GoFloat64), (0.5648092031478882 : GoFloat64),
	(0.5580382943153381 : GoFloat64), (0.5514034032821655 : GoFloat64), (0.5448982119560242 : GoFloat64), (0.5385168790817261 : GoFloat64),
	(0.5322538614273071 : GoFloat64), (0.526104211807251 : GoFloat64), (0.5200631618499756 : GoFloat64), (0.5141264200210571 : GoFloat64),
	(0.5082897543907166 : GoFloat64), (0.5025495290756226 : GoFloat64), (0.4969019889831543 : GoFloat64), (0.4913438558578491 : GoFloat64),
	(0.4858720004558563 : GoFloat64), (0.48048335313796997 : GoFloat64), (0.4751752018928528 : GoFloat64), (0.4699448347091675 : GoFloat64),
	(0.4647897481918335 : GoFloat64), (0.4597076177597046 : GoFloat64), (0.4546961486339569 : GoFloat64), (0.4497532546520233 : GoFloat64),
	(0.44487687945365906 : GoFloat64), (0.4400651156902313 : GoFloat64), (0.4353161156177521 : GoFloat64), (0.4306281507015228 : GoFloat64),
	(0.42599955201148987 : GoFloat64), (0.42142874002456665 : GoFloat64), (0.4169141948223114 : GoFloat64), (0.4124544560909271 : GoFloat64),
	(0.40804818272590637 : GoFloat64), (0.4036940038204193 : GoFloat64), (0.39939069747924805 : GoFloat64), (0.3951369822025299 : GoFloat64),
	(0.39093172550201416 : GoFloat64), (0.38677382469177246 : GoFloat64), (0.38266217708587646 : GoFloat64), (0.378595769405365 : GoFloat64),
	(0.37457355856895447 : GoFloat64), (0.37059465050697327 : GoFloat64), (0.366658091545105 : GoFloat64), (0.362762987613678 : GoFloat64),
	(0.358908474445343 : GoFloat64), (0.35509374737739563 : GoFloat64), (0.35131800174713135 : GoFloat64), (0.3475804924964905 : GoFloat64),
	(0.34388044476509094 : GoFloat64), (0.34021714329719543 : GoFloat64), (0.33658990263938904 : GoFloat64), (0.3329980671405792 : GoFloat64),
	(0.3294409513473511 : GoFloat64), (0.32591795921325684 : GoFloat64), (0.32242849469184875 : GoFloat64), (0.3189719021320343 : GoFloat64),
	(0.3155476748943329 : GoFloat64), (0.31215524673461914 : GoFloat64), (0.3087940812110901 : GoFloat64), (0.30546361207962036 : GoFloat64),
	(0.30216339230537415 : GoFloat64), (0.29889291524887085 : GoFloat64), (0.29565170407295227 : GoFloat64), (0.2924392819404602 : GoFloat64),
	(0.2892552316188812 : GoFloat64), (0.28609907627105713 : GoFloat64), (0.2829704284667969 : GoFloat64), (0.27986884117126465 : GoFloat64),
	(0.2767939269542694 : GoFloat64), (0.2737452983856201 : GoFloat64), (0.2707225978374481 : GoFloat64), (0.26772540807724 : GoFloat64),
	(0.26475343108177185 : GoFloat64), (0.2618062496185303 : GoFloat64), (0.258883535861969 : GoFloat64), (0.2559850215911865 : GoFloat64),
	(0.25311028957366943 : GoFloat64), (0.25025907158851624 : GoFloat64), (0.24743106961250305 : GoFloat64), (0.2446259707212448 : GoFloat64),
	(0.24184346199035645 : GoFloat64), (0.23908329010009766 : GoFloat64), (0.23634515702724457 : GoFloat64), (0.2336287796497345 : GoFloat64),
	(0.23093391954898834 : GoFloat64), (0.22826029360294342 : GoFloat64), (0.22560766339302063 : GoFloat64), (0.22297576069831848 : GoFloat64),
	(0.22036437690258026 : GoFloat64), (0.21777324378490448 : GoFloat64), (0.21520215272903442 : GoFloat64), (0.212650865316391 : GoFloat64),
	(0.21011915802955627 : GoFloat64), (0.20760682225227356 : GoFloat64), (0.20511364936828613 : GoFloat64), (0.20263944566249847 : GoFloat64),
	(0.20018397271633148 : GoFloat64), (0.19774706661701202 : GoFloat64), (0.1953285187482834 : GoFloat64), (0.19292815029621124 : GoFloat64),
	(0.19054576754570007 : GoFloat64), (0.18818120658397675 : GoFloat64), (0.18583425879478455 : GoFloat64), (0.18350479006767273 : GoFloat64),
	(0.18119260668754578 : GoFloat64), (0.17889754474163055 : GoFloat64), (0.17661945521831512 : GoFloat64), (0.17435817420482635 : GoFloat64),
	(0.1721135377883911 : GoFloat64), (0.16988539695739746 : GoFloat64), (0.16767361760139465 : GoFloat64), (0.16547803580760956 : GoFloat64),
	(0.16329853236675262 : GoFloat64), (0.16113494336605072 : GoFloat64), (0.1589871346950531 : GoFloat64), (0.15685498714447021 : GoFloat64),
	(0.15473836660385132 : GoFloat64), (0.15263713896274567 : GoFloat64), (0.1505511850118637 : GoFloat64), (0.1484803706407547 : GoFloat64),
	(0.14642459154129028 : GoFloat64), (0.1443837285041809 : GoFloat64), (0.14235764741897583 : GoFloat64), (0.1403462439775467 : GoFloat64),
	(0.13834942877292633 : GoFloat64), (0.136367067694664 : GoFloat64), (0.13439907133579254 : GoFloat64), (0.1324453204870224 : GoFloat64),
	(0.1305057406425476 : GoFloat64), (0.12858019769191742 : GoFloat64), (0.12666863203048706 : GoFloat64), (0.12477091699838638 : GoFloat64),
	(0.12288697808980942 : GoFloat64), (0.1210167184472084 : GoFloat64), (0.11916005611419678 : GoFloat64), (0.11731690168380737 : GoFloat64),
	(0.11548716574907303 : GoFloat64), (0.11367076635360718 : GoFloat64), (0.11186762899160385 : GoFloat64), (0.11007767915725708 : GoFloat64),
	(0.1083008274435997 : GoFloat64), (0.10653700679540634 : GoFloat64), (0.10478614270687103 : GoFloat64), (0.1030481606721878 : GoFloat64),
	(0.10132300108671188 : GoFloat64), (0.0996105819940567 : GoFloat64), (0.09791085124015808 : GoFloat64), (0.09622374176979065 : GoFloat64),
	(0.09454918652772903 : GoFloat64), (0.09288713335990906 : GoFloat64), (0.09123751521110535 : GoFloat64), (0.08960027992725372 : GoFloat64),
	(0.08797537535429001 : GoFloat64), (0.08636274188756943 : GoFloat64), (0.0847623273730278 : GoFloat64), (0.08317409455776215 : GoFloat64),
	(0.08159798383712769 : GoFloat64), (0.08003395050764084 : GoFloat64), (0.07848194986581802 : GoFloat64), (0.07694194465875626 : GoFloat64),
	(0.07541389018297195 : GoFloat64), (0.07389774918556213 : GoFloat64), (0.07239348441362381 : GoFloat64), (0.070901058614254 : GoFloat64),
	(0.06942043453454971 : GoFloat64), (0.06795158982276917 : GoFloat64), (0.06649449467658997 : GoFloat64), (0.06504911929368973 : GoFloat64),
	(0.06361543387174606 : GoFloat64), (0.06219341605901718 : GoFloat64), (0.06078304722905159 : GoFloat64), (0.0593843050301075 : GoFloat64),
	(0.05799717456102371 : GoFloat64), (0.05662164092063904 : GoFloat64), (0.05525768920779228 : GoFloat64), (0.05390531197190285 : GoFloat64),
	(0.05256449431180954 : GoFloat64), (0.05123523622751236 : GoFloat64), (0.04991753399372101 : GoFloat64), (0.04861138388514519 : GoFloat64),
	(0.047316793352365494 : GoFloat64), (0.04603376239538193 : GoFloat64), (0.044762298464775085 : GoFloat64), (0.04350241273641586 : GoFloat64),
	(0.04225412383675575 : GoFloat64), (0.04101744294166565 : GoFloat64), (0.039792392402887344 : GoFloat64), (0.03857899457216263 : GoFloat64),
	(0.03737728297710419 : GoFloat64), (0.03618728369474411 : GoFloat64), (0.03500903770327568 : GoFloat64), (0.03384258225560188 : GoFloat64),
	(0.0326879620552063 : GoFloat64), (0.031545232981443405 : GoFloat64), (0.030414443463087082 : GoFloat64), (0.0292956605553627 : GoFloat64),
	(0.028188949450850487 : GoFloat64), (0.027094384655356407 : GoFloat64), (0.02601204626262188 : GoFloat64), (0.024942025542259216 : GoFloat64),
	(0.023884421214461327 : GoFloat64), (0.022839335724711418 : GoFloat64), (0.021806888282299042 : GoFloat64), (0.020787203684449196 : GoFloat64),
	(0.019780423492193222 : GoFloat64), (0.018786700442433357 : GoFloat64), (0.017806200310587883 : GoFloat64), (0.016839107498526573 : GoFloat64),
	(0.015885621309280396 : GoFloat64), (0.014945968054234982 : GoFloat64), (0.01402039173990488 : GoFloat64), (0.013109165243804455 : GoFloat64),
	(0.012212592177093029 : GoFloat64), (0.011331013403832912 : GoFloat64), (0.010464809834957123 : GoFloat64), (0.009614413604140282 : GoFloat64),
	(0.008780314587056637 : GoFloat64), (0.007963077165186405 : GoFloat64), (0.007163353264331818 : GoFloat64), (0.0063819061033427715 : GoFloat64),
	(0.005619642324745655 : GoFloat64), (0.004877655766904354 : GoFloat64), (0.004157294984906912 : GoFloat64), (0.003460264764726162 : GoFloat64),
	(0.0027887988835573196 : GoFloat64), (0.0021459676790982485 : GoFloat64), (0.001536299823783338 : GoFloat64), (0.0009672692976891994 : GoFloat64),
	(0.0004541343660093844 : GoFloat64)) : GoArray<GoFloat32>);

private var _kn:GoArray<GoUInt32> = (new GoArray<GoUInt32>(("1991057938" : GoUInt32), ("0" : GoUInt32), ("1611602771" : GoUInt32), ("1826899878" : GoUInt32),
	("1918584482" : GoUInt32), ("1969227037" : GoUInt32), ("2001281515" : GoUInt32), ("2023368125" : GoUInt32), ("2039498179" : GoUInt32),
	("2051788381" : GoUInt32), ("2061460127" : GoUInt32), ("2069267110" : GoUInt32), ("2075699398" : GoUInt32), ("2081089314" : GoUInt32),
	("2085670119" : GoUInt32), ("2089610331" : GoUInt32), ("2093034710" : GoUInt32), ("2096037586" : GoUInt32), ("2098691595" : GoUInt32),
	("2101053571" : GoUInt32), ("2103168620" : GoUInt32), ("2105072996" : GoUInt32), ("2106796166" : GoUInt32), ("2108362327" : GoUInt32),
	("2109791536" : GoUInt32), ("2111100552" : GoUInt32), ("2112303493" : GoUInt32), ("2113412330" : GoUInt32), ("2114437283" : GoUInt32),
	("2115387130" : GoUInt32), ("2116269447" : GoUInt32), ("2117090813" : GoUInt32), ("2117856962" : GoUInt32), ("2118572919" : GoUInt32),
	("2119243101" : GoUInt32), ("2119871411" : GoUInt32), ("2120461303" : GoUInt32), ("2121015852" : GoUInt32), ("2121537798" : GoUInt32),
	("2122029592" : GoUInt32), ("2122493434" : GoUInt32), ("2122931299" : GoUInt32), ("2123344971" : GoUInt32), ("2123736059" : GoUInt32),
	("2124106020" : GoUInt32), ("2124456175" : GoUInt32), ("2124787725" : GoUInt32), ("2125101763" : GoUInt32), ("2125399283" : GoUInt32),
	("2125681194" : GoUInt32), ("2125948325" : GoUInt32), ("2126201433" : GoUInt32), ("2126441213" : GoUInt32), ("2126668298" : GoUInt32),
	("2126883268" : GoUInt32), ("2127086657" : GoUInt32), ("2127278949" : GoUInt32), ("2127460589" : GoUInt32), ("2127631985" : GoUInt32),
	("2127793506" : GoUInt32), ("2127945490" : GoUInt32), ("2128088244" : GoUInt32), ("2128222044" : GoUInt32), ("2128347141" : GoUInt32),
	("2128463758" : GoUInt32), ("2128572095" : GoUInt32), ("2128672327" : GoUInt32), ("2128764606" : GoUInt32), ("2128849065" : GoUInt32),
	("2128925811" : GoUInt32), ("2128994934" : GoUInt32), ("2129056501" : GoUInt32), ("2129110560" : GoUInt32), ("2129157136" : GoUInt32),
	("2129196237" : GoUInt32), ("2129227847" : GoUInt32), ("2129251929" : GoUInt32), ("2129268426" : GoUInt32), ("2129277255" : GoUInt32),
	("2129278312" : GoUInt32), ("2129271467" : GoUInt32), ("2129256561" : GoUInt32), ("2129233410" : GoUInt32), ("2129201800" : GoUInt32),
	("2129161480" : GoUInt32), ("2129112170" : GoUInt32), ("2129053545" : GoUInt32), ("2128985244" : GoUInt32), ("2128906855" : GoUInt32),
	("2128817916" : GoUInt32), ("2128717911" : GoUInt32), ("2128606255" : GoUInt32), ("2128482298" : GoUInt32), ("2128345305" : GoUInt32),
	("2128194452" : GoUInt32), ("2128028813" : GoUInt32), ("2127847342" : GoUInt32), ("2127648860" : GoUInt32), ("2127432031" : GoUInt32),
	("2127195339" : GoUInt32), ("2126937058" : GoUInt32), ("2126655214" : GoUInt32), ("2126347546" : GoUInt32), ("2126011445" : GoUInt32),
	("2125643893" : GoUInt32), ("2125241376" : GoUInt32), ("2124799783" : GoUInt32), ("2124314271" : GoUInt32), ("2123779094" : GoUInt32),
	("2123187386" : GoUInt32), ("2122530867" : GoUInt32), ("2121799464" : GoUInt32), ("2120980787" : GoUInt32), ("2120059418" : GoUInt32),
	("2119015917" : GoUInt32), ("2117825402" : GoUInt32), ("2116455471" : GoUInt32), ("2114863093" : GoUInt32), ("2112989789" : GoUInt32),
	("2110753906" : GoUInt32), ("2108037662" : GoUInt32), ("2104664315" : GoUInt32), ("2100355223" : GoUInt32), ("2094642347" : GoUInt32),
	("2086670106" : GoUInt32), ("2074676188" : GoUInt32), ("2054300022" : GoUInt32), ("2010539237" : GoUInt32)) : GoArray<GoUInt32>);

private var _wn:GoArray<GoFloat32> = (new GoArray<GoFloat32>((1.7290404663583558e-09 : GoFloat64), (1.2680928529462676e-10 : GoFloat64),
	(1.689751810696194e-10 : GoFloat64), (1.9862687883343e-10 : GoFloat64), (2.223243117382978e-10 : GoFloat64), (2.4244936613904144e-10 : GoFloat64),
	(2.601613091623989e-10 : GoFloat64), (2.761198769629658e-10 : GoFloat64), (2.9073962681813725e-10 : GoFloat64), (3.042996965518796e-10 : GoFloat64),
	(3.169979556627567e-10 : GoFloat64), (3.289802041894774e-10 : GoFloat64), (3.4035738116777736e-10 : GoFloat64), (3.5121602848242617e-10 : GoFloat64),
	(3.61625090983253e-10 : GoFloat64), (3.7164057942185025e-10 : GoFloat64), (3.813085680537398e-10 : GoFloat64), (3.906675816178762e-10 : GoFloat64),
	(3.997501218933053e-10 : GoFloat64), (4.0858399996679395e-10 : GoFloat64), (4.1719308563337165e-10 : GoFloat64), (4.255982233303257e-10 : GoFloat64),
	(4.3381759295968436e-10 : GoFloat64), (4.4186720948857783e-10 : GoFloat64), (4.497613115272969e-10 : GoFloat64), (4.57512583373898e-10 : GoFloat64),
	(4.6513240481438345e-10 : GoFloat64), (4.726310454117311e-10 : GoFloat64), (4.800177477726209e-10 : GoFloat64), (4.873009773476156e-10 : GoFloat64),
	(4.944885056978876e-10 : GoFloat64), (5.015873272284921e-10 : GoFloat64), (5.086040477664255e-10 : GoFloat64), (5.155446070048697e-10 : GoFloat64),
	(5.224146670812502e-10 : GoFloat64), (5.292193350214802e-10 : GoFloat64), (5.359634958068682e-10 : GoFloat64), (5.426517013518151e-10 : GoFloat64),
	(5.492881705038144e-10 : GoFloat64), (5.558769555769061e-10 : GoFloat64), (5.624218868405251e-10 : GoFloat64), (5.689264614971989e-10 : GoFloat64),
	(5.75394121238304e-10 : GoFloat64), (5.818281967329142e-10 : GoFloat64), (5.882316855831959e-10 : GoFloat64), (5.946076964136182e-10 : GoFloat64),
	(6.009590047817426e-10 : GoFloat64), (6.072883862451306e-10 : GoFloat64), (6.135985053390414e-10 : GoFloat64), (6.19892026598734e-10 : GoFloat64),
	(6.261713370037114e-10 : GoFloat64), (6.324390455780815e-10 : GoFloat64), (6.386973727678935e-10 : GoFloat64), (6.449488165749528e-10 : GoFloat64),
	(6.511955974453087e-10 : GoFloat64), (6.574400468473129e-10 : GoFloat64), (6.636843297158634e-10 : GoFloat64), (6.699307220081607e-10 : GoFloat64),
	(6.761814441702541e-10 : GoFloat64), (6.824387166481927e-10 : GoFloat64), (6.887046488657234e-10 : GoFloat64), (6.949815167800466e-10 : GoFloat64),
	(7.012714853260604e-10 : GoFloat64), (7.075767749498141e-10 : GoFloat64), (7.13899661608508e-10 : GoFloat64), (7.202424212593428e-10 : GoFloat64),
	(7.266072743483676e-10 : GoFloat64), (7.329966078550854e-10 : GoFloat64), (7.394128087589991e-10 : GoFloat64), (7.458582640396116e-10 : GoFloat64),
	(7.523354716987285e-10 : GoFloat64), (7.588469852493063e-10 : GoFloat64), (7.653954137154528e-10 : GoFloat64), (7.719834771435785e-10 : GoFloat64),
	(7.786139510912449e-10 : GoFloat64), (7.852897221383159e-10 : GoFloat64), (7.920137878869582e-10 : GoFloat64), (7.987892014504894e-10 : GoFloat64),
	(8.056192379868321e-10 : GoFloat64), (8.125072836762115e-10 : GoFloat64), (8.194568912323064e-10 : GoFloat64), (8.264716688799467e-10 : GoFloat64),
	(8.3355555791087e-10 : GoFloat64), (8.407127216614185e-10 : GoFloat64), (8.479473234679347e-10 : GoFloat64), (8.552640262671218e-10 : GoFloat64),
	(8.626675485068347e-10 : GoFloat64), (8.701631637464402e-10 : GoFloat64), (8.777562010564566e-10 : GoFloat64), (8.854524335966119e-10 : GoFloat64),
	(8.932581896381464e-10 : GoFloat64), (9.011799639857543e-10 : GoFloat64), (9.092249730890956e-10 : GoFloat64), (9.174008219758889e-10 : GoFloat64),
	(9.25715837318819e-10 : GoFloat64), (9.341788453909317e-10 : GoFloat64), (9.42799727177146e-10 : GoFloat64), (9.515889187738935e-10 : GoFloat64),
	(9.605578554783278e-10 : GoFloat64), (9.697193048552322e-10 : GoFloat64), (9.790869226478094e-10 : GoFloat64), (9.886760299337993e-10 : GoFloat64),
	(9.985036131254788e-10 : GoFloat64), (1.008588212947359e-09 : GoFloat64), (1.0189509236369076e-09 : GoFloat64), (1.0296150598776421e-09 : GoFloat64),
	(1.040606933955246e-09 : GoFloat64), (1.0519566329136865e-09 : GoFloat64), (1.0636980185552147e-09 : GoFloat64), (1.0758701707302976e-09 : GoFloat64),
	(1.0885182755160372e-09 : GoFloat64), (1.101694735439196e-09 : GoFloat64), (1.115461056855338e-09 : GoFloat64), (1.1298901814171813e-09 : GoFloat64),
	(1.1450695946990663e-09 : GoFloat64), (1.1611052119775422e-09 : GoFloat64), (1.178127595480305e-09 : GoFloat64), (1.1962995039027646e-09 : GoFloat64),
	(1.2158286599728285e-09 : GoFloat64), (1.2369856250415978e-09 : GoFloat64), (1.2601323318151003e-09 : GoFloat64), (1.2857697129220469e-09 : GoFloat64),
	(1.3146201904845611e-09 : GoFloat64), (1.3477839955200466e-09 : GoFloat64), (1.3870635751089821e-09 : GoFloat64), (1.43574030442295e-09 : GoFloat64),
	(1.5008658760251592e-09 : GoFloat64), (1.6030947680434338e-09 : GoFloat64)) : GoArray<GoFloat32>);

private var _fn:GoArray<GoFloat32> = (new GoArray<GoFloat32>((1 : GoFloat64), (0.963599681854248 : GoFloat64), (0.9362826943397522 : GoFloat64),
	(0.9130436182022095 : GoFloat64), (0.8922816514968872 : GoFloat64), (0.8732430338859558 : GoFloat64), (0.8555005788803101 : GoFloat64),
	(0.8387836217880249 : GoFloat64), (0.8229072093963623 : GoFloat64), (0.8077383041381836 : GoFloat64), (0.7931770086288452 : GoFloat64),
	(0.7791460752487183 : GoFloat64), (0.7655841708183289 : GoFloat64), (0.7524415850639343 : GoFloat64), (0.7396772503852844 : GoFloat64),
	(0.7272568941116333 : GoFloat64), (0.7151514887809753 : GoFloat64), (0.7033361196517944 : GoFloat64), (0.6917891502380371 : GoFloat64),
	(0.6804918646812439 : GoFloat64), (0.6694276928901672 : GoFloat64), (0.6585819721221924 : GoFloat64), (0.6479418277740479 : GoFloat64),
	(0.6374954581260681 : GoFloat64), (0.6272324919700623 : GoFloat64), (0.6171433925628662 : GoFloat64), (0.6072195172309875 : GoFloat64),
	(0.5974531769752502 : GoFloat64), (0.5878370404243469 : GoFloat64), (0.5783646702766418 : GoFloat64), (0.5690299868583679 : GoFloat64),
	(0.5598273873329163 : GoFloat64), (0.550751805305481 : GoFloat64), (0.5417983531951904 : GoFloat64), (0.5329626798629761 : GoFloat64),
	(0.5242405533790588 : GoFloat64), (0.5156282186508179 : GoFloat64), (0.5071220397949219 : GoFloat64), (0.49871864914894104 : GoFloat64),
	(0.4904148280620575 : GoFloat64), (0.48220765590667725 : GoFloat64), (0.47409430146217346 : GoFloat64), (0.466072142124176 : GoFloat64),
	(0.45813870429992676 : GoFloat64), (0.45029163360595703 : GoFloat64), (0.44252872467041016 : GoFloat64), (0.4348478317260742 : GoFloat64),
	(0.42724698781967163 : GoFloat64), (0.41972434520721436 : GoFloat64), (0.41227802634239197 : GoFloat64), (0.40490642189979553 : GoFloat64),
	(0.39760786294937134 : GoFloat64), (0.3903807997703552 : GoFloat64), (0.3832238018512726 : GoFloat64), (0.3761354684829712 : GoFloat64),
	(0.3691144585609436 : GoFloat64), (0.36215949058532715 : GoFloat64), (0.3552693724632263 : GoFloat64), (0.3484429717063904 : GoFloat64),
	(0.3416791558265686 : GoFloat64), (0.33497685194015503 : GoFloat64), (0.32833510637283325 : GoFloat64), (0.3217529058456421 : GoFloat64),
	(0.3152293860912323 : GoFloat64), (0.30876362323760986 : GoFloat64), (0.3023548424243927 : GoFloat64), (0.2960021495819092 : GoFloat64),
	(0.2897048592567444 : GoFloat64), (0.28346219658851624 : GoFloat64), (0.2772735059261322 : GoFloat64), (0.271138072013855 : GoFloat64),
	(0.2650552988052368 : GoFloat64), (0.25902456045150757 : GoFloat64), (0.25304529070854187 : GoFloat64), (0.24711695313453674 : GoFloat64),
	(0.24123899638652802 : GoFloat64), (0.23541094362735748 : GoFloat64), (0.22963231801986694 : GoFloat64), (0.22390270233154297 : GoFloat64),
	(0.21822164952754974 : GoFloat64), (0.21258877217769623 : GoFloat64), (0.20700371265411377 : GoFloat64), (0.20146611332893372 : GoFloat64),
	(0.1959756463766098 : GoFloat64), (0.19053204357624054 : GoFloat64), (0.18513499200344086 : GoFloat64), (0.17978426814079285 : GoFloat64),
	(0.1744796335697174 : GoFloat64), (0.16922089457511902 : GoFloat64), (0.16400785744190216 : GoFloat64), (0.1588403731584549 : GoFloat64),
	(0.15371830761432648 : GoFloat64), (0.14864157140254974 : GoFloat64), (0.14361007511615753 : GoFloat64), (0.13862377405166626 : GoFloat64),
	(0.13368265330791473 : GoFloat64), (0.12878671288490295 : GoFloat64), (0.12393598258495331 : GoFloat64), (0.11913054436445236 : GoFloat64),
	(0.11437050998210907 : GoFloat64), (0.10965602099895477 : GoFloat64), (0.1049872562289238 : GoFloat64), (0.10036443918943405 : GoFloat64),
	(0.09578784555196762 : GoFloat64), (0.09125780314207077 : GoFloat64), (0.08677466958761215 : GoFloat64), (0.08233889937400818 : GoFloat64),
	(0.07795098423957825 : GoFloat64), (0.07361150532960892 : GoFloat64), (0.06932111829519272 : GoFloat64), (0.06508058309555054 : GoFloat64),
	(0.06089077144861221 : GoFloat64), (0.05675266310572624 : GoFloat64), (0.05266740173101425 : GoFloat64), (0.048636294901371 : GoFloat64),
	(0.044660862535238266 : GoFloat64), (0.040742866694927216 : GoFloat64), (0.03688438981771469 : GoFloat64), (0.03308788686990738 : GoFloat64),
	(0.029356317594647408 : GoFloat64), (0.025693291798233986 : GoFloat64), (0.02210330404341221 : GoFloat64), (0.018592102453112602 : GoFloat64),
	(0.015167297795414925 : GoFloat64), (0.011839478276669979 : GoFloat64), (0.0086244847625494 : GoFloat64), (0.005548994988203049 : GoFloat64),
	(0.0026696291752159595 : GoFloat64)) : GoArray<GoFloat32>);

/**
	// rngCooked used for seeding. See gen_cooked.go for details.
**/
private var _rngCooked:GoArray<GoInt64> = (new GoArray<GoInt64>(("-4181792142133755926" : GoInt64), ("-4576982950128230565" : GoInt64),
	("1395769623340756751" : GoInt64), ("5333664234075297259" : GoInt64), ("-6347679516498800754" : GoInt64), ("9033628115061424579" : GoInt64),
	("7143218595135194537" : GoInt64), ("4812947590706362721" : GoInt64), ("7937252194349799378" : GoInt64), ("5307299880338848416" : GoInt64),
	("8209348851763925077" : GoInt64), ("-7107630437535961764" : GoInt64), ("4593015457530856296" : GoInt64), ("8140875735541888011" : GoInt64),
	("-5903942795589686782" : GoInt64), ("-603556388664454774" : GoInt64), ("-7496297993371156308" : GoInt64), ("113108499721038619" : GoInt64),
	("4569519971459345583" : GoInt64), ("-4160538177779461077" : GoInt64), ("-6835753265595711384" : GoInt64), ("-6507240692498089696" : GoInt64),
	("6559392774825876886" : GoInt64), ("7650093201692370310" : GoInt64), ("7684323884043752161" : GoInt64), ("-8965504200858744418" : GoInt64),
	("-2629915517445760644" : GoInt64), ("271327514973697897" : GoInt64), ("-6433985589514657524" : GoInt64), ("1065192797246149621" : GoInt64),
	("3344507881999356393" : GoInt64), ("-4763574095074709175" : GoInt64), ("7465081662728599889" : GoInt64), ("1014950805555097187" : GoInt64),
	("-4773931307508785033" : GoInt64), ("-5742262670416273165" : GoInt64), ("2418672789110888383" : GoInt64), ("5796562887576294778" : GoInt64),
	("4484266064449540171" : GoInt64), ("3738982361971787048" : GoInt64), ("-4699774852342421385" : GoInt64), ("10530508058128498" : GoInt64),
	("-589538253572429690" : GoInt64), ("-6598062107225984180" : GoInt64), ("8660405965245884302" : GoInt64), ("10162832508971942" : GoInt64),
	("-2682657355892958417" : GoInt64), ("7031802312784620857" : GoInt64), ("6240911277345944669" : GoInt64), ("831864355460801054" : GoInt64),
	("-1218937899312622917" : GoInt64), ("2116287251661052151" : GoInt64), ("2202309800992166967" : GoInt64), ("9161020366945053561" : GoInt64),
	("4069299552407763864" : GoInt64), ("4936383537992622449" : GoInt64), ("457351505131524928" : GoInt64), ("-8881176990926596454" : GoInt64),
	("-6375600354038175299" : GoInt64), ("-7155351920868399290" : GoInt64), ("4368649989588021065" : GoInt64), ("887231587095185257" : GoInt64),
	("-3659780529968199312" : GoInt64), ("-2407146836602825512" : GoInt64), ("5616972787034086048" : GoInt64), ("-751562733459939242" : GoInt64),
	("1686575021641186857" : GoInt64), ("-5177887698780513806" : GoInt64), ("-4979215821652996885" : GoInt64), ("-1375154703071198421" : GoInt64),
	("5632136521049761902" : GoInt64), ("-8390088894796940536" : GoInt64), ("-193645528485698615" : GoInt64), ("-5979788902190688516" : GoInt64),
	("-4907000935050298721" : GoInt64), ("-285522056888777828" : GoInt64), ("-2776431630044341707" : GoInt64), ("1679342092332374735" : GoInt64),
	("6050638460742422078" : GoInt64), ("-2229851317345194226" : GoInt64), ("-1582494184340482199" : GoInt64), ("5881353426285907985" : GoInt64),
	("812786550756860885" : GoInt64), ("4541845584483343330" : GoInt64), ("-6497901820577766722" : GoInt64), ("4980675660146853729" : GoInt64),
	("-4012602956251539747" : GoInt64), ("-329088717864244987" : GoInt64), ("-2896929232104691526" : GoInt64), ("1495812843684243920" : GoInt64),
	("-2153620458055647789" : GoInt64), ("7370257291860230865" : GoInt64), ("-2466442761497833547" : GoInt64), ("4706794511633873654" : GoInt64),
	("-1398851569026877145" : GoInt64), ("8549875090542453214" : GoInt64), ("-9189721207376179652" : GoInt64), ("-7894453601103453165" : GoInt64),
	("7297902601803624459" : GoInt64), ("1011190183918857495" : GoInt64), ("-6985347000036920864" : GoInt64), ("5147159997473910359" : GoInt64),
	("-8326859945294252826" : GoInt64), ("2659470849286379941" : GoInt64), ("6097729358393448602" : GoInt64), ("-7491646050550022124" : GoInt64),
	("-5117116194870963097" : GoInt64), ("-896216826133240300" : GoInt64), ("-745860416168701406" : GoInt64), ("5803876044675762232" : GoInt64),
	("-787954255994554146" : GoInt64), ("-3234519180203704564" : GoInt64), ("-4507534739750823898" : GoInt64), ("-1657200065590290694" : GoInt64),
	("505808562678895611" : GoInt64), ("-4153273856159712438" : GoInt64), ("-8381261370078904295" : GoInt64), ("572156825025677802" : GoInt64),
	("1791881013492340891" : GoInt64), ("3393267094866038768" : GoInt64), ("-5444650186382539299" : GoInt64), ("2352769483186201278" : GoInt64),
	("-7930912453007408350" : GoInt64), ("-325464993179687389" : GoInt64), ("-3441562999710612272" : GoInt64), ("-6489413242825283295" : GoInt64),
	("5092019688680754699" : GoInt64), ("-227247482082248967" : GoInt64), ("4234737173186232084" : GoInt64), ("5027558287275472836" : GoInt64),
	("4635198586344772304" : GoInt64), ("-536033143587636457" : GoInt64), ("5907508150730407386" : GoInt64), ("-8438615781380831356" : GoInt64),
	("972392927514829904" : GoInt64), ("-3801314342046600696" : GoInt64), ("-4064951393885491917" : GoInt64), ("-174840358296132583" : GoInt64),
	("2407211146698877100" : GoInt64), ("-1640089820333676239" : GoInt64), ("3940796514530962282" : GoInt64), ("-5882197405809569433" : GoInt64),
	("3095313889586102949" : GoInt64), ("-1818050141166537098" : GoInt64), ("5832080132947175283" : GoInt64), ("7890064875145919662" : GoInt64),
	("8184139210799583195" : GoInt64), ("-8073512175445549678" : GoInt64), ("-7758774793014564506" : GoInt64), ("-4581724029666783935" : GoInt64),
	("3516491885471466898" : GoInt64), ("-8267083515063118116" : GoInt64), ("6657089965014657519" : GoInt64), ("5220884358887979358" : GoInt64),
	("1796677326474620641" : GoInt64), ("5340761970648932916" : GoInt64), ("1147977171614181568" : GoInt64), ("5066037465548252321" : GoInt64),
	("2574765911837859848" : GoInt64), ("1085848279845204775" : GoInt64), ("-5873264506986385449" : GoInt64), ("6116438694366558490" : GoInt64),
	("2107701075971293812" : GoInt64), ("-7420077970933506541" : GoInt64), ("2469478054175558874" : GoInt64), ("-1855128755834809824" : GoInt64),
	("-5431463669011098282" : GoInt64), ("-9038325065738319171" : GoInt64), ("-6966276280341336160" : GoInt64), ("7217693971077460129" : GoInt64),
	("-8314322083775271549" : GoInt64), ("7196649268545224266" : GoInt64), ("-3585711691453906209" : GoInt64), ("-5267827091426810625" : GoInt64),
	("8057528650917418961" : GoInt64), ("-5084103596553648165" : GoInt64), ("-2601445448341207749" : GoInt64), ("-7850010900052094367" : GoInt64),
	("6527366231383600011" : GoInt64), ("3507654575162700890" : GoInt64), ("9202058512774729859" : GoInt64), ("1954818376891585542" : GoInt64),
	("-2582991129724600103" : GoInt64), ("8299563319178235687" : GoInt64), ("-5321504681635821435" : GoInt64), ("7046310742295574065" : GoInt64),
	("-2376176645520785576" : GoInt64), ("-7650733936335907755" : GoInt64), ("8850422670118399721" : GoInt64), ("3631909142291992901" : GoInt64),
	("5158881091950831288" : GoInt64), ("-6340413719511654215" : GoInt64), ("4763258931815816403" : GoInt64), ("6280052734341785344" : GoInt64),
	("-4979582628649810958" : GoInt64), ("2043464728020827976" : GoInt64), ("-2678071570832690343" : GoInt64), ("4562580375758598164" : GoInt64),
	("5495451168795427352" : GoInt64), ("-7485059175264624713" : GoInt64), ("553004618757816492" : GoInt64), ("6895160632757959823" : GoInt64),
	("-989748114590090637" : GoInt64), ("7139506338801360852" : GoInt64), ("-672480814466784139" : GoInt64), ("5535668688139305547" : GoInt64),
	("2430933853350256242" : GoInt64), ("-3821430778991574732" : GoInt64), ("-1063731997747047009" : GoInt64), ("-3065878205254005442" : GoInt64),
	("7632066283658143750" : GoInt64), ("6308328381617103346" : GoInt64), ("3681878764086140361" : GoInt64), ("3289686137190109749" : GoInt64),
	("6587997200611086848" : GoInt64), ("244714774258135476" : GoInt64), ("-5143583659437639708" : GoInt64), ("8090302575944624335" : GoInt64),
	("2945117363431356361" : GoInt64), ("-8359047641006034763" : GoInt64), ("3009039260312620700" : GoInt64), ("-793344576772241777" : GoInt64),
	("401084700045993341" : GoInt64), ("-1968749590416080887" : GoInt64), ("4707864159563588614" : GoInt64), ("-3583123505891281857" : GoInt64),
	("-3240864324164777915" : GoInt64), ("-5908273794572565703" : GoInt64), ("-3719524458082857382" : GoInt64), ("-5281400669679581926" : GoInt64),
	("8118566580304798074" : GoInt64), ("3839261274019871296" : GoInt64), ("7062410411742090847" : GoInt64), ("-8481991033874568140" : GoInt64),
	("6027994129690250817" : GoInt64), ("-6725542042704711878" : GoInt64), ("-2971981702428546974" : GoInt64), ("-7854441788951256975" : GoInt64),
	("8809096399316380241" : GoInt64), ("6492004350391900708" : GoInt64), ("2462145737463489636" : GoInt64), ("-8818543617934476634" : GoInt64),
	("-5070345602623085213" : GoInt64), ("-8961586321599299868" : GoInt64), ("-3758656652254704451" : GoInt64), ("-8630661632476012791" : GoInt64),
	("6764129236657751224" : GoInt64), ("-709716318315418359" : GoInt64), ("-3403028373052861600" : GoInt64), ("-8838073512170985897" : GoInt64),
	("-3999237033416576341" : GoInt64), ("-2920240395515973663" : GoInt64), ("-2073249475545404416" : GoInt64), ("368107899140673753" : GoInt64),
	("-6108185202296464250" : GoInt64), ("-6307735683270494757" : GoInt64), ("4782583894627718279" : GoInt64), ("6718292300699989587" : GoInt64),
	("8387085186914375220" : GoInt64), ("3387513132024756289" : GoInt64), ("4654329375432538231" : GoInt64), ("-292704475491394206" : GoInt64),
	("-3848998599978456535" : GoInt64), ("7623042350483453954" : GoInt64), ("7725442901813263321" : GoInt64), ("9186225467561587250" : GoInt64),
	("-5132344747257272453" : GoInt64), ("-6865740430362196008" : GoInt64), ("2530936820058611833" : GoInt64), ("1636551876240043639" : GoInt64),
	("-3658707362519810009" : GoInt64), ("1452244145334316253" : GoInt64), ("-7161729655835084979" : GoInt64), ("-7943791770359481772" : GoInt64),
	("9108481583171221009" : GoInt64), ("-3200093350120725999" : GoInt64), ("5007630032676973346" : GoInt64), ("2153168792952589781" : GoInt64),
	("6720334534964750538" : GoInt64), ("-3181825545719981703" : GoInt64), ("3433922409283786309" : GoInt64), ("2285479922797300912" : GoInt64),
	("3110614940896576130" : GoInt64), ("-2856812446131932915" : GoInt64), ("-3804580617188639299" : GoInt64), ("7163298419643543757" : GoInt64),
	("4891138053923696990" : GoInt64), ("580618510277907015" : GoInt64), ("1684034065251686769" : GoInt64), ("4429514767357295841" : GoInt64),
	("-8893025458299325803" : GoInt64), ("-8103734041042601133" : GoInt64), ("7177515271653460134" : GoInt64), ("4589042248470800257" : GoInt64),
	("-1530083407795771245" : GoInt64), ("143607045258444228" : GoInt64), ("246994305896273627" : GoInt64), ("-8356954712051676521" : GoInt64),
	("6473547110565816071" : GoInt64), ("3092379936208876896" : GoInt64), ("2058427839513754051" : GoInt64), ("-4089587328327907870" : GoInt64),
	("8785882556301281247" : GoInt64), ("-3074039370013608197" : GoInt64), ("-637529855400303673" : GoInt64), ("6137678347805511274" : GoInt64),
	("-7152924852417805802" : GoInt64), ("5708223427705576541" : GoInt64), ("-3223714144396531304" : GoInt64), ("4358391411789012426" : GoInt64),
	("325123008708389849" : GoInt64), ("6837621693887290924" : GoInt64), ("4843721905315627004" : GoInt64), ("-3212720814705499393" : GoInt64),
	("-3825019837890901156" : GoInt64), ("4602025990114250980" : GoInt64), ("1044646352569048800" : GoInt64), ("9106614159853161675" : GoInt64),
	("-8394115921626182539" : GoInt64), ("-4304087667751778808" : GoInt64), ("2681532557646850893" : GoInt64), ("3681559472488511871" : GoInt64),
	("-3915372517896561773" : GoInt64), ("-2889241648411946534" : GoInt64), ("-6564663803938238204" : GoInt64), ("-8060058171802589521" : GoInt64),
	("581945337509520675" : GoInt64), ("3648778920718647903" : GoInt64), ("-4799698790548231394" : GoInt64), ("-7602572252857820065" : GoInt64),
	("220828013409515943" : GoInt64), ("-1072987336855386047" : GoInt64), ("4287360518296753003" : GoInt64), ("-4633371852008891965" : GoInt64),
	("5513660857261085186" : GoInt64), ("-2258542936462001533" : GoInt64), ("-8744380348503999773" : GoInt64), ("8746140185685648781" : GoInt64),
	("228500091334420247" : GoInt64), ("1356187007457302238" : GoInt64), ("3019253992034194581" : GoInt64), ("3152601605678500003" : GoInt64),
	("-8793219284148773595" : GoInt64), ("5559581553696971176" : GoInt64), ("4916432985369275664" : GoInt64), ("-8559797105120221417" : GoInt64),
	("-5802598197927043732" : GoInt64), ("2868348622579915573" : GoInt64), ("-7224052902810357288" : GoInt64), ("-5894682518218493085" : GoInt64),
	("2587672709781371173" : GoInt64), ("-7706116723325376475" : GoInt64), ("3092343956317362483" : GoInt64), ("-5561119517847711700" : GoInt64),
	("972445599196498113" : GoInt64), ("-1558506600978816441" : GoInt64), ("1708913533482282562" : GoInt64), ("-2305554874185907314" : GoInt64),
	("-6005743014309462908" : GoInt64), ("-6653329009633068701" : GoInt64), ("-483583197311151195" : GoInt64), ("2488075924621352812" : GoInt64),
	("-4529369641467339140" : GoInt64), ("-4663743555056261452" : GoInt64), ("2997203966153298104" : GoInt64), ("1282559373026354493" : GoInt64),
	("240113143146674385" : GoInt64), ("8665713329246516443" : GoInt64), ("628141331766346752" : GoInt64), ("-4651421219668005332" : GoInt64),
	("-7750560848702540400" : GoInt64), ("7596648026010355826" : GoInt64), ("-3132152619100351065" : GoInt64), ("7834161864828164065" : GoInt64),
	("7103445518877254909" : GoInt64), ("4390861237357459201" : GoInt64), ("-4780718172614204074" : GoInt64), ("-319889632007444440" : GoInt64),
	("622261699494173647" : GoInt64), ("-3186110786557562560" : GoInt64), ("-8718967088789066690" : GoInt64), ("-1948156510637662747" : GoInt64),
	("-8212195255998774408" : GoInt64), ("-7028621931231314745" : GoInt64), ("2623071828615234808" : GoInt64), ("-4066058308780939700" : GoInt64),
	("-5484966924888173764" : GoInt64), ("-6683604512778046238" : GoInt64), ("-6756087640505506466" : GoInt64), ("5256026990536851868" : GoInt64),
	("7841086888628396109" : GoInt64), ("6640857538655893162" : GoInt64), ("-8021284697816458310" : GoInt64), ("-7109857044414059830" : GoInt64),
	("-1689021141511844405" : GoInt64), ("-4298087301956291063" : GoInt64), ("-4077748265377282003" : GoInt64), ("-998231156719803476" : GoInt64),
	("2719520354384050532" : GoInt64), ("9132346697815513771" : GoInt64), ("4332154495710163773" : GoInt64), ("-2085582442760428892" : GoInt64),
	("6994721091344268833" : GoInt64), ("-2556143461985726874" : GoInt64), ("-8567931991128098309" : GoInt64), ("59934747298466858" : GoInt64),
	("-3098398008776739403" : GoInt64), ("-265597256199410390" : GoInt64), ("2332206071942466437" : GoInt64), ("-7522315324568406181" : GoInt64),
	("3154897383618636503" : GoInt64), ("-7585605855467168281" : GoInt64), ("-6762850759087199275" : GoInt64), ("197309393502684135" : GoInt64),
	("-8579694182469508493" : GoInt64), ("2543179307861934850" : GoInt64), ("4350769010207485119" : GoInt64), ("-4468719947444108136" : GoInt64),
	("-7207776534213261296" : GoInt64), ("-1224312577878317200" : GoInt64), ("4287946071480840813" : GoInt64), ("8362686366770308971" : GoInt64),
	("6486469209321732151" : GoInt64), ("-5605644191012979782" : GoInt64), ("-1669018511020473564" : GoInt64), ("4450022655153542367" : GoInt64),
	("-7618176296641240059" : GoInt64), ("-3896357471549267421" : GoInt64), ("-4596796223304447488" : GoInt64), ("-6531150016257070659" : GoInt64),
	("-8982326463137525940" : GoInt64), ("-4125325062227681798" : GoInt64), ("-1306489741394045544" : GoInt64), ("-8338554946557245229" : GoInt64),
	("5329160409530630596" : GoInt64), ("7790979528857726136" : GoInt64), ("4955070238059373407" : GoInt64), ("-4304834761432101506" : GoInt64),
	("-6215295852904371179" : GoInt64), ("3007769226071157901" : GoInt64), ("-6753025801236972788" : GoInt64), ("8928702772696731736" : GoInt64),
	("7856187920214445904" : GoInt64), ("-4748497451462800923" : GoInt64), ("7900176660600710914" : GoInt64), ("-7082800908938549136" : GoInt64),
	("-6797926979589575837" : GoInt64), ("-6737316883512927978" : GoInt64), ("4186670094382025798" : GoInt64), ("1883939007446035042" : GoInt64),
	("-414705992779907823" : GoInt64), ("3734134241178479257" : GoInt64), ("4065968871360089196" : GoInt64), ("6953124200385847784" : GoInt64),
	("-7917685222115876751" : GoInt64), ("-7585632937840318161" : GoInt64), ("-5567246375906782599" : GoInt64), ("-5256612402221608788" : GoInt64),
	("3106378204088556331" : GoInt64), ("-2894472214076325998" : GoInt64), ("4565385105440252958" : GoInt64), ("1979884289539493806" : GoInt64),
	("-6891578849933910383" : GoInt64), ("3783206694208922581" : GoInt64), ("8464961209802336085" : GoInt64), ("2843963751609577687" : GoInt64),
	("3030678195484896323" : GoInt64), ("-4429654462759003204" : GoInt64), ("4459239494808162889" : GoInt64), ("402587895800087237" : GoInt64),
	("8057891408711167515" : GoInt64), ("4541888170938985079" : GoInt64), ("1042662272908816815" : GoInt64), ("-3666068979732206850" : GoInt64),
	("2647678726283249984" : GoInt64), ("2144477441549833761" : GoInt64), ("-3417019821499388721" : GoInt64), ("-2105601033380872185" : GoInt64),
	("5916597177708541638" : GoInt64), ("-8760774321402454447" : GoInt64), ("8833658097025758785" : GoInt64), ("5970273481425315300" : GoInt64),
	("563813119381731307" : GoInt64), ("-6455022486202078793" : GoInt64), ("1598828206250873866" : GoInt64), ("-4016978389451217698" : GoInt64),
	("-2988328551145513985" : GoInt64), ("-6071154634840136312" : GoInt64), ("8469693267274066490" : GoInt64), ("125672920241807416" : GoInt64),
	("-3912292412830714870" : GoInt64), ("-2559617104544284221" : GoInt64), ("-486523741806024092" : GoInt64), ("-4735332261862713930" : GoInt64),
	("5923302823487327109" : GoInt64), ("-9082480245771672572" : GoInt64), ("-1808429243461201518" : GoInt64), ("7990420780896957397" : GoInt64),
	("4317817392807076702" : GoInt64), ("3625184369705367340" : GoInt64), ("-6482649271566653105" : GoInt64), ("-3480272027152017464" : GoInt64),
	("-3225473396345736649" : GoInt64), ("-368878695502291645" : GoInt64), ("-3981164001421868007" : GoInt64), ("-8522033136963788610" : GoInt64),
	("7609280429197514109" : GoInt64), ("3020985755112334161" : GoInt64), ("-2572049329799262942" : GoInt64), ("2635195723621160615" : GoInt64),
	("5144520864246028816" : GoInt64), ("-8188285521126945980" : GoInt64), ("1567242097116389047" : GoInt64), ("8172389260191636581" : GoInt64),
	("-2885551685425483535" : GoInt64), ("-7060359469858316883" : GoInt64), ("-6480181133964513127" : GoInt64), ("-7317004403633452381" : GoInt64),
	("6011544915663598137" : GoInt64), ("5932255307352610768" : GoInt64), ("2241128460406315459" : GoInt64), ("-8327867140638080220" : GoInt64),
	("3094483003111372717" : GoInt64), ("4583857460292963101" : GoInt64), ("9079887171656594975" : GoInt64), ("-384082854924064405" : GoInt64),
	("-3460631649611717935" : GoInt64), ("4225072055348026230" : GoInt64), ("-7385151438465742745" : GoInt64), ("3801620336801580414" : GoInt64),
	("-399845416774701952" : GoInt64), ("-7446754431269675473" : GoInt64), ("7899055018877642622" : GoInt64), ("5421679761463003041" : GoInt64),
	("5521102963086275121" : GoInt64), ("-4975092593295409910" : GoInt64), ("8735487530905098534" : GoInt64), ("-7462844945281082830" : GoInt64),
	("-2080886987197029914" : GoInt64), ("-1000715163927557685" : GoInt64), ("-4253840471931071485" : GoInt64), ("-5828896094657903328" : GoInt64),
	("6424174453260338141" : GoInt64), ("359248545074932887" : GoInt64), ("-5949720754023045210" : GoInt64), ("-2426265837057637212" : GoInt64),
	("3030918217665093212" : GoInt64), ("-9077771202237461772" : GoInt64), ("-3186796180789149575" : GoInt64), ("740416251634527158" : GoInt64),
	("-2142944401404840226" : GoInt64), ("6951781370868335478" : GoInt64), ("399922722363687927" : GoInt64), ("-8928469722407522623" : GoInt64),
	("-1378421100515597285" : GoInt64), ("-8343051178220066766" : GoInt64), ("-3030716356046100229" : GoInt64), ("-8811767350470065420" : GoInt64),
	("9026808440365124461" : GoInt64), ("6440783557497587732" : GoInt64), ("4615674634722404292" : GoInt64), ("539897290441580544" : GoInt64),
	("2096238225866883852" : GoInt64), ("8751955639408182687" : GoInt64), ("-7316147128802486205" : GoInt64), ("7381039757301768559" : GoInt64),
	("6157238513393239656" : GoInt64), ("-1473377804940618233" : GoInt64), ("8629571604380892756" : GoInt64), ("5280433031239081479" : GoInt64),
	("7101611890139813254" : GoInt64), ("2479018537985767835" : GoInt64), ("7169176924412769570" : GoInt64), ("-1281305539061572506" : GoInt64),
	("-7865612307799218120" : GoInt64), ("2278447439451174845" : GoInt64), ("3625338785743880657" : GoInt64), ("6477479539006708521" : GoInt64),
	("8976185375579272206" : GoInt64), ("-3712000482142939688" : GoInt64), ("1326024180520890843" : GoInt64), ("7537449876596048829" : GoInt64),
	("5464680203499696154" : GoInt64), ("3189671183162196045" : GoInt64), ("6346751753565857109" : GoInt64), ("-8982212049534145501" : GoInt64),
	("-6127578587196093755" : GoInt64), ("-245039190118465649" : GoInt64), ("-6320577374581628592" : GoInt64), ("7208698530190629697" : GoInt64),
	("7276901792339343736" : GoInt64), ("-7490986807540332668" : GoInt64), ("4133292154170828382" : GoInt64), ("2918308698224194548" : GoInt64),
	("-7703910638917631350" : GoInt64), ("-3929437324238184044" : GoInt64), ("-4300543082831323144" : GoInt64), ("-6344160503358350167" : GoInt64),
	("5896236396443472108" : GoInt64), ("-758328221503023383" : GoInt64), ("-1894351639983151068" : GoInt64), ("-307900319840287220" : GoInt64),
	("-6278469401177312761" : GoInt64), ("-2171292963361310674" : GoInt64), ("8382142935188824023" : GoInt64), ("9103922860780351547" : GoInt64),
	("4152330101494654406" : GoInt64)) : GoArray<GoInt64>);

private var _globalRand:Ref<Rand> = new_(Go.asInterface((({_src: Go.typeAssert((Go.toInterface(newSource(("1" : GoInt64))) : Ref<T_rngSource>))} : T_lockedSource) : Ref<T_lockedSource>)));
private final _re:GoFloat64 = (7.69711747013105 : GoFloat64);
private final _rn:GoFloat64 = (3.442619855899 : GoFloat64);

/**
	// Type assert that globalRand's source is a lockedSource whose src is a *rngSource.
**/
private var _1:Ref<T_rngSource> = Go.typeAssert((Go.toInterface(_globalRand._src) : Ref<T_lockedSource>))._src;

private final _rngLen:GoUInt64 = ("607" : GoUInt64);
private final _rngTap:GoUInt64 = ("273" : GoUInt64);
private final _rngMax:GoUInt64 = ("9223372036854775808" : GoUInt64);
private final _rngMask:GoUInt64 = ("9223372036854775807" : GoUInt64);
private final _int32max:GoUInt64 = ("2147483647" : GoUInt64);

/**
	// A Source represents a source of uniformly-distributed
	// pseudo-random int64 values in the range [0, 1<<63).
**/
typedef Source = StructType & {
	public function int63():GoInt64;
	public function seed(_seed:GoInt64):Void;
};

/**
	// A Source64 is a Source that can also generate
	// uniformly-distributed pseudo-random uint64 values in
	// the range [0, 1<<64) directly.
	// If a Rand r's underlying Source s implements Source64,
	// then r.Uint64 returns the result of one call to s.Uint64
	// instead of making two calls to s.Int63.
**/
typedef Source64 = StructType & {
	> Source,
	public function uint64():GoUInt64;
};

/**
	// A Rand is a source of random numbers.
**/
@:structInit @:using(stdgo.math.rand.Rand.Rand_static_extension) class Rand {
	public var _src:Source = (null : Source);

	/**
		// non-nil if src is source64
	**/
	public var _s64:Source64 = (null : Source64);

	/**
		// readVal contains remainder of 63-bit integer used for bytes
		// generation during most recent Read call.
		// It is saved so next Read call can start where the previous
		// one finished.
	**/
	public var _readVal:GoInt64 = 0;

	/**
		// readPos indicates the number of low-order bytes of readVal
		// that are still valid.
	**/
	public var _readPos:GoInt8 = 0;

	public function new(?_src:Source, ?_s64:Source64, ?_readVal:GoInt64, ?_readPos:GoInt8) {
		if (_src != null)
			this._src = _src;
		if (_s64 != null)
			this._s64 = _s64;
		if (_readVal != null)
			this._readVal = _readVal;
		if (_readPos != null)
			this._readPos = _readPos;
	}

	public function __copy__() {
		return new Rand(_src, _s64, _readVal, _readPos);
	}
}

@:structInit @:using(stdgo.math.rand.Rand.T_lockedSource_static_extension) private class T_lockedSource {
	public var _lk:stdgo.sync.Sync.Mutex = ({} : stdgo.sync.Sync.Mutex);
	public var _src:Ref<T_rngSource> = (null : T_rngSource);

	public function new(?_lk:stdgo.sync.Sync.Mutex, ?_src:Ref<T_rngSource>) {
		if (_lk != null)
			this._lk = _lk;
		if (_src != null)
			this._src = _src;
	}

	public function __copy__() {
		return new T_lockedSource(_lk, _src);
	}
}

@:structInit @:using(stdgo.math.rand.Rand.T_rngSource_static_extension) private class T_rngSource {
	/**
		// index into vec
	**/
	public var _tap:GoInt = 0;

	/**
		// index into vec
	**/
	public var _feed:GoInt = 0;

	/**
		// current feedback register
	**/
	public var _vec:GoArray<GoInt64> = new GoArray<GoInt64>(...[for (i in 0...607) (0 : GoInt64)]);

	public function new(?_tap:GoInt, ?_feed:GoInt, ?_vec:GoArray<GoInt64>) {
		if (_tap != null)
			this._tap = _tap;
		if (_feed != null)
			this._feed = _feed;
		if (_vec != null)
			this._vec = _vec;
	}

	public function __copy__() {
		return new T_rngSource(_tap, _feed, _vec);
	}
}

/**
	// A Zipf generates Zipf distributed variates.
**/
@:structInit @:using(stdgo.math.rand.Rand.Zipf_static_extension) class Zipf {
	public var _r:Ref<Rand> = (null : Rand);
	public var _imax:GoFloat64 = 0;
	public var _v:GoFloat64 = 0;
	public var _q:GoFloat64 = 0;
	public var _s:GoFloat64 = 0;
	public var _oneminusQ:GoFloat64 = 0;
	public var _oneminusQinv:GoFloat64 = 0;
	public var _hxm:GoFloat64 = 0;
	public var _hx0minusHxm:GoFloat64 = 0;

	public function new(?_r:Ref<Rand>, ?_imax:GoFloat64, ?_v:GoFloat64, ?_q:GoFloat64, ?_s:GoFloat64, ?_oneminusQ:GoFloat64, ?_oneminusQinv:GoFloat64,
			?_hxm:GoFloat64, ?_hx0minusHxm:GoFloat64) {
		if (_r != null)
			this._r = _r;
		if (_imax != null)
			this._imax = _imax;
		if (_v != null)
			this._v = _v;
		if (_q != null)
			this._q = _q;
		if (_s != null)
			this._s = _s;
		if (_oneminusQ != null)
			this._oneminusQ = _oneminusQ;
		if (_oneminusQinv != null)
			this._oneminusQinv = _oneminusQinv;
		if (_hxm != null)
			this._hxm = _hxm;
		if (_hx0minusHxm != null)
			this._hx0minusHxm = _hx0minusHxm;
	}

	public function __copy__() {
		return new Zipf(_r, _imax, _v, _q, _s, _oneminusQ, _oneminusQinv, _hxm, _hx0minusHxm);
	}
}

function int31nForTest(_r:Ref<Rand>, _n:GoInt32):GoInt32 {
	return _r._int31n(_n);
}

function getNormalDistributionParameters():{
	var _0:GoFloat64;
	var _1:GoArray<GoUInt32>;
	var _2:GoArray<GoFloat32>;
	var _3:GoArray<GoFloat32>;
} {
	return {
		_0: (3.442619855899 : GoFloat64),
		_1: (_kn == null ? null : _kn.__copy__()),
		_2: (_wn == null ? null : _wn.__copy__()),
		_3: (_fn == null ? null : _fn.__copy__())
	};
}

function getExponentialDistributionParameters():{
	var _0:GoFloat64;
	var _1:GoArray<GoUInt32>;
	var _2:GoArray<GoFloat32>;
	var _3:GoArray<GoFloat32>;
} {
	return {
		_0: (7.69711747013105 : GoFloat64),
		_1: (_ke == null ? null : _ke.__copy__()),
		_2: (_we == null ? null : _we.__copy__()),
		_3: (_fe == null ? null : _fe.__copy__())
	};
}

function _absInt32(_i:GoInt32):GoUInt32 {
	if (_i < (0:GoInt32)) {
		return (-_i : GoUInt32);
	};
	return (_i : GoUInt32);
}

/**
	// NewSource returns a new pseudo-random Source seeded with the given value.
	// Unlike the default Source used by top-level functions, this source is not
	// safe for concurrent use by multiple goroutines.
**/
function newSource(_seed:GoInt64):Source {
	var _rng:T_rngSource = ({} : T_rngSource);
	_rng.seed(_seed);
	return Go.asInterface((_rng : Ref<T_rngSource>));
}

/**
	// New returns a new Rand that uses random values from src
	// to generate other random values.
**/
function new_(_src:Source):Ref<Rand> {
	var __tmp__ = try {
		{value: Go.typeAssert((Go.toInterface(_src) : Source64)), ok: true};
	} catch (_) {
		{value: (null : Source64), ok: false};
	}, _s64 = __tmp__.value, _0 = __tmp__.ok;
	return (({_src: _src, _s64: _s64} : Rand) : Ref<Rand>);
}

function _read(_p:Slice<GoByte>, _src:Source, _readVal:Pointer<GoInt64>, _readPos:Pointer<GoInt8>):{var _0:GoInt; var _1:Error;} {
	var _n:GoInt = (0 : GoInt), _err:Error = (null : Error);
	var _pos:GoInt8 = _readPos.value;
	var _val:GoInt64 = _readVal.value;
	var __tmp__ = try {
		{value: Go.typeAssert((Go.toInterface(_src) : Ref<T_rngSource>)), ok: true};
	} catch (_) {
		{value: (null : T_rngSource), ok: false};
	}, _rng = __tmp__.value, _0 = __tmp__.ok;
	{
		_n = (0 : GoInt);
		Go.cfor(_n < (_p.length), _n++, {
			if (_pos == ((0 : GoInt8))) {
				if (_rng != null) {
					_val = _rng.int63();
				} else {
					_val = _src.int63();
				};
				_pos = (7 : GoInt8);
			};
			_p[_n] = (_val : GoByte);
			_val = _val >> (("8" : GoUInt64));
			_pos--;
		});
	};
	_readPos.value = _pos;
	_readVal.value = _val;
	return {_0: _n, _1: _err};
}

/**
	// Seed uses the provided seed value to initialize the default Source to a
	// deterministic state. If Seed is not called, the generator behaves as
	// if seeded by Seed(1). Seed values that have the same remainder when
	// divided by 2³¹-1 generate the same pseudo-random sequence.
	// Seed, unlike the Rand.Seed method, is safe for concurrent use.
**/
function seed(_seed:GoInt64):Void {
	_globalRand.seed(_seed);
}

/**
	// Int63 returns a non-negative pseudo-random 63-bit integer as an int64
	// from the default Source.
**/
function int63():GoInt64 {
	return _globalRand.int63();
}

/**
	// Uint32 returns a pseudo-random 32-bit value as a uint32
	// from the default Source.
**/
function uint32():GoUInt32 {
	return _globalRand.uint32();
}

/**
	// Uint64 returns a pseudo-random 64-bit value as a uint64
	// from the default Source.
**/
function uint64():GoUInt64 {
	return _globalRand.uint64();
}

/**
	// Int31 returns a non-negative pseudo-random 31-bit integer as an int32
	// from the default Source.
**/
function int31():GoInt32 {
	return _globalRand.int31();
}

/**
	// Int returns a non-negative pseudo-random int from the default Source.
**/
function int_():GoInt {
	return _globalRand.int_();
}

/**
	// Int63n returns, as an int64, a non-negative pseudo-random number in the half-open interval [0,n)
	// from the default Source.
	// It panics if n <= 0.
**/
function int63n(_n:GoInt64):GoInt64 {
	return _globalRand.int63n(_n);
}

/**
	// Int31n returns, as an int32, a non-negative pseudo-random number in the half-open interval [0,n)
	// from the default Source.
	// It panics if n <= 0.
**/
function int31n(_n:GoInt32):GoInt32 {
	return _globalRand.int31n(_n);
}

/**
	// Intn returns, as an int, a non-negative pseudo-random number in the half-open interval [0,n)
	// from the default Source.
	// It panics if n <= 0.
**/
function intn(_n:GoInt):GoInt {
	return _globalRand.intn(_n);
}

/**
	// Float64 returns, as a float64, a pseudo-random number in the half-open interval [0.0,1.0)
	// from the default Source.
**/
function float64():GoFloat64 {
	return _globalRand.float64();
}

/**
	// Float32 returns, as a float32, a pseudo-random number in the half-open interval [0.0,1.0)
	// from the default Source.
**/
function float32():GoFloat32 {
	return _globalRand.float32();
}

/**
	// Perm returns, as a slice of n ints, a pseudo-random permutation of the integers
	// in the half-open interval [0,n) from the default Source.
**/
function perm(_n:GoInt):Slice<GoInt> {
	return _globalRand.perm(_n);
}

/**
	// Shuffle pseudo-randomizes the order of elements using the default Source.
	// n is the number of elements. Shuffle panics if n < 0.
	// swap swaps the elements with indexes i and j.
**/
function shuffle(_n:GoInt, _swap:(_i:GoInt, _j:GoInt) -> Void):Void {
	_globalRand.shuffle(_n, _swap);
}

/**
	// Read generates len(p) random bytes from the default Source and
	// writes them into p. It always returns len(p) and a nil error.
	// Read, unlike the Rand.Read method, is safe for concurrent use.
**/
function read(_p:Slice<GoByte>):{var _0:GoInt; var _1:Error;} {
	var _n:GoInt = (0 : GoInt), _err:Error = (null : Error);
	return _globalRand.read(_p);
}

/**
	// NormFloat64 returns a normally distributed float64 in the range
	// [-math.MaxFloat64, +math.MaxFloat64] with
	// standard normal distribution (mean = 0, stddev = 1)
	// from the default Source.
	// To produce a different normal distribution, callers can
	// adjust the output using:
	//
	//	sample = NormFloat64() * desiredStdDev + desiredMean
**/
function normFloat64():GoFloat64 {
	return _globalRand.normFloat64();
}

/**
	// ExpFloat64 returns an exponentially distributed float64 in the range
	// (0, +math.MaxFloat64] with an exponential distribution whose rate parameter
	// (lambda) is 1 and whose mean is 1/lambda (1) from the default Source.
	// To produce a distribution with a different rate parameter,
	// callers can adjust the output using:
	//
	//	sample = ExpFloat64() / desiredRateParameter
**/
function expFloat64():GoFloat64 {
	return _globalRand.expFloat64();
}

/**
	// seed rng x[n+1] = 48271 * x[n] mod (2**31 - 1)
**/
function _seedrand(_x:GoInt32):GoInt32 {
	{};
	var _hi:GoInt32 = _x / (44488 : GoInt32);
	var _lo:GoInt32 = _x % (44488 : GoInt32);
	_x = ((48271 : GoInt32) * _lo) - ((3399 : GoInt32) * _hi);
	if (_x < (0:GoInt32)) {
		_x = _x + ((2147483647 : GoInt32));
	};
	return _x;
}

/**
	// NewZipf returns a Zipf variate generator.
	// The generator generates values k ∈ [0, imax]
	// such that P(k) is proportional to (v + k) ** (-s).
	// Requirements: s > 1 and v >= 1.
**/
function newZipf(_r:Ref<Rand>, _s:GoFloat64, _v:GoFloat64, _imax:GoUInt64):Ref<Zipf> {
	var _z = ({} : Zipf);
	if ((_s <= (1 : GoFloat64)) || (_v < (1:GoFloat64))) {
		return null;
	};
	_z._r = _r;
	_z._imax = (_imax : GoFloat64);
	_z._v = _v;
	_z._q = _s;
	_z._oneminusQ = (1 : GoFloat64) - _z._q;
	_z._oneminusQinv = (1 : GoFloat64) / _z._oneminusQ;
	_z._hxm = _z._h(_z._imax + (0.5 : GoFloat64));
	_z._hx0minusHxm = (_z._h((0.5 : GoFloat64)) - stdgo.math.Math.exp(stdgo.math.Math.log(_z._v) * (-_z._q))) - _z._hxm;
	_z._s = (1 : GoFloat64) - _z._hinv(_z._h((1.5 : GoFloat64)) - stdgo.math.Math.exp(-_z._q * stdgo.math.Math.log(_z._v + (1 : GoFloat64))));
	return _z;
}

class Rand_asInterface {
	/**
		// Read generates len(p) random bytes and writes them into p. It
		// always returns len(p) and a nil error.
		// Read should not be called concurrently with any other Rand method.
	**/
	@:keep
	public function read(_p:Slice<GoByte>):{var _0:GoInt; var _1:Error;}
		return __self__.value.read(_p);

	/**
		// Shuffle pseudo-randomizes the order of elements.
		// n is the number of elements. Shuffle panics if n < 0.
		// swap swaps the elements with indexes i and j.
	**/
	@:keep
	public function shuffle(_n:GoInt, _swap:(_i:GoInt, _j:GoInt) -> Void):Void
		__self__.value.shuffle(_n, _swap);

	/**
		// Perm returns, as a slice of n ints, a pseudo-random permutation of the integers
		// in the half-open interval [0,n).
	**/
	@:keep
	public function perm(_n:GoInt):Slice<GoInt>
		return __self__.value.perm(_n);

	/**
		// Float32 returns, as a float32, a pseudo-random number in the half-open interval [0.0,1.0).
	**/
	@:keep
	public function float32():GoFloat32
		return __self__.value.float32();

	/**
		// Float64 returns, as a float64, a pseudo-random number in the half-open interval [0.0,1.0).
	**/
	@:keep
	public function float64():GoFloat64
		return __self__.value.float64();

	/**
		// Intn returns, as an int, a non-negative pseudo-random number in the half-open interval [0,n).
		// It panics if n <= 0.
	**/
	@:keep
	public function intn(_n:GoInt):GoInt
		return __self__.value.intn(_n);

	/**
		// int31n returns, as an int32, a non-negative pseudo-random number in the half-open interval [0,n).
		// n must be > 0, but int31n does not check this; the caller must ensure it.
		// int31n exists because Int31n is inefficient, but Go 1 compatibility
		// requires that the stream of values produced by math/rand remain unchanged.
		// int31n can thus only be used internally, by newly introduced APIs.
		//
		// For implementation details, see:
		// https://lemire.me/blog/2016/06/27/a-fast-alternative-to-the-modulo-reduction
		// https://lemire.me/blog/2016/06/30/fast-random-shuffling
	**/
	@:keep
	public function _int31n(_n:GoInt32):GoInt32
		return __self__.value._int31n(_n);

	/**
		// Int31n returns, as an int32, a non-negative pseudo-random number in the half-open interval [0,n).
		// It panics if n <= 0.
	**/
	@:keep
	public function int31n(_n:GoInt32):GoInt32
		return __self__.value.int31n(_n);

	/**
		// Int63n returns, as an int64, a non-negative pseudo-random number in the half-open interval [0,n).
		// It panics if n <= 0.
	**/
	@:keep
	public function int63n(_n:GoInt64):GoInt64
		return __self__.value.int63n(_n);

	/**
		// Int returns a non-negative pseudo-random int.
	**/
	@:keep
	public function int_():GoInt
		return __self__.value.int_();

	/**
		// Int31 returns a non-negative pseudo-random 31-bit integer as an int32.
	**/
	@:keep
	public function int31():GoInt32
		return __self__.value.int31();

	/**
		// Uint64 returns a pseudo-random 64-bit value as a uint64.
	**/
	@:keep
	public function uint64():GoUInt64
		return __self__.value.uint64();

	/**
		// Uint32 returns a pseudo-random 32-bit value as a uint32.
	**/
	@:keep
	public function uint32():GoUInt32
		return __self__.value.uint32();

	/**
		// Int63 returns a non-negative pseudo-random 63-bit integer as an int64.
	**/
	@:keep
	public function int63():GoInt64
		return __self__.value.int63();

	/**
		// Seed uses the provided seed value to initialize the generator to a deterministic state.
		// Seed should not be called concurrently with any other Rand method.
	**/
	@:keep
	public function seed(_seed:GoInt64):Void
		__self__.value.seed(_seed);

	/**
		// NormFloat64 returns a normally distributed float64 in
		// the range -math.MaxFloat64 through +math.MaxFloat64 inclusive,
		// with standard normal distribution (mean = 0, stddev = 1).
		// To produce a different normal distribution, callers can
		// adjust the output using:
		//
		//	sample = NormFloat64() * desiredStdDev + desiredMean
	**/
	@:keep
	public function normFloat64():GoFloat64
		return __self__.value.normFloat64();

	/**
		// ExpFloat64 returns an exponentially distributed float64 in the range
		// (0, +math.MaxFloat64] with an exponential distribution whose rate parameter
		// (lambda) is 1 and whose mean is 1/lambda (1).
		// To produce a distribution with a different rate parameter,
		// callers can adjust the output using:
		//
		//	sample = ExpFloat64() / desiredRateParameter
	**/
	@:keep
	public function expFloat64():GoFloat64
		return __self__.value.expFloat64();

	public function new(__self__, __type__) {
		this.__self__ = __self__;
		this.__type__ = __type__;
	}

	public function __underlying__()
		return new AnyInterface((__type__.kind() == stdgo.reflect.Reflect.ptr
			&& !stdgo.reflect.Reflect.isReflectTypeRef(__type__)) ? (__self__ : Dynamic) : (__self__.value : Dynamic),
			__type__);

	var __self__:Pointer<Rand>;
	var __type__:stdgo.reflect.Reflect.Type;
}

@:keep @:allow(stdgo.math.rand.Rand.Rand_asInterface) class Rand_static_extension {
	/**
		// Read generates len(p) random bytes and writes them into p. It
		// always returns len(p) and a nil error.
		// Read should not be called concurrently with any other Rand method.
	**/
	@:keep
	static public function read(_r:Ref<Rand>, _p:Slice<GoByte>):{var _0:GoInt; var _1:Error;} {
		var _n:GoInt = (0 : GoInt), _err:Error = (null : Error);
		{
			var __tmp__ = try {
				{value: Go.typeAssert((Go.toInterface(_r._src) : Ref<T_lockedSource>)), ok: true};
			} catch (_) {
				{value: (null : T_lockedSource), ok: false};
			}, _lk = __tmp__.value, _ok = __tmp__.ok;
			if (_ok) {
				return _lk._read(_p, Go.pointer(_r._readVal), Go.pointer(_r._readPos));
			};
		};
		return _read(_p, _r._src, Go.pointer(_r._readVal), Go.pointer(_r._readPos));
	}

	/**
		// Shuffle pseudo-randomizes the order of elements.
		// n is the number of elements. Shuffle panics if n < 0.
		// swap swaps the elements with indexes i and j.
	**/
	@:keep
	static public function shuffle(_r:Ref<Rand>, _n:GoInt, _swap:(_i:GoInt, _j:GoInt) -> Void):Void {
		if (_n < (0:GoInt)) {
			throw Go.toInterface(Go.str("invalid argument to Shuffle"));
		};
		var _i:GoInt = _n - (1 : GoInt);
		Go.cfor(_i > (2147483646 : GoInt), _i--, {
			var _j:GoInt = (_r.int63n((_i + (1 : GoInt) : GoInt64)) : GoInt);
			_swap(_i, _j);
		});
		Go.cfor(_i > (0 : GoInt), _i--, {
			var _j:GoInt = (_r._int31n((_i + (1 : GoInt) : GoInt32)) : GoInt);
			_swap(_i, _j);
		});
	}

	/**
		// Perm returns, as a slice of n ints, a pseudo-random permutation of the integers
		// in the half-open interval [0,n).
	**/
	@:keep
	static public function perm(_r:Ref<Rand>, _n:GoInt):Slice<GoInt> {
		var _m = new Slice<GoInt>((_n : GoInt).toBasic(), 0, ...[for (i in 0...(_n : GoInt).toBasic()) (0 : GoInt)]);
		{
			var _i:GoInt = (0 : GoInt);
			Go.cfor(_i < _n, _i++, {
				var _j:GoInt = _r.intn(_i + (1 : GoInt));
				_m[_i] = _m[_j];
				_m[_j] = _i;
			});
		};
		return _m;
	}

	/**
		// Float32 returns, as a float32, a pseudo-random number in the half-open interval [0.0,1.0).
	**/
	@:keep
	static public function float32(_r:Ref<Rand>):GoFloat32 {
		return stdgo.internal.Macro.controlFlow({
			@:label("again") var _f:GoFloat32 = (_r.float64() : GoFloat32);
			if (_f == (1 : GoFloat64)) {
				@:goto "again";
			};
			return _f;
		});
	}

	/**
		// Float64 returns, as a float64, a pseudo-random number in the half-open interval [0.0,1.0).
	**/
	@:keep
	static public function float64(_r:Ref<Rand>):GoFloat64 {
		return stdgo.internal.Macro.controlFlow({
			@:label("again") var _f:GoFloat64 = (_r.int63() : GoFloat64) / (9.223372036854776e+18 : GoFloat64);
			if (_f == (1 : GoFloat64)) {
				@:goto "again";
			};
			return _f;
		});
	}

	/**
		// Intn returns, as an int, a non-negative pseudo-random number in the half-open interval [0,n).
		// It panics if n <= 0.
	**/
	@:keep
	static public function intn(_r:Ref<Rand>, _n:GoInt):GoInt {
		if (_n <= (0 : GoInt)) {
			throw Go.toInterface(Go.str("invalid argument to Intn"));
		};
		if (_n <= (2147483647 : GoInt)) {
			return (_r.int31n((_n : GoInt32)) : GoInt);
		};
		return (_r.int63n((_n : GoInt64)) : GoInt);
	}

	/**
		// int31n returns, as an int32, a non-negative pseudo-random number in the half-open interval [0,n).
		// n must be > 0, but int31n does not check this; the caller must ensure it.
		// int31n exists because Int31n is inefficient, but Go 1 compatibility
		// requires that the stream of values produced by math/rand remain unchanged.
		// int31n can thus only be used internally, by newly introduced APIs.
		//
		// For implementation details, see:
		// https://lemire.me/blog/2016/06/27/a-fast-alternative-to-the-modulo-reduction
		// https://lemire.me/blog/2016/06/30/fast-random-shuffling
	**/
	@:keep
	static public function _int31n(_r:Ref<Rand>, _n:GoInt32):GoInt32 {
		var _v:GoUInt32 = _r.uint32();
		var _prod:GoUInt64 = (_v : GoUInt64) * (_n : GoUInt64);
		var _low:GoUInt32 = (_prod : GoUInt32);
		if (_low < (_n:GoUInt32)) {
			var _thresh:GoUInt32 = (-_n : GoUInt32) % (_n : GoUInt32);
			while (_low < _thresh) {
				_v = _r.uint32();
				_prod = (_v : GoUInt64) * (_n : GoUInt64);
				_low = (_prod : GoUInt32);
			};
		};
		return (_prod >> ("32" : GoUInt64) : GoInt32);
	}

	/**
		// Int31n returns, as an int32, a non-negative pseudo-random number in the half-open interval [0,n).
		// It panics if n <= 0.
	**/
	@:keep
	static public function int31n(_r:Ref<Rand>, _n:GoInt32):GoInt32 {
		if (_n <= (0 : GoInt32)) {
			throw Go.toInterface(Go.str("invalid argument to Int31n"));
		};
		if (_n & (_n - (1 : GoInt32)) == ((0 : GoInt32))) {
			return _r.int31() & (_n - (1 : GoInt32));
		};
		var _max:GoInt32 = (("2147483647" : GoUInt32) - ((("2147483648" : GoUInt32) : GoUInt32) % (_n : GoUInt32)) : GoInt32);
		var _v:GoInt32 = _r.int31();
		while (_v > _max) {
			_v = _r.int31();
		};
		return _v % _n;
	}

	/**
		// Int63n returns, as an int64, a non-negative pseudo-random number in the half-open interval [0,n).
		// It panics if n <= 0.
	**/
	@:keep
	static public function int63n(_r:Ref<Rand>, _n:GoInt64):GoInt64 {
		if (_n <= ("0" : GoInt64)) {
			throw Go.toInterface(Go.str("invalid argument to Int63n"));
		};
		if (_n & (_n - (("1" : GoInt64) : GoInt64)) == (("0" : GoInt64))) {
			return _r.int63() & (_n - (("1" : GoInt64) : GoInt64));
		};
		var _max:GoInt64 = (("9223372036854775807" : GoUInt64) - ((("9223372036854775808" : GoUInt64) : GoUInt64) % (_n : GoUInt64)) : GoInt64);
		var _v:GoInt64 = _r.int63();
		while (_v > _max) {
			_v = _r.int63();
		};
		return _v % _n;
	}

	/**
		// Int returns a non-negative pseudo-random int.
	**/
	@:keep
	static public function int_(_r:Ref<Rand>):GoInt {
		var _u:GoUInt = (_r.int63() : GoUInt);
		return ((_u << (("1" : GoUInt64) : GoUInt64)) >> ("1" : GoUInt64) : GoInt);
	}

	/**
		// Int31 returns a non-negative pseudo-random 31-bit integer as an int32.
	**/
	@:keep
	static public function int31(_r:Ref<Rand>):GoInt32 {
		return (_r.int63() >> ("32" : GoUInt64):GoInt32);
	}

	/**
		// Uint64 returns a pseudo-random 64-bit value as a uint64.
	**/
	@:keep
	static public function uint64(_r:Ref<Rand>):GoUInt64 {
		if (_r._s64 != null) {
			return _r._s64.uint64();
		};
		return ((_r.int63() : GoUInt64) >> (("31" : GoUInt64) : GoUInt64)) | ((_r.int63() : GoUInt64) << (("32" : GoUInt64) : GoUInt64));
	}

	/**
		// Uint32 returns a pseudo-random 32-bit value as a uint32.
	**/
	@:keep
	static public function uint32(_r:Ref<Rand>):GoUInt32 {
		return (_r.int63() >> ("31" : GoUInt64):GoUInt32);
	}

	/**
		// Int63 returns a non-negative pseudo-random 63-bit integer as an int64.
	**/
	@:keep
	static public function int63(_r:Ref<Rand>):GoInt64 {
		return _r._src.int63();
	}

	/**
		// Seed uses the provided seed value to initialize the generator to a deterministic state.
		// Seed should not be called concurrently with any other Rand method.
	**/
	@:keep
	static public function seed(_r:Ref<Rand>, _seed:GoInt64):Void {
		{
			var __tmp__ = try {
				{value: Go.typeAssert((Go.toInterface(_r._src) : Ref<T_lockedSource>)), ok: true};
			} catch (_) {
				{value: (null : T_lockedSource), ok: false};
			}, _lk = __tmp__.value, _ok = __tmp__.ok;
			if (_ok) {
				_lk._seedPos(_seed, Go.pointer(_r._readPos));
				return;
			};
		};
		_r._src.seed(_seed);
		_r._readPos = (0 : GoInt8);
	}

	/**
		// NormFloat64 returns a normally distributed float64 in
		// the range -math.MaxFloat64 through +math.MaxFloat64 inclusive,
		// with standard normal distribution (mean = 0, stddev = 1).
		// To produce a different normal distribution, callers can
		// adjust the output using:
		//
		//	sample = NormFloat64() * desiredStdDev + desiredMean
	**/
	@:keep
	static public function normFloat64(_r:Ref<Rand>):GoFloat64 {
		while (true) {
			var _j:GoInt32 = (_r.uint32() : GoInt32);
			var _i:GoInt32 = _j & (127 : GoInt32);
			var _x:GoFloat64 = (_j : GoFloat64) * (_wn[_i] : GoFloat64);
			if (_absInt32(_j) < _kn[_i]) {
				return _x;
			};
			if (_i == ((0 : GoInt32))) {
				while (true) {
					_x = -stdgo.math.Math.log(_r.float64()) * (0.29047645161474317 : GoFloat64);
					var _y:GoFloat64 = -stdgo.math.Math.log(_r.float64());
					if ((_y + _y) >= (_x * _x)) {
						break;
					};
				};
				if (_j > (0 : GoInt32)) {
					return (3.442619855899 : GoFloat64) + _x;
				};
				return (-3.442619855899 : GoFloat64) - _x;
			};
			if ((_fn[_i]
				+ ((_r.float64() : GoFloat32) * (_fn[_i - (1 : GoInt32)] - _fn[_i]))) < (stdgo.math.Math.exp(((-0.5 : GoFloat64) * _x) * _x) : GoFloat32)) {
				return _x;
			};
		};
	}

	/**
		// ExpFloat64 returns an exponentially distributed float64 in the range
		// (0, +math.MaxFloat64] with an exponential distribution whose rate parameter
		// (lambda) is 1 and whose mean is 1/lambda (1).
		// To produce a distribution with a different rate parameter,
		// callers can adjust the output using:
		//
		//	sample = ExpFloat64() / desiredRateParameter
	**/
	@:keep
	static public function expFloat64(_r:Ref<Rand>):GoFloat64 {
		while (true) {
			var _j:GoUInt32 = _r.uint32();
			var _i:GoUInt32 = _j & ("255" : GoUInt32);
			var _x:GoFloat64 = (_j : GoFloat64) * (_we[_i] : GoFloat64);
			if (_j < _ke[_i]) {
				return _x;
			};
			if (_i == (("0" : GoUInt32))) {
				return (7.69711747013105 : GoFloat64) - stdgo.math.Math.log(_r.float64());
			};
			if ((_fe[_i] + ((_r.float64() : GoFloat32) * (_fe[_i - ("1" : GoUInt32)] - _fe[_i]))) < (stdgo.math.Math.exp(-_x) : GoFloat32)) {
				return _x;
			};
		};
	}
}

private class T_lockedSource_asInterface {
	/**
		// read implements Read for a lockedSource without a race condition.
	**/
	@:keep
	public function _read(_p:Slice<GoByte>, _readVal:Pointer<GoInt64>, _readPos:Pointer<GoInt8>):{var _0:GoInt; var _1:Error;}
		return __self__.value._read(_p, _readVal, _readPos);

	/**
		// seedPos implements Seed for a lockedSource without a race condition.
	**/
	@:keep
	public function _seedPos(_seed:GoInt64, _readPos:Pointer<GoInt8>):Void
		__self__.value._seedPos(_seed, _readPos);

	@:keep
	public function seed(_seed:GoInt64):Void
		__self__.value.seed(_seed);

	@:keep
	public function uint64():GoUInt64
		return __self__.value.uint64();

	@:keep
	public function int63():GoInt64
		return __self__.value.int63();

	public function new(__self__, __type__) {
		this.__self__ = __self__;
		this.__type__ = __type__;
	}

	public function __underlying__()
		return new AnyInterface((__type__.kind() == stdgo.reflect.Reflect.ptr
			&& !stdgo.reflect.Reflect.isReflectTypeRef(__type__)) ? (__self__ : Dynamic) : (__self__.value : Dynamic),
			__type__);

	var __self__:Pointer<T_lockedSource>;
	var __type__:stdgo.reflect.Reflect.Type;
}

@:keep @:allow(stdgo.math.rand.Rand.T_lockedSource_asInterface) class T_lockedSource_static_extension {
	/**
		// read implements Read for a lockedSource without a race condition.
	**/
	@:keep
	static public function _read(_r:Ref<T_lockedSource>, _p:Slice<GoByte>, _readVal:Pointer<GoInt64>, _readPos:Pointer<GoInt8>):{var _0:GoInt; var _1:Error;} {
		var _n:GoInt = (0 : GoInt), _err:Error = (null : Error);
		_r._lk.lock();
		{
			var __tmp__ = stdgo.math.rand.Rand._read(_p, Go.asInterface(_r._src), _readVal, _readPos);
			_n = __tmp__._0;
			_err = __tmp__._1;
		};
		_r._lk.unlock();
		return {_0: _n, _1: _err};
	}

	/**
		// seedPos implements Seed for a lockedSource without a race condition.
	**/
	@:keep
	static public function _seedPos(_r:Ref<T_lockedSource>, _seed:GoInt64, _readPos:Pointer<GoInt8>):Void {
		_r._lk.lock();
		_r._src.seed(_seed);
		_readPos.value = (0 : GoInt8);
		_r._lk.unlock();
	}

	@:keep
	static public function seed(_r:Ref<T_lockedSource>, _seed:GoInt64):Void {
		_r._lk.lock();
		_r._src.seed(_seed);
		_r._lk.unlock();
	}

	@:keep
	static public function uint64(_r:Ref<T_lockedSource>):GoUInt64 {
		var _n:GoUInt64 = (0 : GoUInt64);
		_r._lk.lock();
		_n = _r._src.uint64();
		_r._lk.unlock();
		return _n;
	}

	@:keep
	static public function int63(_r:Ref<T_lockedSource>):GoInt64 {
		var _n:GoInt64 = (0 : GoInt64);
		_r._lk.lock();
		_n = _r._src.int63();
		_r._lk.unlock();
		return _n;
	}
}

private class T_rngSource_asInterface {
	/**
		// Uint64 returns a non-negative pseudo-random 64-bit integer as an uint64.
	**/
	@:keep
	public function uint64():GoUInt64
		return __self__.value.uint64();

	/**
		// Int63 returns a non-negative pseudo-random 63-bit integer as an int64.
	**/
	@:keep
	public function int63():GoInt64
		return __self__.value.int63();

	/**
		// Seed uses the provided seed value to initialize the generator to a deterministic state.
	**/
	@:keep
	public function seed(_seed:GoInt64):Void
		__self__.value.seed(_seed);

	public function new(__self__, __type__) {
		this.__self__ = __self__;
		this.__type__ = __type__;
	}

	public function __underlying__()
		return new AnyInterface((__type__.kind() == stdgo.reflect.Reflect.ptr
			&& !stdgo.reflect.Reflect.isReflectTypeRef(__type__)) ? (__self__ : Dynamic) : (__self__.value : Dynamic),
			__type__);

	var __self__:Pointer<T_rngSource>;
	var __type__:stdgo.reflect.Reflect.Type;
}

@:keep @:allow(stdgo.math.rand.Rand.T_rngSource_asInterface) class T_rngSource_static_extension {
	/**
		// Uint64 returns a non-negative pseudo-random 64-bit integer as an uint64.
	**/
	@:keep
	static public function uint64(_rng:Ref<T_rngSource>):GoUInt64 {
		_rng._tap--;
		if (_rng._tap < (0:GoInt)) {
			_rng._tap = _rng._tap + ((607 : GoInt));
		};
		_rng._feed--;
		if (_rng._feed < (0:GoInt)) {
			_rng._feed = _rng._feed + ((607 : GoInt));
		};
		var _x:GoInt64 = _rng._vec[_rng._feed] + _rng._vec[_rng._tap];
		_rng._vec[_rng._feed] = _x;
		return (_x : GoUInt64);
	}

	/**
		// Int63 returns a non-negative pseudo-random 63-bit integer as an int64.
	**/
	@:keep
	static public function int63(_rng:Ref<T_rngSource>):GoInt64 {
		return (_rng.uint64() & ("9223372036854775807" : GoUInt64):GoInt64);
	}

	/**
		// Seed uses the provided seed value to initialize the generator to a deterministic state.
	**/
	@:keep
	static public function seed(_rng:Ref<T_rngSource>, _seed:GoInt64):Void {
		_rng._tap = (0 : GoInt);
		_rng._feed = (334 : GoInt);
		_seed = _seed % ("2147483647" : GoInt64);
		if (_seed < ("0":GoInt64)) {
			_seed = _seed + (("2147483647" : GoInt64));
		};
		if (_seed == (("0" : GoInt64))) {
			_seed = ("89482311" : GoInt64);
		};
		var _x:GoInt32 = (_seed : GoInt32);
		{
			var _i:GoInt = (-20 : GoInt);
			Go.cfor(_i < (607:GoInt), _i++, {
				_x = _seedrand(_x);
				if (_i >= (0 : GoInt)) {
					var _u:GoInt64 = (0 : GoInt64);
					_u = (_x : GoInt64) << ("40" : GoUInt64);
					_x = _seedrand(_x);
					_u = _u ^ ((_x : GoInt64) << (("20" : GoUInt64) : GoUInt64));
					_x = _seedrand(_x);
					_u = _u ^ ((_x : GoInt64));
					_u = _u ^ (_rngCooked[_i]);
					_rng._vec[_i] = _u;
				};
			});
		};
	}
}

class Zipf_asInterface {
	/**
		// Uint64 returns a value drawn from the Zipf distribution described
		// by the Zipf object.
	**/
	@:keep
	public function uint64():GoUInt64
		return __self__.value.uint64();

	@:keep
	public function _hinv(_x:GoFloat64):GoFloat64
		return __self__.value._hinv(_x);

	@:keep
	public function _h(_x:GoFloat64):GoFloat64
		return __self__.value._h(_x);

	public function new(__self__, __type__) {
		this.__self__ = __self__;
		this.__type__ = __type__;
	}

	public function __underlying__()
		return new AnyInterface((__type__.kind() == stdgo.reflect.Reflect.ptr
			&& !stdgo.reflect.Reflect.isReflectTypeRef(__type__)) ? (__self__ : Dynamic) : (__self__.value : Dynamic),
			__type__);

	var __self__:Pointer<Zipf>;
	var __type__:stdgo.reflect.Reflect.Type;
}

@:keep @:allow(stdgo.math.rand.Rand.Zipf_asInterface) class Zipf_static_extension {
	/**
		// Uint64 returns a value drawn from the Zipf distribution described
		// by the Zipf object.
	**/
	@:keep
	static public function uint64(_z:Ref<Zipf>):GoUInt64 {
		if (_z == null) {
			throw Go.toInterface(Go.str("rand: nil Zipf"));
		};
		var _k:GoFloat64 = (0 : GoFloat64);
		while (true) {
			var _r:GoFloat64 = _z._r.float64();
			var _ur:GoFloat64 = _z._hxm + (_r * _z._hx0minusHxm);
			var _x:GoFloat64 = _z._hinv(_ur);
			_k = stdgo.math.Math.floor(_x + (0.5 : GoFloat64));
			if ((_k - _x) <= _z._s) {
				break;
			};
			if (_ur >= (_z._h(_k + (0.5 : GoFloat64)) - stdgo.math.Math.exp(-stdgo.math.Math.log(_k + _z._v) * _z._q))) {
				break;
			};
		};
		return (_k : GoUInt64);
	}

	@:keep
	static public function _hinv(_z:Ref<Zipf>, _x:GoFloat64):GoFloat64 {
		return stdgo.math.Math.exp(_z._oneminusQinv * stdgo.math.Math.log(_z._oneminusQ * _x)) - _z._v;
	}

	@:keep
	static public function _h(_z:Ref<Zipf>, _x:GoFloat64):GoFloat64 {
		return stdgo.math.Math.exp(_z._oneminusQ * stdgo.math.Math.log(_z._v + _x)) * _z._oneminusQinv;
	}
}
