package stdgo.mime.multipart;
var errMessageTooLarge(get, set) : stdgo.Error;
private function get_errMessageTooLarge():stdgo.Error return stdgo._internal.mime.multipart.Multipart_errmessagetoolarge.errMessageTooLarge;
private function set_errMessageTooLarge(v:stdgo.Error):stdgo.Error {
        stdgo._internal.mime.multipart.Multipart_errmessagetoolarge.errMessageTooLarge = v;
        return v;
    }
typedef File = stdgo._internal.mime.multipart.Multipart_file.File;
typedef Form = stdgo._internal.mime.multipart.Multipart_form.Form;
typedef FileHeader = stdgo._internal.mime.multipart.Multipart_fileheader.FileHeader;
typedef Part = stdgo._internal.mime.multipart.Multipart_part.Part;
typedef Reader = stdgo._internal.mime.multipart.Multipart_reader.Reader;
typedef Writer = stdgo._internal.mime.multipart.Multipart_writer.Writer;
typedef FormPointer = stdgo._internal.mime.multipart.Multipart_formpointer.FormPointer;
typedef FileHeaderPointer = stdgo._internal.mime.multipart.Multipart_fileheaderpointer.FileHeaderPointer;
typedef PartPointer = stdgo._internal.mime.multipart.Multipart_partpointer.PartPointer;
typedef ReaderPointer = stdgo._internal.mime.multipart.Multipart_readerpointer.ReaderPointer;
typedef WriterPointer = stdgo._internal.mime.multipart.Multipart_writerpointer.WriterPointer;
/**
    * 
    * Package multipart implements MIME multipart parsing, as defined in RFC
    * 2046.
    * 
    * The implementation is sufficient for HTTP (RFC 2388) and the multipart
    * bodies generated by popular browsers.
    * 
    * # Limits
    * 
    * To protect against malicious inputs, this package sets limits on the size
    * of the MIME data it processes.
    * 
    * Reader.NextPart and Reader.NextRawPart limit the number of headers in a
    * part to 10000 and Reader.ReadForm limits the total number of headers in all
    * FileHeaders to 10000.
    * These limits may be adjusted with the GODEBUG=multipartmaxheaders=<values>
    * setting.
    * 
    * Reader.ReadForm further limits the number of parts in a form to 1000.
    * This limit may be adjusted with the GODEBUG=multipartmaxparts=<value>
    * setting.
    * 
    * 
    * Copyright 2023 The Go Authors. All rights reserved.
    * Use of this source code is governed by a BSD-style
    * license that can be found in the LICENSE file.
**/
class Multipart {
    /**
        * NewReader creates a new multipart Reader reading from r using the
        * given MIME boundary.
        * 
        * The boundary is usually obtained from the "boundary" parameter of
        * the message's "Content-Type" header. Use mime.ParseMediaType to
        * parse such headers.
    **/
    static public inline function newReader(_r:stdgo._internal.io.Io_reader.Reader, _boundary:stdgo.GoString):stdgo.Ref<stdgo._internal.mime.multipart.Multipart_reader.Reader> return stdgo._internal.mime.multipart.Multipart_newreader.newReader(_r, _boundary);
    /**
        * NewWriter returns a new multipart Writer with a random boundary,
        * writing to w.
    **/
    static public inline function newWriter(_w:stdgo._internal.io.Io_writer.Writer):stdgo.Ref<stdgo._internal.mime.multipart.Multipart_writer.Writer> return stdgo._internal.mime.multipart.Multipart_newwriter.newWriter(_w);
}
