package stdgo.regexp_test;

import stdgo.StdGoTypes;
import stdgo.Error;
import stdgo.Go;
import stdgo.GoString;
import stdgo.Pointer;
import stdgo.Slice;
import stdgo.GoArray;
import stdgo.GoMap;
import stdgo.Chan;

private var _tests:Slice<stdgo.testing.Testing.InternalTest> = (new Slice<stdgo.testing.Testing.InternalTest>(0, 0,
	(new stdgo.testing.Testing.InternalTest(Go.str("TestGoodCompile"), stdgo.regexp.Regexp.testGoodCompile) : stdgo.testing.Testing.InternalTest),
	(new stdgo.testing.Testing.InternalTest(Go.str("TestBadCompile"), stdgo.regexp.Regexp.testBadCompile) : stdgo.testing.Testing.InternalTest),
	(new stdgo.testing.Testing.InternalTest(Go.str("TestMatch"), stdgo.regexp.Regexp.testMatch) : stdgo.testing.Testing.InternalTest),
	(new stdgo.testing.Testing.InternalTest(Go.str("TestMatchFunction"), stdgo.regexp.Regexp.testMatchFunction) : stdgo.testing.Testing.InternalTest),
	(new stdgo.testing.Testing.InternalTest(Go.str("TestCopyMatch"), stdgo.regexp.Regexp.testCopyMatch) : stdgo.testing.Testing.InternalTest),
	(new stdgo.testing.Testing.InternalTest(Go.str("TestReplaceAll"), stdgo.regexp.Regexp.testReplaceAll) : stdgo.testing.Testing.InternalTest),
	(new stdgo.testing.Testing.InternalTest(Go.str("TestReplaceAllLiteral"), stdgo.regexp.Regexp.testReplaceAllLiteral) : stdgo.testing.Testing.InternalTest),
	(new stdgo.testing.Testing.InternalTest(Go.str("TestReplaceAllFunc"), stdgo.regexp.Regexp.testReplaceAllFunc) : stdgo.testing.Testing.InternalTest),
	(new stdgo.testing.Testing.InternalTest(Go.str("TestQuoteMeta"), stdgo.regexp.Regexp.testQuoteMeta) : stdgo.testing.Testing.InternalTest),
	(new stdgo.testing.Testing.InternalTest(Go.str("TestLiteralPrefix"), stdgo.regexp.Regexp.testLiteralPrefix) : stdgo.testing.Testing.InternalTest),
	(new stdgo.testing.Testing.InternalTest(Go.str("TestSubexp"), stdgo.regexp.Regexp.testSubexp) : stdgo.testing.Testing.InternalTest),
	(new stdgo.testing.Testing.InternalTest(Go.str("TestSplit"), stdgo.regexp.Regexp.testSplit) : stdgo.testing.Testing.InternalTest),
	(new stdgo.testing.Testing.InternalTest(Go.str("TestParseAndCompile"), stdgo.regexp.Regexp.testParseAndCompile) : stdgo.testing.Testing.InternalTest),
	(new stdgo.testing.Testing.InternalTest(Go.str("TestOnePassCutoff"), stdgo.regexp.Regexp.testOnePassCutoff) : stdgo.testing.Testing.InternalTest),
	(new stdgo.testing.Testing.InternalTest(Go.str("TestSwitchBacktrack"), stdgo.regexp.Regexp.testSwitchBacktrack) : stdgo.testing.Testing.InternalTest),
	(new stdgo.testing.Testing.InternalTest(Go.str("TestDeepEqual"), stdgo.regexp.Regexp.testDeepEqual) : stdgo.testing.Testing.InternalTest),
	(new stdgo.testing.Testing.InternalTest(Go.str("TestMinInputLen"), stdgo.regexp.Regexp.testMinInputLen) : stdgo.testing.Testing.InternalTest),
	(new stdgo.testing.Testing.InternalTest(Go.str("TestRE2Exhaustive"), stdgo.regexp.Regexp.testRE2Exhaustive) : stdgo.testing.Testing.InternalTest),
	(new stdgo.testing.Testing.InternalTest(Go.str("TestRE2Search"), stdgo.regexp.Regexp.testRE2Search) : stdgo.testing.Testing.InternalTest),
	(new stdgo.testing.Testing.InternalTest(Go.str("TestFowler"), stdgo.regexp.Regexp.testFowler) : stdgo.testing.Testing.InternalTest),
	(new stdgo.testing.Testing.InternalTest(Go.str("TestLongest"), stdgo.regexp.Regexp.testLongest) : stdgo.testing.Testing.InternalTest),
	(new stdgo.testing.Testing.InternalTest(Go.str("TestProgramTooLongForBacktrack"),
		stdgo.regexp.Regexp.testProgramTooLongForBacktrack) : stdgo.testing.Testing.InternalTest),
	(new stdgo.testing.Testing.InternalTest(Go.str("TestFind"), stdgo.regexp.Regexp.testFind) : stdgo.testing.Testing.InternalTest),
	(new stdgo.testing.Testing.InternalTest(Go.str("TestFindString"), stdgo.regexp.Regexp.testFindString) : stdgo.testing.Testing.InternalTest),
	(new stdgo.testing.Testing.InternalTest(Go.str("TestFindIndex"), stdgo.regexp.Regexp.testFindIndex) : stdgo.testing.Testing.InternalTest),
	(new stdgo.testing.Testing.InternalTest(Go.str("TestFindStringIndex"), stdgo.regexp.Regexp.testFindStringIndex) : stdgo.testing.Testing.InternalTest),
	(new stdgo.testing.Testing.InternalTest(Go.str("TestFindReaderIndex"), stdgo.regexp.Regexp.testFindReaderIndex) : stdgo.testing.Testing.InternalTest),
	(new stdgo.testing.Testing.InternalTest(Go.str("TestFindAll"), stdgo.regexp.Regexp.testFindAll) : stdgo.testing.Testing.InternalTest),
	(new stdgo.testing.Testing.InternalTest(Go.str("TestFindAllString"), stdgo.regexp.Regexp.testFindAllString) : stdgo.testing.Testing.InternalTest),
	(new stdgo.testing.Testing.InternalTest(Go.str("TestFindAllIndex"), stdgo.regexp.Regexp.testFindAllIndex) : stdgo.testing.Testing.InternalTest),
	(new stdgo.testing.Testing.InternalTest(Go.str("TestFindAllStringIndex"),
		stdgo.regexp.Regexp.testFindAllStringIndex) : stdgo.testing.Testing.InternalTest),
	(new stdgo.testing.Testing.InternalTest(Go.str("TestFindSubmatch"), stdgo.regexp.Regexp.testFindSubmatch) : stdgo.testing.Testing.InternalTest),
	(new stdgo.testing.Testing.InternalTest(Go.str("TestFindStringSubmatch"),
		stdgo.regexp.Regexp.testFindStringSubmatch) : stdgo.testing.Testing.InternalTest),
	(new stdgo.testing.Testing.InternalTest(Go.str("TestFindSubmatchIndex"), stdgo.regexp.Regexp.testFindSubmatchIndex) : stdgo.testing.Testing.InternalTest),
	(new stdgo.testing.Testing.InternalTest(Go.str("TestFindStringSubmatchIndex"),
		stdgo.regexp.Regexp.testFindStringSubmatchIndex) : stdgo.testing.Testing.InternalTest),
	(new stdgo.testing.Testing.InternalTest(Go.str("TestFindReaderSubmatchIndex"),
		stdgo.regexp.Regexp.testFindReaderSubmatchIndex) : stdgo.testing.Testing.InternalTest),
	(new stdgo.testing.Testing.InternalTest(Go.str("TestFindAllSubmatch"), stdgo.regexp.Regexp.testFindAllSubmatch) : stdgo.testing.Testing.InternalTest),
	(new stdgo.testing.Testing.InternalTest(Go.str("TestFindAllStringSubmatch"),
		stdgo.regexp.Regexp.testFindAllStringSubmatch) : stdgo.testing.Testing.InternalTest),
	(new stdgo.testing.Testing.InternalTest(Go.str("TestFindAllSubmatchIndex"),
		stdgo.regexp.Regexp.testFindAllSubmatchIndex) : stdgo.testing.Testing.InternalTest),
	(new stdgo.testing.Testing.InternalTest(Go.str("TestFindAllStringSubmatchIndex"),
		stdgo.regexp.Regexp.testFindAllStringSubmatchIndex) : stdgo.testing.Testing.InternalTest),
	(new stdgo.testing.Testing.InternalTest(Go.str("TestMergeRuneSet"), stdgo.regexp.Regexp.testMergeRuneSet) : stdgo.testing.Testing.InternalTest),
	(new stdgo.testing.Testing.InternalTest(Go.str("TestCompileOnePass"), stdgo.regexp.Regexp.testCompileOnePass) : stdgo.testing.Testing.InternalTest),
	(new stdgo.testing.Testing.InternalTest(Go.str("TestRunOnePass"),
		stdgo.regexp.Regexp.testRunOnePass) : stdgo.testing.Testing.InternalTest)) : Slice<stdgo.testing.Testing.InternalTest>);

private var _benchmarks:Slice<stdgo.testing.Testing.InternalBenchmark> = (new Slice<stdgo.testing.Testing.InternalBenchmark>(0, 0,
	(new stdgo.testing.Testing.InternalBenchmark(Go.str("BenchmarkFind"), stdgo.regexp.Regexp.benchmarkFind) : stdgo.testing.Testing.InternalBenchmark),
	(new stdgo.testing.Testing.InternalBenchmark(Go.str("BenchmarkFindAllNoMatches"),
		stdgo.regexp.Regexp.benchmarkFindAllNoMatches) : stdgo.testing.Testing.InternalBenchmark),
	(new stdgo.testing.Testing.InternalBenchmark(Go.str("BenchmarkFindString"),
		stdgo.regexp.Regexp.benchmarkFindString) : stdgo.testing.Testing.InternalBenchmark),
	(new stdgo.testing.Testing.InternalBenchmark(Go.str("BenchmarkFindSubmatch"),
		stdgo.regexp.Regexp.benchmarkFindSubmatch) : stdgo.testing.Testing.InternalBenchmark),
	(new stdgo.testing.Testing.InternalBenchmark(Go.str("BenchmarkFindStringSubmatch"),
		stdgo.regexp.Regexp.benchmarkFindStringSubmatch) : stdgo.testing.Testing.InternalBenchmark),
	(new stdgo.testing.Testing.InternalBenchmark(Go.str("BenchmarkLiteral"), stdgo.regexp.Regexp.benchmarkLiteral) : stdgo.testing.Testing.InternalBenchmark),
	(new stdgo.testing.Testing.InternalBenchmark(Go.str("BenchmarkNotLiteral"),
		stdgo.regexp.Regexp.benchmarkNotLiteral) : stdgo.testing.Testing.InternalBenchmark),
	(new stdgo.testing.Testing.InternalBenchmark(Go.str("BenchmarkMatchClass"),
		stdgo.regexp.Regexp.benchmarkMatchClass) : stdgo.testing.Testing.InternalBenchmark),
	(new stdgo.testing.Testing.InternalBenchmark(Go.str("BenchmarkMatchClass_InRange"),
		stdgo.regexp.Regexp.benchmarkMatchClass_InRange) : stdgo.testing.Testing.InternalBenchmark),
	(new stdgo.testing.Testing.InternalBenchmark(Go.str("BenchmarkReplaceAll"),
		stdgo.regexp.Regexp.benchmarkReplaceAll) : stdgo.testing.Testing.InternalBenchmark),
	(new stdgo.testing.Testing.InternalBenchmark(Go.str("BenchmarkAnchoredLiteralShortNonMatch"),
		stdgo.regexp.Regexp.benchmarkAnchoredLiteralShortNonMatch) : stdgo.testing.Testing.InternalBenchmark),
	(new stdgo.testing.Testing.InternalBenchmark(Go.str("BenchmarkAnchoredLiteralLongNonMatch"),
		stdgo.regexp.Regexp.benchmarkAnchoredLiteralLongNonMatch) : stdgo.testing.Testing.InternalBenchmark),
	(new stdgo.testing.Testing.InternalBenchmark(Go.str("BenchmarkAnchoredShortMatch"),
		stdgo.regexp.Regexp.benchmarkAnchoredShortMatch) : stdgo.testing.Testing.InternalBenchmark),
	(new stdgo.testing.Testing.InternalBenchmark(Go.str("BenchmarkAnchoredLongMatch"),
		stdgo.regexp.Regexp.benchmarkAnchoredLongMatch) : stdgo.testing.Testing.InternalBenchmark),
	(new stdgo.testing.Testing.InternalBenchmark(Go.str("BenchmarkOnePassShortA"),
		stdgo.regexp.Regexp.benchmarkOnePassShortA) : stdgo.testing.Testing.InternalBenchmark),
	(new stdgo.testing.Testing.InternalBenchmark(Go.str("BenchmarkNotOnePassShortA"),
		stdgo.regexp.Regexp.benchmarkNotOnePassShortA) : stdgo.testing.Testing.InternalBenchmark),
	(new stdgo.testing.Testing.InternalBenchmark(Go.str("BenchmarkOnePassShortB"),
		stdgo.regexp.Regexp.benchmarkOnePassShortB) : stdgo.testing.Testing.InternalBenchmark),
	(new stdgo.testing.Testing.InternalBenchmark(Go.str("BenchmarkNotOnePassShortB"),
		stdgo.regexp.Regexp.benchmarkNotOnePassShortB) : stdgo.testing.Testing.InternalBenchmark),
	(new stdgo.testing.Testing.InternalBenchmark(Go.str("BenchmarkOnePassLongPrefix"),
		stdgo.regexp.Regexp.benchmarkOnePassLongPrefix) : stdgo.testing.Testing.InternalBenchmark),
	(new stdgo.testing.Testing.InternalBenchmark(Go.str("BenchmarkOnePassLongNotPrefix"),
		stdgo.regexp.Regexp.benchmarkOnePassLongNotPrefix) : stdgo.testing.Testing.InternalBenchmark),
	(new stdgo.testing.Testing.InternalBenchmark(Go.str("BenchmarkMatchParallelShared"),
		stdgo.regexp.Regexp.benchmarkMatchParallelShared) : stdgo.testing.Testing.InternalBenchmark),
	(new stdgo.testing.Testing.InternalBenchmark(Go.str("BenchmarkMatchParallelCopied"),
		stdgo.regexp.Regexp.benchmarkMatchParallelCopied) : stdgo.testing.Testing.InternalBenchmark),
	(new stdgo.testing.Testing.InternalBenchmark(Go.str("BenchmarkQuoteMetaAll"),
		stdgo.regexp.Regexp.benchmarkQuoteMetaAll) : stdgo.testing.Testing.InternalBenchmark),
	(new stdgo.testing.Testing.InternalBenchmark(Go.str("BenchmarkQuoteMetaNone"),
		stdgo.regexp.Regexp.benchmarkQuoteMetaNone) : stdgo.testing.Testing.InternalBenchmark),
	(new stdgo.testing.Testing.InternalBenchmark(Go.str("BenchmarkCompile"), stdgo.regexp.Regexp.benchmarkCompile) : stdgo.testing.Testing.InternalBenchmark),
	(new stdgo.testing.Testing.InternalBenchmark(Go.str("BenchmarkMatch"), stdgo.regexp.Regexp.benchmarkMatch) : stdgo.testing.Testing.InternalBenchmark),
	(new stdgo.testing.Testing.InternalBenchmark(Go.str("BenchmarkMatch_onepass_regex"),
		stdgo.regexp.Regexp.benchmarkMatch_onepass_regex) : stdgo.testing.Testing.InternalBenchmark)) : Slice<stdgo.testing.Testing.InternalBenchmark>);

private var _fuzzTargets:Slice<stdgo.testing.Testing.InternalFuzzTarget> = (new Slice<stdgo.testing.Testing.InternalFuzzTarget>(0,
	0) : Slice<stdgo.testing.Testing.InternalFuzzTarget>);

private var _examples:Slice<stdgo.testing.Testing.InternalExample> = (new Slice<stdgo.testing.Testing.InternalExample>(0, 0,
	(new stdgo.testing.Testing.InternalExample(Go.str("Example"), stdgo.regexp_test.Regexp_test.example, Go.str("true\ntrue\nfalse\nfalse\n"),
		false) : stdgo.testing.Testing.InternalExample),
	(new stdgo.testing.Testing.InternalExample(Go.str("ExampleMatch"), stdgo.regexp_test.Regexp_test.exampleMatch,
		Go.str("true <nil>\nfalse <nil>\nfalse error parsing regexp: missing closing ): `a(b`\n"), false) : stdgo.testing.Testing.InternalExample),
	(new stdgo.testing.Testing.InternalExample(Go.str("ExampleMatchString"), stdgo.regexp_test.Regexp_test.exampleMatchString,
		Go.str("true <nil>\nfalse <nil>\nfalse error parsing regexp: missing closing ): `a(b`\n"), false) : stdgo.testing.Testing.InternalExample),
	(new stdgo.testing.Testing.InternalExample(Go.str("ExampleQuoteMeta"), stdgo.regexp_test.Regexp_test.exampleQuoteMeta,
		Go.str("Escaping symbols like: \\.\\+\\*\\?\\(\\)\\|\\[\\]\\{\\}\\^\\$$\n"), false) : stdgo.testing.Testing.InternalExample),
	(new stdgo.testing.Testing.InternalExample(Go.str("ExampleRegexp_Find"), stdgo.regexp_test.Regexp_test.exampleRegexp_Find, Go.str("\"food\"\n"),
		false) : stdgo.testing.Testing.InternalExample),
	(new stdgo.testing.Testing.InternalExample(Go.str("ExampleRegexp_FindAll"), stdgo.regexp_test.Regexp_test.exampleRegexp_FindAll,
		Go.str("[\"food\" \"fool\"]\n"), false) : stdgo.testing.Testing.InternalExample),
	(new stdgo.testing.Testing.InternalExample(Go.str("ExampleRegexp_FindAllSubmatch"), stdgo.regexp_test.Regexp_test.exampleRegexp_FindAllSubmatch,
		Go.str("[[\"food\" \"d\"] [\"fool\" \"l\"]]\n"), false) : stdgo.testing.Testing.InternalExample),
	(new stdgo.testing.Testing.InternalExample(Go.str("ExampleRegexp_FindSubmatch"), stdgo.regexp_test.Regexp_test.exampleRegexp_FindSubmatch,
		Go.str("[\"food\" \"d\"]\n"), false) : stdgo.testing.Testing.InternalExample),
	(new stdgo.testing.Testing.InternalExample(Go.str("ExampleRegexp_Match"), stdgo.regexp_test.Regexp_test.exampleRegexp_Match, Go.str("true\nfalse\n"),
		false) : stdgo.testing.Testing.InternalExample),
	(new stdgo.testing.Testing.InternalExample(Go.str("ExampleRegexp_FindString"), stdgo.regexp_test.Regexp_test.exampleRegexp_FindString,
		Go.str("\"food\"\n\"\"\n"), false) : stdgo.testing.Testing.InternalExample),
	(new stdgo.testing.Testing.InternalExample(Go.str("ExampleRegexp_FindStringIndex"), stdgo.regexp_test.Regexp_test.exampleRegexp_FindStringIndex,
		Go.str("[1 3]\ntrue\n"), false) : stdgo.testing.Testing.InternalExample),
	(new stdgo.testing.Testing.InternalExample(Go.str("ExampleRegexp_FindStringSubmatch"), stdgo.regexp_test.Regexp_test.exampleRegexp_FindStringSubmatch,
		Go.str("[\"axxxbyc\" \"xxx\" \"y\"]\n[\"abzc\" \"\" \"z\"]\n"), false) : stdgo.testing.Testing.InternalExample),
	(new stdgo.testing.Testing.InternalExample(Go.str("ExampleRegexp_FindAllString"), stdgo.regexp_test.Regexp_test.exampleRegexp_FindAllString,
		Go.str("[ar an al]\n[ar an]\n[aa]\n[]\n"), false) : stdgo.testing.Testing.InternalExample),
	(new stdgo.testing.Testing.InternalExample(Go.str("ExampleRegexp_FindAllStringSubmatch"),
		stdgo.regexp_test.Regexp_test.exampleRegexp_FindAllStringSubmatch,
		Go.str("[[\"ab\" \"\"]]\n[[\"axxb\" \"xx\"]]\n[[\"ab\" \"\"] [\"axb\" \"x\"]]\n[[\"axxb\" \"xx\"] [\"ab\" \"\"]]\n"),
		false) : stdgo.testing.Testing.InternalExample),
	(new stdgo.testing.Testing.InternalExample(Go.str("ExampleRegexp_FindAllStringSubmatchIndex"),
		stdgo.regexp_test.Regexp_test.exampleRegexp_FindAllStringSubmatchIndex,
		Go.str("[[1 3 2 2]]\n[[1 5 2 4]]\n[[1 3 2 2] [4 7 5 6]]\n[[1 5 2 4] [6 8 7 7]]\n[]\n"), false) : stdgo.testing.Testing.InternalExample),
	(new stdgo.testing.Testing.InternalExample(Go.str("ExampleRegexp_FindSubmatchIndex"), stdgo.regexp_test.Regexp_test.exampleRegexp_FindSubmatchIndex,
		Go.str("[1 3 2 2]\n[1 5 2 4]\n[1 3 2 2]\n[1 5 2 4]\n[]\n"), false) : stdgo.testing.Testing.InternalExample),
	(new stdgo.testing.Testing.InternalExample(Go.str("ExampleRegexp_Longest"), stdgo.regexp_test.Regexp_test.exampleRegexp_Longest, Go.str("a\nab\n"),
		false) : stdgo.testing.Testing.InternalExample),
	(new stdgo.testing.Testing.InternalExample(Go.str("ExampleRegexp_MatchString"), stdgo.regexp_test.Regexp_test.exampleRegexp_MatchString,
		Go.str("false\ntrue\ntrue\n"), false) : stdgo.testing.Testing.InternalExample),
	(new stdgo.testing.Testing.InternalExample(Go.str("ExampleRegexp_NumSubexp"), stdgo.regexp_test.Regexp_test.exampleRegexp_NumSubexp, Go.str("0\n4\n"),
		false) : stdgo.testing.Testing.InternalExample),
	(new stdgo.testing.Testing.InternalExample(Go.str("ExampleRegexp_ReplaceAll"), stdgo.regexp_test.Regexp_test.exampleRegexp_ReplaceAll,
		Go.str("-T-T-\n--xx-\n---\n-W-xxW-\n"), false) : stdgo.testing.Testing.InternalExample),
	(new stdgo.testing.Testing.InternalExample(Go.str("ExampleRegexp_ReplaceAllLiteralString"),
		stdgo.regexp_test.Regexp_test.exampleRegexp_ReplaceAllLiteralString, Go.str("-T-T-\n-$$1-$$1-\n-$${1}-$${1}-\n"),
		false) : stdgo.testing.Testing.InternalExample),
	(new stdgo.testing.Testing.InternalExample(Go.str("ExampleRegexp_ReplaceAllString"), stdgo.regexp_test.Regexp_test.exampleRegexp_ReplaceAllString,
		Go.str("-T-T-\n--xx-\n---\n-W-xxW-\n"), false) : stdgo.testing.Testing.InternalExample),
	(new stdgo.testing.Testing.InternalExample(Go.str("ExampleRegexp_ReplaceAllStringFunc"), stdgo.regexp_test.Regexp_test.exampleRegexp_ReplaceAllStringFunc,
		Go.str("SeaFooD FooL\n"), false) : stdgo.testing.Testing.InternalExample),
	(new stdgo.testing.Testing.InternalExample(Go.str("ExampleRegexp_SubexpNames"), stdgo.regexp_test.Regexp_test.exampleRegexp_SubexpNames,
		Go.str("true\n[\"\" \"first\" \"last\"]\n$${last} $${first}\nTuring Alan\n"), false) : stdgo.testing.Testing.InternalExample),
	(new stdgo.testing.Testing.InternalExample(Go.str("ExampleRegexp_SubexpIndex"), stdgo.regexp_test.Regexp_test.exampleRegexp_SubexpIndex,
		Go.str("true\nlast => 2\nTuring\n"), false) : stdgo.testing.Testing.InternalExample),
	(new stdgo.testing.Testing.InternalExample(Go.str("ExampleRegexp_Split"), stdgo.regexp_test.Regexp_test.exampleRegexp_Split,
		Go.str("[b n n ]\n[]\n[banana]\n[b nana]\n[pi a]\n[]\n[pizza]\n[pi a]\n"), false) : stdgo.testing.Testing.InternalExample),
	(new stdgo.testing.Testing.InternalExample(Go.str("ExampleRegexp_Expand"), stdgo.regexp_test.Regexp_test.exampleRegexp_Expand,
		Go.str("option1=value1\noption2=value2\noption3=value3\n"), false) : stdgo.testing.Testing.InternalExample),
	(new stdgo.testing.Testing.InternalExample(Go.str("ExampleRegexp_ExpandString"), stdgo.regexp_test.Regexp_test.exampleRegexp_ExpandString,
		Go.str("option1=value1\noption2=value2\noption3=value3\n"), false) : stdgo.testing.Testing.InternalExample),
	(new stdgo.testing.Testing.InternalExample(Go.str("ExampleRegexp_FindIndex"), stdgo.regexp_test.Regexp_test.exampleRegexp_FindIndex,
		Go.str("[18 33]\noption1: value1\n"), false) : stdgo.testing.Testing.InternalExample),
	(new stdgo.testing.Testing.InternalExample(Go.str("ExampleRegexp_FindAllSubmatchIndex"), stdgo.regexp_test.Regexp_test.exampleRegexp_FindAllSubmatchIndex,
		Go.str("[18 33 18 25 27 33]\noption1: value1\noption1\nvalue1\n[35 50 35 42 44 50]\noption2: value2\noption2\nvalue2\n"),
		false) : stdgo.testing.Testing.InternalExample),
	(new stdgo.testing.Testing.InternalExample(Go.str("ExampleRegexp_FindAllIndex"), stdgo.regexp_test.Regexp_test.exampleRegexp_FindAllIndex,
		Go.str("[[1 3]]\n[[1 3] [4 6]]\n"), false) : stdgo.testing.Testing.InternalExample)) : Slice<stdgo.testing.Testing.InternalExample>);

function main():Void {
	var _m = stdgo.testing.Testing.mainStart(Go.asInterface((new stdgo.testing.internal.testdeps.Testdeps.TestDeps() : stdgo.testing.internal.testdeps.Testdeps.TestDeps)),
		_tests, _benchmarks,
		_fuzzTargets, _examples);
	Sys.exit(_m.run());
}

@:keep var _ = {
	try {
		stdgo.testing.internal.testdeps.Testdeps.importPath = Go.str("regexp");
	} catch (__exception__)
		if (__exception__.message != "__return__")
			throw __exception__;
	true;
};
