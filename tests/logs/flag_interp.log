=== RUN  TestEverything

-- PASS: TestEverything

=== RUN  TestGet

-- PASS: TestGet

=== RUN  TestUsage

-- PASS: TestUsage

=== RUN  TestParse

-- PASS: TestParse

=== RUN  TestFlagSetParse

-- PASS: TestFlagSetParse

=== RUN  TestUserDefined

-- PASS: TestUserDefined

=== RUN  TestUserDefinedFunc

-- PASS: TestUserDefinedFunc

=== RUN  TestUserDefinedForCommandLine

-- PASS: TestUserDefinedForCommandLine

=== RUN  TestUserDefinedBool

-- PASS: TestUserDefinedBool

=== RUN  TestUserDefinedBoolUsage

-- PASS: TestUserDefinedBoolUsage

=== RUN  TestSetOutput

-- PASS: TestSetOutput

=== RUN  TestChangingArgs

-- PASS: TestChangingArgs

=== RUN  TestHelp

-- PASS: TestHelp

=== RUN  TestPrintDefaults
got:
"  -A\tfor bootstrapping, allow 'any' type\n  -Alongflagname\n    \tdisable bounds checking\n  -C\ta boolean defaulting to true (default true)\n  -D path\n    \tset relative path for local imports\n  -E string\n    \tissue 23543 (default \"0\")\n  -F number\n    \ta non-zero number (default 2.7)\n  -G float\n    \ta float that defaults to zero\n  -M string\n    \ta multiline\n    \thelp\n    \tstring\n  -N int\n    \ta non-zero int (default 27)\n  -O\ta flag\n    \tmultiline help string (default true)\n  -V list\n    \ta list of strings (default [a b])\n  -Z int\n    \tan int that defaults to zero\n  -ZP0 value\n    \ta flag whose String method panics when it is zero\n  -ZP1 value\n    \ta flag whose String method panics when it is zero\n  -maxT timeout\n    \tset timeout for dial\n\npanic calling String method on zero _internal.flag_test.zeroPanicker for flag ZP0: panic!\npanic calling String method on zero _internal.flag_test.zeroPanicker for flag ZP1: panic!\n"
want:
"  -A\tfor bootstrapping, allow 'any' type\n  -Alongflagname\n    \tdisable bounds checking\n  -C\ta boolean defaulting to true (default true)\n  -D path\n    \tset relative path for local imports\n  -E string\n    \tissue 23543 (default \"0\")\n  -F number\n    \ta non-zero number (default 2.7)\n  -G float\n    \ta float that defaults to zero\n  -M string\n    \ta multiline\n    \thelp\n    \tstring\n  -N int\n    \ta non-zero int (default 27)\n  -O\ta flag\n    \tmultiline help string (default true)\n  -V list\n    \ta list of strings (default [a b])\n  -Z int\n    \tan int that defaults to zero\n  -ZP0 value\n    \ta flag whose String method panics when it is zero\n  -ZP1 value\n    \ta flag whose String method panics when it is zero\n  -maxT timeout\n    \tset timeout for dial\n\npanic calling String method on zero flag_test.zeroPanicker for flag ZP0: panic!\npanic calling String method on zero flag_test.zeroPanicker for flag ZP1: panic!\n"

-- FAIL: TestPrintDefaults

=== RUN  TestIntFlagOverflow

-- PASS: TestIntFlagOverflow

=== RUN  TestUsageOutput

-- PASS: TestUsageOutput

=== RUN  TestGetters

-- PASS: TestGetters

=== RUN  TestParseError

-- PASS: TestParseError

=== RUN  TestRangeError

-- PASS: TestRangeError

=== RUN  TestExitCode
Exception: :os.executable is not yet implemented
Called from stdgo._internal.testing.M_static_extension.run (golibs/stdgo/_internal/testing/Testing_m_static_extension.hx line 33 column 17)
Called from _internal.flag_test._Flag_test_testexitcode.Flag_test_testexitcode_Fields_.testExitCode (golibs/_internal/flag_test/Flag_test_testexitcode.hx line 4 column 9)
Called from stdgo._internal.internal.testenv._Testenv_musthaveexec.Testenv_musthaveexec_Fields_.mustHaveExec (golibs/stdgo/_internal/internal/testenv/Testenv_musthaveexec.hx line 4 column 9)
Called from stdgo._internal.sync.Once_static_extension.do_ (golibs/stdgo/_internal/sync/Sync_once_static_extension.hx line 11 column 9)
Called from local function #1 (golibs/stdgo/_internal/internal/testenv/Testenv_musthaveexec.hx line 5 column 80)
Called from stdgo._internal.internal.testenv._Testenv__tryexec.Testenv__tryexec_Fields_._tryExec (golibs/stdgo/_internal/internal/testenv/Testenv__tryexec.hx line 16 column 23)
Called from stdgo._internal.os._Os_executable.Os_executable_Fields_.executable (golibs/stdgo/_internal/os/Os_executable.hx line 2 column 74)

-- FAIL: TestExitCode

=== RUN  TestInvalidFlags

-- PASS: TestInvalidFlags

=== RUN  TestRedefinedFlags

-- PASS: TestRedefinedFlags

=== RUN  TestUserDefinedBoolFunc

-- PASS: TestUserDefinedBoolFunc

=== RUN  TestDefineAfterSet
DefineAfterSet
: expected panic("flag myFlag set at .*/flag_test.go:.* before being defined"), but got panic("flag myFlag set at ?:0 before being defined")

-- FAIL: TestDefineAfterSet

golibs/stdgo/_internal/testing/Testing_m_static_extension.hx:91: exitCode: 1 exitCodeReason: 
-- FAIL: TestDefineAfterSet
