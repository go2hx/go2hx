=== RUN  TestCopy

-- PASS: TestCopy

=== RUN  TestCopyNegative

-- PASS: TestCopyNegative

=== RUN  TestCopyBuffer

-- PASS: TestCopyBuffer

=== RUN  TestCopyBufferNil

-- PASS: TestCopyBufferNil

=== RUN  TestCopyReadFrom

-- PASS: TestCopyReadFrom

=== RUN  TestCopyWriteTo

-- PASS: TestCopyWriteTo

=== RUN  TestCopyPriority

-- PASS: TestCopyPriority

=== RUN  TestCopyReadErrWriteErr

-- PASS: TestCopyReadErrWriteErr

=== RUN  TestCopyN

-- PASS: TestCopyN

=== RUN  TestCopyNReadFrom

-- PASS: TestCopyNReadFrom

=== RUN  TestCopyNWriteTo

-- PASS: TestCopyNWriteTo

=== RUN  TestCopyNEOF

-- PASS: TestCopyNEOF

=== RUN  TestReadAtLeast

-- PASS: TestReadAtLeast

=== RUN  TestReadAtLeastWithDataAndEOF

-- PASS: TestReadAtLeastWithDataAndEOF

=== RUN  TestReadAtLeastWithDataAndError

-- PASS: TestReadAtLeastWithDataAndError

=== RUN  TestTeeReader

-- PASS: TestTeeReader

=== RUN  TestSectionReader_ReadAt

-- PASS: TestSectionReader_ReadAt

=== RUN  TestSectionReader_Seek

-- PASS: TestSectionReader_Seek

=== RUN  TestSectionReader_Size

-- PASS: TestSectionReader_Size

=== RUN  TestSectionReader_Max

-- PASS: TestSectionReader_Max

=== RUN  TestCopyLargeWriter

-- PASS: TestCopyLargeWriter

=== RUN  TestNopCloserWriterToForwarding

-- PASS: TestNopCloserWriterToForwarding

=== RUN  TestOffsetWriter_Seek
- SUBRUN  errWhence
- SUBRUN  errOffset
- SUBRUN  normal

-- PASS: TestOffsetWriter_Seek

=== RUN  TestOffsetWriter_WriteAt
-- SKIP: testOffsetWriter_WriteAt

-- PASS: TestOffsetWriter_WriteAt

=== RUN  TestWriteAt_PositionPriorToBase

-- PASS: TestWriteAt_PositionPriorToBase

=== RUN  TestOffsetWriter_Write
-- SKIP: testOffsetWriter_Write

-- PASS: TestOffsetWriter_Write

=== RUN  TestMultiReader

-- PASS: TestMultiReader

=== RUN  TestMultiReaderAsWriterTo

-- PASS: TestMultiReaderAsWriterTo

=== RUN  TestMultiWriter

-- PASS: TestMultiWriter

=== RUN  TestMultiWriter_String

-- PASS: TestMultiWriter_String

=== RUN  TestMultiWriter_WriteStringSingleAlloc
-- SKIP: testMultiWriter_WriteStringSingleAlloc

-- PASS: TestMultiWriter_WriteStringSingleAlloc

=== RUN  TestMultiWriter_StringCheckCall

-- PASS: TestMultiWriter_StringCheckCall

=== RUN  TestMultiWriterSingleChainFlatten
-- SKIP: testMultiWriterSingleChainFlatten

-- PASS: TestMultiWriterSingleChainFlatten

=== RUN  TestMultiWriterError

-- PASS: TestMultiWriterError

=== RUN  TestMultiReaderCopy

-- PASS: TestMultiReaderCopy

=== RUN  TestMultiWriterCopy

-- PASS: TestMultiWriterCopy

=== RUN  TestMultiReaderFlatten
-- SKIP: testMultiReaderFlatten

-- PASS: TestMultiReaderFlatten

=== RUN  TestMultiReaderSingleByteWithEOF

-- PASS: TestMultiReaderSingleByteWithEOF

=== RUN  TestMultiReaderFinalEOF

-- PASS: TestMultiReaderFinalEOF

=== RUN  TestMultiReaderFreesExhaustedReaders
-- SKIP: testMultiReaderFreesExhaustedReaders

-- PASS: TestMultiReaderFreesExhaustedReaders

=== RUN  TestInterleavedMultiReader

-- PASS: TestInterleavedMultiReader

=== RUN  TestPipe1
read: <invalid reflect.Value>

-- FAIL: TestPipe1

=== RUN  TestPipe2
wrote <invalid reflect.Value>, got %!d(MISSING)
write: <invalid reflect.Value>
wrote <invalid reflect.Value>, read got %!d(MISSING)
wrote <invalid reflect.Value>, got %!d(MISSING)
write: <invalid reflect.Value>
wrote <invalid reflect.Value>, read got %!d(MISSING)
wrote <invalid reflect.Value>, got %!d(MISSING)
write: <invalid reflect.Value>
wrote <invalid reflect.Value>, read got %!d(MISSING)
wrote <invalid reflect.Value>, got %!d(MISSING)
write: <invalid reflect.Value>
wrote <invalid reflect.Value>, read got %!d(MISSING)
wrote <invalid reflect.Value>, got %!d(MISSING)
write: <invalid reflect.Value>
wrote <invalid reflect.Value>, read got %!d(MISSING)
final read got <invalid reflect.Value>

-- FAIL: TestPipe2

=== RUN  TestPipe3
read: <invalid reflect.Value>Exception: __fail__
Called from stdgo__$internal_testing_T_$common_$static_$extension.failNow (/home/runner/work/go2hx/go2hx/golibs/std_io.js line 61125 column 23)
Called from stdgo__$internal_testing_T_$common_$static_$extension.fatalf (/home/runner/work/go2hx/go2hx/golibs/std_io.js line 61010 column 56)
Called from module at /home/runner/work/go2hx/go2hx/golibs/std_io.js:60564:58
Called from module at stdgo__$internal_testing_InternalTest._$internal_io_$test_Io_$test_$testpipe3_testPipe3 [as f] (/home/runner/work/go2hx/go2hx/golibs/std_io.js:19003:21)
Called from stdgo__$internal_testing_M_$static_$extension.run (/home/runner/work/go2hx/go2hx/golibs/std_io.js line 60326 column 9)
Called from ._$internal_iodottest_Iodottest_main (/home/runner/work/go2hx/go2hx/golibs/std_io.js line 52456 column 59)
Called from module at /home/runner/work/go2hx/go2hx/golibs/std_io.js:65874:1
Called from module at Object.<anonymous> (/home/runner/work/go2hx/go2hx/golibs/std_io.js:65875:3)

-- FAIL: TestPipe3

=== RUN  TestPipeReadClose
read from closed pipe: <invalid reflect.Value> want %!v(MISSING)
read from closed pipe: <invalid reflect.Value> want %!v(MISSING)
read from closed pipe: <invalid reflect.Value> want %!v(MISSING)

-- FAIL: TestPipeReadClose

=== RUN  TestPipeReadClose2

-- PASS: TestPipeReadClose2

=== RUN  TestPipeWriteClose
write on closed pipe: <invalid reflect.Value> want %!v(MISSING)

-- FAIL: TestPipeWriteClose

=== RUN  TestPipeWriteClose2

-- PASS: TestPipeWriteClose2

=== RUN  TestWriteEmpty

-- PASS: TestWriteEmpty

=== RUN  TestWriteNil

-- PASS: TestWriteNil

=== RUN  TestWriteAfterWriterClose
got: <invalid reflect.Value>; want: %!q(MISSING)Exception: __fail__
Called from stdgo__$internal_testing_T_$common_$static_$extension.failNow (/home/runner/work/go2hx/go2hx/golibs/std_io.js line 61125 column 23)
Called from stdgo__$internal_testing_T_$common_$static_$extension.fatalf (/home/runner/work/go2hx/go2hx/golibs/std_io.js line 61010 column 56)
Called from module at /home/runner/work/go2hx/go2hx/golibs/std_io.js:60564:58
Called from module at stdgo__$internal_testing_InternalTest._$internal_io_$test_Io_$test_$testwriteafterwriterclose_testWriteAfterWriterClose [as f] (/home/runner/work/go2hx/go2hx/golibs/std_io.js:19860:20)
Called from stdgo__$internal_testing_M_$static_$extension.run (/home/runner/work/go2hx/go2hx/golibs/std_io.js line 60326 column 9)
Called from ._$internal_iodottest_Iodottest_main (/home/runner/work/go2hx/go2hx/golibs/std_io.js line 52456 column 59)
Called from module at /home/runner/work/go2hx/go2hx/golibs/std_io.js:65874:1
Called from module at Object.<anonymous> (/home/runner/work/go2hx/go2hx/golibs/std_io.js:65875:3)

-- FAIL: TestWriteAfterWriterClose

=== RUN  TestPipeCloseError

-- PASS: TestPipeCloseError

=== RUN  TestPipeConcurrent
- SUBRUN  Write
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Read() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
got: <invalid reflect.Value>; want: %!q(MISSING)
- SUBRUN  Read
Write() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Write() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Write() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Write() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Write() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Write() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Write() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
Write() = (<invalid reflect.Value>, %!v(MISSING)); want (%!d(MISSING), nil)
got: <invalid reflect.Value>; want: %!q(MISSING)

-- FAIL: TestPipeConcurrent

./stdgo/_internal/testing/Testing_m_static_extension.hx:92: exitCode: 1 exitCodeReason: 
-- FAIL: TestPipeConcurrent
