{
    "name": "tinygo",
    "easy": [
        "tests/tinygo/testdata/alias.go\nx\napple\ntrue\nfalse\n",
        "tests/tinygo/testdata/binop.go\nstring equality\ntrue\nfalse\nfalse\ntrue\nstring inequality\nfalse\ntrue\nfalse\ntrue\nfalse\ntrue\nfalse\ntrue\nfalse\ntrue\nfalse\ntrue\ntrue\nfalse\nfalse\ntrue\nh \u003c h false\nh \u003c= h true\nh == h true\nh \u003e= h true\nh \u003e h false\narray equality\ntrue\nfalse\nfalse\nfalse\nfalse\ntrue\nstruct equality\ntrue\nfalse\nfalse\nfalse\nfalse\ntrue\ntrue\ntrue\nblank fields in structs\ntrue\nfalse\ntrue\nfalse\ncomplex numbers\ntrue\nfalse\nfalse\nfalse\ntrue\ntrue\nfalse\nfalse\nfalse\ntrue\ntrue\ntrue\nshifts\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\nconstant number\n0\n-2147483648 / -1: -2147483648\n-2147483648 % -1: 0\ninterface equality\na==b false\nb==b2 true\n",
        "tests/tinygo/testdata/calls.go\nhello from function pointer: 5\ndeferring...\nThing.Print: foo arg: bar\n...run as defer 3\n...run closure deferred: 4\n...run as defer 1\n...exported defer\nloop 3\nloop 2\nloop 1\nloop 0\n...extracted defer func  1\nCalled the correct function. i =  1\nbound method: foo\nthing inside closure: foo\ninside fp closure: foo 3\nThing.Print:  arg: functional args 1\nThing.Print: named thing arg: functional args 2\n",
        "tests/tinygo/testdata/float.go\n+3.141593e+000\n+6.666667e-001\n+1.666667e+000\n-3.333333e-001\n+1.333333e+000\n+3.333333e-001\n+6.666667e-001\n+1.666667e+000\n-3.333333e-001\n+1.333333e+000\n+3.333333e-001\n+6.666667e-001\n+6.666667e-001\n3 5 -2 -11\n0 255 -128 127 4294967295 -2147483648 2147483647 255 0 127 -128 0 0\n+5.300000e+001 -8.000000e+000 +2.000000e+001\n(+6.666667e-001+1.200000e+000i)\n+6.666667e-001\n+1.200000e+000\n(+6.666667e-001-2.000000e+000i)\n+6.666667e-001\n-2.000000e+000\n(+2.000000e+000+1.000000e+000i)\n(+2.000000e+000-2.000000e+000i)\n(+6.666667e-001-2.000000e+000i)\n(+6.666667e-001+1.200000e+000i)\ncomplex64 add:  (+2.000000e+000+1.000000e+001i)\ncomplex64 sub:  (+8.000000e+000+1.000000e+001i)\ncomplex64 mul:  (-1.500000e+001+2.000000e+000i)\ncomplex64 div:  (-1.666667e+000+7.333333e+000i)\ncomplex64 neg:  (-5.000000e+000-2.000000e+000i)\ncomplex128 add: (-3.000000e+000+8.000000e+000i)\ncomplex128 sub: (-7.000000e+000+8.000000e+000i)\ncomplex128 mul: (-1.000000e+001+1.000000e+001i)\ncomplex128 div: (-2.500000e+000+7.000000e+000i)\ncomplex128 neg: (+5.000000e+000-2.000000e+000i)\n",
        "tests/tinygo/testdata/go1.21.go\nmin/max: -3 5\nmin/max: -3.000000e+000 +5.000000e+000\ncleared s[:3]: 0 0 0 4 5\ncleared map:    0\nadded to cleared map:    four 1\n",
        "tests/tinygo/testdata/init.go\ninit\nmain\nv1: 3\nv2: 2 5\nv3: 4 4 2 7\nv4: 0 true\nv5: 0 false\nv6: false\nv7: 3 foo\nv8: barba\nv9: 3 2 3 4\n3\n3\n5\n5\n",
        "tests/tinygo/testdata/init_multi.go\ninit1\ninit2\nmain\n",
        "tests/tinygo/testdata/ldflags.go\nsomeGlobal: foobar\n",
        "tests/tinygo/testdata/print.go\nhello world!\n42\n100000000\nabc\na b c\n123\n123\n-123\n12345\n12345\n-12345\n12345678\n12345678\n-12345678\n123456789012\n123456789012\n-123456789012\n+3.140000e+000\n+3.140000e+000\n(+5.000000e+000+1.234500e+000i)\n(0:nil)\nmap[2]\ntrue false\n[0/0]nil\n[0/0]nil\n",
        "tests/tinygo/testdata/recover.go\n# simple recover\nrunning panic...\nrecovering...\nrecovered: panic\n\n# recover with result\nrunning panic...\nrecovered: panic\nresult: 3\n\n# nested defer frame\ndeferred nested function\nrecovered: panic\n\n# nested panic: panic inside recover\nrecovered 1: panic\nrecovered 2: foo\n\n# panic inside defer\nrecovered: panic\n\n# panic replace\npanic 1\npanic 2\nrecovered: panic 2\n",
        "tests/tinygo/testdata/string.go\n0 97\n1 98\n2 99\n3 252\n5 162\n7 8364\n10 66376\n14 176\n16 120\n0 97\n1 98\n2 99\n3 252\n4 162\n5 8364\n6 66376\n7 176\n8 120\nstring from runes: abc√º¬¢‚Ç¨êçà¬∞x\n",
        "tests/tinygo/testdata/structs.go\ntest0\ntest1 1\ntest2 1 2\ntest3 1 2 3\ntest4 1 2 3 4\ntest4b 1 2 3 4\ntest4bp 1 2 3 4\ntest5 1 2 3\ntest6 foo 3 5\ntest7 (0:nil) 8\ntest8 2 3 12 13 6\ntest9 nil\n",
        "tests/tinygo/testdata/trivialpanic.go\n",
        "tests/tinygo/testdata/zeroalloc.go\n"
    ],
    "medium": [
        "tests/tinygo/testdata/math.go\nn: +3.000000e-001\n  asin:      +3.046927e-001\n  asinh:     +2.956730e-001\n  acos:      +1.266104e+000\n  acosh:     NaN\n  atan:      +2.914568e-001\n  atanh:     +3.095196e-001\n  atan2:     +9.827937e-001\n  cbrt:      +6.694330e-001\n  ceil:      +1.000000e+000\n  cos:       +9.553365e-001\n  cosh:      +1.045339e+000\n  erf:       +3.286268e-001\n  erfc:      +6.713732e-001\n  exp:       +1.349859e+000\n  expm1:     +3.498588e-001\n  exp2:      +1.231144e+000\n  floor:     +0.000000e+000\n  frexp:     +6.000000e-001 -1\n  hypot:     +6.708204e-001\n  ldexp:     +1.200000e+000\n  log:       -1.203973e+000\n  log1p:     +2.623643e-001\n  log10:     -5.228787e-001\n  log2:      -1.736966e+000\n  max:       +1.300000e+000\n  min:       +3.000000e-001\n  mod:       +3.000000e-001\n  modf:      +0.000000e+000 +3.000000e-001\n  pow:       +6.968453e-001\n  remainder: -2.000000e-001\n  sin:       +2.955202e-001\n  sinh:      +3.045203e-001\n  tan:       +3.093362e-001\n  tanh:      +2.913126e-001\n  trunc:     +0.000000e+000\nn: +1.500000e+000\n  asin:      NaN\n  asinh:     +1.194763e+000\n  acos:      NaN\n  acosh:     +9.624237e-001\n  atan:      +9.827937e-001\n  atanh:     NaN\n  atan2:     +1.438245e+000\n  cbrt:      +1.144714e+000\n  ceil:      +2.000000e+000\n  cos:       +7.073720e-002\n  cosh:      +2.352410e+000\n  erf:       +9.661051e-001\n  erfc:      +3.389485e-002\n  exp:       +4.481689e+000\n  expm1:     +3.481689e+000\n  exp2:      +2.828427e+000\n  floor:     +1.000000e+000\n  frexp:     +7.500000e-001 1\n  hypot:     +3.354102e+000\n  ldexp:     +6.000000e+000\n  log:       +4.054651e-001\n  log1p:     +9.162907e-001\n  log10:     +1.760913e-001\n  log2:      +5.849625e-001\n  max:       +2.500000e+000\n  min:       +1.500000e+000\n  mod:       +1.500000e+000\n  modf:      +1.000000e+000 +5.000000e-001\n  pow:       +1.837117e+000\n  remainder: -2.000000e-001\n  sin:       +9.974950e-001\n  sinh:      +2.129279e+000\n  tan:       +1.410142e+001\n  tanh:      +9.051483e-001\n  trunc:     +1.000000e+000\nn: +2.600000e+000\n  asin:      NaN\n  asinh:     +1.683743e+000\n  acos:      NaN\n  acosh:     +1.609438e+000\n  atan:      +1.203622e+000\n  atanh:     NaN\n  atan2:     +1.494024e+000\n  cbrt:      +1.375069e+000\n  ceil:      +3.000000e+000\n  cos:       -8.568888e-001\n  cosh:      +6.769006e+000\n  erf:       +9.997640e-001\n  erfc:      +2.360344e-004\n  exp:       +1.346374e+001\n  expm1:     +1.246374e+001\n  exp2:      +6.062866e+000\n  floor:     +2.000000e+000\n  frexp:     +6.500000e-001 2\n  hypot:     +5.813777e+000\n  ldexp:     +1.040000e+001\n  log:       +9.555114e-001\n  log1p:     +1.280934e+000\n  log10:     +4.149733e-001\n  log2:      +1.378512e+000\n  max:       +3.600000e+000\n  min:       +2.600000e+000\n  mod:       +2.600000e+000\n  modf:      +2.000000e+000 +6.000000e-001\n  pow:       +1.199308e+001\n  remainder: -2.000000e-001\n  sin:       +5.155014e-001\n  sinh:      +6.694732e+000\n  tan:       -6.015966e-001\n  tanh:      +9.890274e-001\n  trunc:     +2.000000e+000\nn: -1.100000e+000\n  asin:      NaN\n  asinh:     -9.503469e-001\n  acos:      NaN\n  acosh:     NaN\n  atan:      -8.329813e-001\n  atanh:     NaN\n  atan2:     -1.390943e+000\n  cbrt:      -1.032280e+000\n  ceil:      -1.000000e+000\n  cos:       +4.535961e-001\n  cosh:      +1.668519e+000\n  erf:       -8.802051e-001\n  erfc:      +1.880205e+000\n  exp:       +3.328711e-001\n  expm1:     -6.671289e-001\n  exp2:      +4.665165e-001\n  floor:     -2.000000e+000\n  frexp:     -5.500000e-001 1\n  hypot:     +2.459675e+000\n  ldexp:     -4.400000e+000\n  log:       NaN\n  log1p:     NaN\n  log10:     NaN\n  log2:      NaN\n  max:       -1.000000e-001\n  min:       -1.100000e+000\n  mod:       -1.000000e-001\n  modf:      -1.000000e+000 -1.000000e-001\n  pow:       NaN\n  remainder: -2.000000e-001\n  sin:       -8.912074e-001\n  sinh:      -1.335647e+000\n  tan:       -1.964760e+000\n  tanh:      -8.004990e-001\n  trunc:     -1.000000e+000\nn: -3.100000e+000\n  asin:      NaN\n  asinh:     -1.849604e+000\n  acos:      NaN\n  acosh:     NaN\n  atan:      -1.258754e+000\n  atanh:     NaN\n  atan2:     -1.506369e+000\n  cbrt:      -1.458100e+000\n  ceil:      -3.000000e+000\n  cos:       -9.991352e-001\n  cosh:      +1.112150e+001\n  erf:       -9.999884e-001\n  erfc:      +1.999988e+000\n  exp:       +4.504920e-002\n  expm1:     -9.549508e-001\n  exp2:      +1.166291e-001\n  floor:     -4.000000e+000\n  frexp:     -7.750000e-001 2\n  hypot:     +6.931811e+000\n  ldexp:     -1.240000e+001\n  log:       NaN\n  log1p:     NaN\n  log10:     NaN\n  log2:      NaN\n  max:       -2.100000e+000\n  min:       -3.100000e+000\n  mod:       -1.000000e+000\n  modf:      -3.000000e+000 -1.000000e-001\n  pow:       NaN\n  remainder: -2.000000e-001\n  sin:       -4.158066e-002\n  sinh:      -1.107645e+001\n  tan:       +4.161665e-002\n  tanh:      -9.959494e-001\n  trunc:     -3.000000e+000\nn: -3.800000e+000\n  asin:      NaN\n  asinh:     -2.045028e+000\n  acos:      NaN\n  acosh:     NaN\n  atan:      -1.313473e+000\n  atanh:     NaN\n  atan2:     -1.518213e+000\n  cbrt:      -1.560491e+000\n  ceil:      -3.000000e+000\n  cos:       -7.909677e-001\n  cosh:      +2.236178e+001\n  erf:       -9.999999e-001\n  erfc:      +2.000000e+000\n  exp:       +2.237077e-002\n  expm1:     -9.776292e-001\n  exp2:      +7.179365e-002\n  floor:     -4.000000e+000\n  frexp:     -9.500000e-001 2\n  hypot:     +8.497058e+000\n  ldexp:     -1.520000e+001\n  log:       NaN\n  log1p:     NaN\n  log10:     NaN\n  log2:      NaN\n  max:       -2.800000e+000\n  min:       -3.800000e+000\n  mod:       -1.000000e+000\n  modf:      -3.000000e+000 -8.000000e-001\n  pow:       NaN\n  remainder: -2.000000e-001\n  sin:       +6.118579e-001\n  sinh:      -2.233941e+001\n  tan:       -7.735561e-001\n  tanh:      -9.989996e-001\n  trunc:     -3.000000e+000\n",
        "tests/tinygo/testdata/sort.go\nstrings\nggg\nfff\ncccc\nbbb\naaaa\nint64s\n1923\n123\n6\n3\n3\n2\n1\n1\n0\n-29\n-123\nuint64s\n1923\n123\n29\n6\n3\n3\n2\n1\n1\n0\nint32s\n1923\n123\n6\n3\n3\n2\n1\n1\n0\n-29\n-123\nuint32s\n1923\n123\n29\n6\n3\n3\n2\n1\n1\n0\nint16s\n1923\n123\n6\n3\n3\n2\n1\n1\n0\n-29\n-123\nuint16s\n1923\n123\n29\n6\n3\n3\n2\n1\n1\n0\nint8s\n123\n6\n3\n3\n2\n1\n1\n0\n-29\n-123\nuint8s\n123\n29\n6\n3\n3\n2\n1\n1\n0\nints\n123\n6\n3\n3\n2\n1\n1\n0\n-29\n-123\nuints\n123\n29\n6\n3\n3\n2\n1\n1\n0\nstructs\nstruct 2\nstruct 4\nstruct 1\nstruct 3\n"
    ],
    "hard": [
        "tests/tinygo/testdata/atomic.go\nAddInt32: 3 3\nAddInt64: 3 3\nAddUint32: 13 13\nAddUint64: 13 13\nAddUintptr: 13 13\nSwapInt32: 3 33\nSwapInt64: 3 33\nSwapUint32: 13 33\nSwapUint64: 13 33\nSwapUintptr: 13 33\nSwapPointer: true true\nCompareAndSwapInt32: false -5\nCompareAndSwapInt32: true 3\nCompareAndSwapInt64: false -5\nCompareAndSwapInt64: true 3\nCompareAndSwapUint32: false 5\nCompareAndSwapUint32: true 3\nCompareAndSwapUint64: false 5\nCompareAndSwapUint64: true 3\nCompareAndSwapUintptr: false 5\nCompareAndSwapUintptr: true 3\nCompareAndSwapPointer: false true\nCompareAndSwapPointer: true true\nLoadInt32: 3\nLoadInt64: 3\nLoadUint32: 3\nLoadUint64: 3\nLoadUintptr: 3\nLoadPointer: true\nStoreInt32: -20\nStoreInt64: -20\nStoreUint32: 20\nStoreUint64: 20\nStoreUintptr: 20\nStorePointer: true\ndeferred atomic add: 8\ndeferred volatile store: 22\n",
        "tests/tinygo/testdata/cgo/extra.go\n",
        "tests/tinygo/testdata/cgo/main.go\n",
        "tests/tinygo/testdata/channel.go\nlen, cap of channel: 1 2 false\nlen, cap of channel: 0 0 false\nrecv from open channel: 1 true\nreceived num: 2\nreceived num: 3\nslept\nreceived num: 4\nreceived num: 5\nreceived num: 6\nreceived num: 7\nreceived num: 8\nrecv from closed channel: 0 false\ncomplex128: (+7.000000e+000+1.050000e+001i)\nsum of n: 149\nsum: 25\nsum: 29\nsum: 33\nsum(100): 4950\ndeadlocking\nselect no-op\nafter no-op\nsum: 5\ndid send one\nselect one n: 0\nselect n from chan: 55\nselect n from closed chan: 0\nselect send\nsum: 235\nnon-concurrent channel receive: 1\nnon-concurrent channel receive: 2\nclosed buffered channel receive: 3\nclosed buffered channel receive: 4\nclosed buffered channel receive: 0\nhybrid buffered channel receive: 2\nblocking select sum: 3\n",
        "tests/tinygo/testdata/embed/embed.go\n",
        "tests/tinygo/testdata/env.go\nENV1: VALUE1\nENV2: VALUE2\n\narg: first\narg: second\n",
        "tests/tinygo/testdata/filesystem.go\nabcdefg\n1\n2\n3\n4\n5\n",
        "tests/tinygo/testdata/gc.go\nok\n",
        "tests/tinygo/testdata/generics.go\nadd: 8\nadd: 8\nvalue: 101\nvalue: 101\nvalue: 501\nvalue: 501\n",
        "tests/tinygo/testdata/goroutines.go\ninit\ngoroutine in init\nmain 1\nsub 1\nmain 2\nsub 2\nmain 3\nwait:\n  wait start\n  wait end\nend waiting\nvalue produced after some time: 42\nnon-blocking goroutine\ndone with non-blocking goroutine\nasync interface method call\nslept inside func pointer 8\nslept inside closure, with value: 20 8\nclosure go call result: 1\npre-acquired mutex\nreleasing mutex\nacquired mutex from goroutine\nreleased mutex from goroutine\nre-acquired mutex\ndone\ncalled: Foo.Nowait\ncalled: Foo.Wait\n  ...waited\ndone with 'go on interface'\n",
        "tests/tinygo/testdata/interface.go\nthing: foo\nThing.Print: foo\nis int: 5\nis byte: 120\nis string: foo\nis Foo: 18\nis Thing: foo\nis *Thing: foo\nis *Thing: foo\nis struct{n int}\nis struct{n int `foo:\"bar\"`}\nis Doubler: 6\nis Tuple: 1 7 11 13\nArray len: 4\nis Tuple: 1 7 11 13\nArrayStruct.Print: 4 3\nis Tuple: 0 8 16 24\nSmallPair.Print: 3 5\nStringer.String(): foo\nStringer.(*Thing).String(): foo\ns has String() method: foo\nnested switch: true\nByte():  3\nnon-blocking call on sometimes-blocking interface\nslept 1ms\nslept 1ms\ntype is int\ntype is *int\ntype is **int\n",
        "tests/tinygo/testdata/json.go\nint: 3\nfloat64: 3.14\nstring: \"foo\"\nslice of strings: [\"foo\",\"bar\"]\n",
        "tests/tinygo/testdata/map.go\nmap length: 2\nmap read: answer = 42\n  answer = 42\n  foo = 3\nmap length: 1\nmap read: data = 3\n  data = 3\nmap length: 12\nmap read: three = 3\n  eight = 8\n  eleven = 11\n  five = 5\n  four = 4\n  nine = 9\n  one = 1\n  seven = 7\n  six = 6\n  ten = 10\n  three = 3\n  twelve = 12\n  two = 2\nmap length: 12\nmap read: ten = 10\n  eight = 8\n  eleven = 11\n  five = 5\n  four = 4\n  nine = 9\n  one = 1\n  seven = 7\n  six = 6\n  ten = 10\n  three = 3\n  twelve = 12\n  two = 2\nmap length: 11\nmap read: seven = 7\n  eight = 8\n  eleven = 11\n  five = 5\n  four = 4\n  nine = 9\n  one = 1\n  seven = 7\n  ten = 10\n  three = 3\n  twelve = 12\n  two = 2\nlookup with comma-ok: eight 8 true\nlookup with comma-ok: nokey 0 false\nfalse true 2\ntrue false 0\nnilmap: 0\n4\n42\nnilbinmap: 0\n4321\n5555\nitfMap[3]: 0\nitfMap[3.14]: 3\nitfMap[8]: 8\nitfMap[uint8(8)]: 80\nitfMap[\"eight\"]: 800\nitfMap[[2]int{5, 2}]: 52\nitfMap[true]: 1\nitfMap[8]: 0\nitfMap: found key \"eight\": 800\nfloatMap[42]: 84\nfloatMap[43]: 0\nfloatMap[42]: 0\nfloatMap key, value: +3.140000e+000 6\nstructMap[{\"tau\", 6.28}]: 5\nstructMap[{\"Tau\", 6.28}]: 0\nstructMap[{\"tau\", 3.14}]: 0\nstructMap[{\"tau\", 6.28}]: 0\ntested preallocated map\ntested growing of a map\n2\n2\n2\n2\ndone\nno interface lookup failures\n",
        "tests/tinygo/testdata/rand.go\nrandom number check was successful\n",
        "tests/tinygo/testdata/reflect.go\nmatching types\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\n\nvalues of interfaces\nreflect type: bool\n  bool: true\nreflect type: bool\n  bool: false\nreflect type: int\n  int: 2000\nreflect type: int\n  int: -2000\nreflect type: uint\n  uint: 2000\nreflect type: int8\n  int: -3\nreflect type: int8\n  int: 3\nreflect type: uint8\n  uint: 200\nreflect type: int16\n  int: -300\nreflect type: int16\n  int: 300\nreflect type: uint16\n  uint: 50000\nreflect type: int32\n  int: 7340032\nreflect type: int32\n  int: -7340032\nreflect type: uint32\n  uint: 7340032\nreflect type: int64\n  int: 9895604649984\nreflect type: int64\n  int: -9895604649984\nreflect type: uint64\n  uint: 9895604649984\nreflect type: uintptr\n  uint: 12345\nreflect type: float32\n  float: +3.140000e+000\nreflect type: float64\n  float: +3.140000e+000\nreflect type: complex64\n  complex: (+1.200000e+000+3.000000e-001i)\nreflect type: complex128\n  complex: (+1.300000e+000+4.000000e-001i)\nreflect type: int\n  int: 32\nreflect type: string\n  string: foo 3\n  reflect type: uint8\n    uint: 102\n  reflect type: uint8\n    uint: 111\n  reflect type: uint8\n    uint: 111\nreflect type: unsafe.Pointer\n  pointer: true\nreflect type: chan\n  chan: int\n  nil: true\nreflect type: chan\n  chan: int\n  nil: true\nreflect type: ptr\n  pointer: true int\n  nil: false\n  reflect type: int settable=true addrable=true\n    int: 0\nreflect type: ptr\n  pointer: true interface\n  nil: false\n  reflect type: interface settable=true addrable=true\n    interface\n    nil: true\nreflect type: ptr\n  pointer: true int\n  nil: false\n  reflect type: int settable=true addrable=true\n    int: 42\nreflect type: ptr\n  pointer: true int\n  nil: false\n  reflect type: int settable=true addrable=true\n    int: 0\nreflect type: slice comparable=false\n  slice: uint8 3 3\n  pointer: true\n  nil: false\n  indexing: 0\n  reflect type: uint8 settable=true addrable=true\n    uint: 1\n  indexing: 1\n  reflect type: uint8 settable=true addrable=true\n    uint: 2\n  indexing: 2\n  reflect type: uint8 settable=true addrable=true\n    uint: 3\nreflect type: slice comparable=false\n  slice: uint8 2 5\n  pointer: true\n  nil: false\n  indexing: 0\n  reflect type: uint8 settable=true addrable=true\n    uint: 0\n  indexing: 1\n  reflect type: uint8 settable=true addrable=true\n    uint: 0\nreflect type: slice comparable=false\n  slice: int32 2 2\n  pointer: true\n  nil: false\n  indexing: 0\n  reflect type: int32 settable=true addrable=true\n    int: 3\n  indexing: 1\n  reflect type: int32 settable=true addrable=true\n    int: 5\nreflect type: slice comparable=false\n  slice: string 2 2\n  pointer: true\n  nil: false\n  indexing: 0\n  reflect type: string settable=true addrable=true\n    string: xyz 3\n    reflect type: uint8\n      uint: 120\n    reflect type: uint8\n      uint: 121\n    reflect type: uint8\n      uint: 122\n  indexing: 1\n  reflect type: string settable=true addrable=true\n    string: Z 1\n    reflect type: uint8\n      uint: 90\nreflect type: slice comparable=false\n  slice: uint8 0 0\n  pointer: false\n  nil: true\nreflect type: slice comparable=false\n  slice: uint8 0 0\n  pointer: true\n  nil: false\nreflect type: slice comparable=false\n  slice: float32 2 2\n  pointer: true\n  nil: false\n  indexing: 0\n  reflect type: float32 settable=true addrable=true\n    float: +1.000000e+000\n  indexing: 1\n  reflect type: float32 settable=true addrable=true\n    float: +1.320000e+000\nreflect type: slice comparable=false\n  slice: float64 2 2\n  pointer: true\n  nil: false\n  indexing: 0\n  reflect type: float64 settable=true addrable=true\n    float: +1.000000e+000\n  indexing: 1\n  reflect type: float64 settable=true addrable=true\n    float: +1.640000e+000\nreflect type: slice comparable=false\n  slice: complex64 2 2\n  pointer: true\n  nil: false\n  indexing: 0\n  reflect type: complex64 settable=true addrable=true\n    complex: (+1.000000e+000+0.000000e+000i)\n  indexing: 1\n  reflect type: complex64 settable=true addrable=true\n    complex: (+1.640000e+000+3.000000e-001i)\nreflect type: slice comparable=false\n  slice: complex128 2 2\n  pointer: true\n  nil: false\n  indexing: 0\n  reflect type: complex128 settable=true addrable=true\n    complex: (+1.000000e+000+0.000000e+000i)\n  indexing: 1\n  reflect type: complex128 settable=true addrable=true\n    complex: (+1.128000e+000+4.000000e-001i)\nreflect type: slice comparable=false\n  slice: uint8 3 3\n  pointer: true\n  nil: false\n  indexing: 0\n  reflect type: uint8 settable=true addrable=true\n    uint: 5\n  indexing: 1\n  reflect type: uint8 settable=true addrable=true\n    uint: 3\n  indexing: 2\n  reflect type: uint8 settable=true addrable=true\n    uint: 11\nreflect type: array\n  array: 3 int64 24\n  reflect type: int64\n    int: 5\n  reflect type: int64\n    int: 8\n  reflect type: int64\n    int: 2\nreflect type: array\n  array: 2 uint8 2\n  reflect type: uint8\n    uint: 3\n  reflect type: uint8\n    uint: 5\nreflect type: func comparable=false\n  func\n  nil: true\nreflect type: func comparable=false\n  func\n  nil: false\nreflect type: map comparable=false\n  map\n  nil: true\nreflect type: map comparable=false\n  map\n  nil: false\nreflect type: struct\n  struct: 0\nreflect type: struct\n  struct: 1\n  field: 0 error\n  pkg: main\n  tag: \"\"\n  embedded: true\n  exported: false\n  reflect type: interface caninterface=false\n    interface\n    nil: true\nreflect type: struct\n  struct: 3\n  field: 0 a\n  pkg: main\n  tag: \"\"\n  embedded: false\n  exported: false\n  reflect type: uint8 caninterface=false\n    uint: 42\n  field: 1 b\n  pkg: main\n  tag: \"\"\n  embedded: false\n  exported: false\n  reflect type: int16 caninterface=false\n    int: 321\n  field: 2 c\n  pkg: main\n  tag: \"\"\n  embedded: false\n  exported: false\n  reflect type: int8 caninterface=false\n    int: 123\nreflect type: struct comparable=false\n  struct: 5\n  field: 0 n\n  pkg: main\n  tag: \"foo:\\\"bar\\\"\"\n  embedded: false\n  exported: false\n  reflect type: int caninterface=false\n    int: 5\n  field: 1 some\n  pkg: main\n  tag: \"some\\x00tag\"\n  embedded: false\n  exported: false\n  reflect type: struct caninterface=false\n    struct: 2\n    field: 0 X\n    pkg: \n    tag: \"\"\n    embedded: false\n    exported: true\n    reflect type: int16 caninterface=false\n      int: -5\n    field: 1 Y\n    pkg: \n    tag: \"\"\n    embedded: false\n    exported: true\n    reflect type: int16 caninterface=false\n      int: 3\n  field: 2 zero\n  pkg: main\n  tag: \"\"\n  embedded: false\n  exported: false\n  reflect type: struct caninterface=false\n    struct: 0\n  field: 3 buf\n  pkg: main\n  tag: \"\"\n  embedded: false\n  exported: false\n  reflect type: slice caninterface=false comparable=false\n    slice: uint8 2 2\n    pointer: true\n    nil: false\n    indexing: 0\n    reflect type: uint8 addrable=true caninterface=false\n      uint: 71\n    indexing: 1\n    reflect type: uint8 addrable=true caninterface=false\n      uint: 111\n  field: 4 Buf\n  pkg: \n  tag: \"\"\n  embedded: false\n  exported: true\n  reflect type: slice comparable=false\n    slice: uint8 1 1\n    pointer: true\n    nil: false\n    indexing: 0\n    reflect type: uint8 settable=true addrable=true\n      uint: 88\nreflect type: ptr\n  pointer: true struct\n  nil: false\n  reflect type: struct settable=true addrable=true\n    struct: 2\n    field: 0 next\n    pkg: main\n    tag: \"description:\\\"chain\\\"\"\n    embedded: false\n    exported: false\n    reflect type: ptr addrable=true caninterface=false\n      pointer: false struct\n      nil: true\n    field: 1 foo\n    pkg: main\n    tag: \"\"\n    embedded: false\n    exported: false\n    reflect type: int addrable=true caninterface=false\n      int: 42\nreflect type: struct\n  struct: 2\n  field: 0 A\n  pkg: \n  tag: \"\"\n  embedded: false\n  exported: true\n  reflect type: uintptr\n    uint: 2\n  field: 1 B\n  pkg: \n  tag: \"\"\n  embedded: false\n  exported: true\n  reflect type: uintptr\n    uint: 3\nreflect type: slice comparable=false\n  slice: interface 3 3\n  pointer: true\n  nil: false\n  indexing: 0\n  reflect type: interface settable=true addrable=true\n    interface\n    nil: false\n    reflect type: int\n      int: 3\n  indexing: 1\n  reflect type: interface settable=true addrable=true\n    interface\n    nil: false\n    reflect type: string\n      string: str 3\n      reflect type: uint8\n        uint: 115\n      reflect type: uint8\n        uint: 116\n      reflect type: uint8\n        uint: 114\n  indexing: 2\n  reflect type: interface settable=true addrable=true\n    interface\n    nil: false\n    reflect type: complex128\n      complex: (-4.000000e+000+2.500000e+000i)\nreflect type: ptr\n  pointer: true int8\n  nil: false\n  reflect type: int8 settable=true addrable=true\n    int: 5\nreflect type: ptr\n  pointer: true int16\n  nil: false\n  reflect type: int16 settable=true addrable=true\n    int: -800\nreflect type: ptr\n  pointer: true int32\n  nil: false\n  reflect type: int32 settable=true addrable=true\n    int: 100000000\nreflect type: ptr\n  pointer: true int64\n  nil: false\n  reflect type: int64 settable=true addrable=true\n    int: -1000000000000\nreflect type: ptr\n  pointer: true complex128\n  nil: false\n  reflect type: complex128 settable=true addrable=true\n    complex: (-8.000000e+000-2.000000e+006i)\n\nsizes:\nint8 1 8\nint16 2 16\nint32 4 32\nint64 8 64\nuint8 1 8\nuint16 2 16\nuint32 4 32\nuint64 8 64\nfloat32 4 32\nfloat64 8 64\ncomplex64 8 64\ncomplex128 16 128\noffset for int64 matches: true\noffset for complex128 matches: true\ntype assertion succeeded for unreferenced type\n\nalignment / offset:\nstruct{[0]func(); byte}: true\n\nstruct tags\nblue gopher\n\nv.Interface() method\nkind: interface\nint 5\n",
        "tests/tinygo/testdata/slice.go\nfoo is nil? false false\nfoo: len=4 cap=4 data: 1 2 4 5\nbar: len=3 cap=5 data: 0 0 0\nfoo[1:2]: len=1 cap=3 data: 2\nsum foo: 12\ncopy foo -\u003e bar: 3\nbar: len=3 cap=5 data: 1 2 4\nslice is nil? true true\ngrow: len=0 cap=0 data:\ngrow: len=1 cap=1 data: 42\ngrow: len=3 cap=4 data: 42 -1 -2\ngrow: len=7 cap=8 data: 42 -1 -2 1 2 4 5\ngrow: len=7 cap=8 data: 42 -1 -2 1 2 4 5\ngrow: len=14 cap=16 data: 42 -1 -2 1 2 4 5 42 -1 -2 1 2 4 5\nbytes: len=6 cap=6 data: 1 2 3 102 111 111\nslice to array pointer: 1 -2 20 4\nunsafe.Add array: 1 5 8 4\nunsafe.Slice array: 3 3 9 15 4\nlen: 0\n",
        "tests/tinygo/testdata/stdlib.go\nstdin:  /dev/stdin\nstdout: /dev/stdout\nstderr: /dev/stderr\npseudorandom number: 1298498081\nstrings.IndexByte: 2\nstrings.Replace: An-example-string\n",
        "tests/tinygo/testdata/testing.go\n--- FAIL: TestBar (0.00s)\n    log Bar\n    log g\n        h\n        i\n        \n    --- FAIL: TestBar/Bar2 (0.00s)\n        log Bar2\n            a\n            b\n            c\n        failed\n        after failed\n    log Bar end\n--- FAIL: TestAllLowercase (0.00s)\n    --- FAIL: TestAllLowercase/BETA (0.00s)\n        expected lowercase name, got BETA\n    --- FAIL: TestAllLowercase/BELTA (0.00s)\n        expected lowercase name, got BELTA\nFAIL\nexitcode: 1\n",
        "tests/tinygo/testdata/timers.go\nwaiting on ticker\n - after 150ms\n - after 200ms\nwaited on ticker at 500ms\n - after 300ms\nwaited on ticker at 1000ms\nticker was stopped (didn't send anything after 750ms)\nwaiting on timer\n - after 200ms\n - after 400ms\nwaited on timer at 750ms\ntimer reset: false\nwaiting on timer\n - after 200ms\n - after 400ms\nwaited on timer at 750ms\n"
    ]
}