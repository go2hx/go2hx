=== RUN  TestNewBuffer
-- PASS: TestNewBuffer

=== RUN  TestNewBufferString
-- PASS: TestNewBufferString

=== RUN  TestBasicOperations
-- PASS: TestBasicOperations

=== RUN  TestLargeStringWrites
-- PASS: TestLargeStringWrites

=== RUN  TestLargeByteWrites
-- PASS: TestLargeByteWrites

=== RUN  TestLargeStringReads
-- PASS: TestLargeStringReads

=== RUN  TestLargeByteReads
-- PASS: TestLargeByteReads

=== RUN  TestMixedReadsAndWrites
-- PASS: TestMixedReadsAndWrites

=== RUN  TestCapWithPreallocatedSlice
-- PASS: TestCapWithPreallocatedSlice

=== RUN  TestCapWithSliceAndWrittenData
-- PASS: TestCapWithSliceAndWrittenData

=== RUN  TestNil
-- PASS: TestNil

=== RUN  TestReadFrom
-- PASS: TestReadFrom

=== RUN  TestReadFromPanicReader
-- PASS: TestReadFromPanicReader

=== RUN  TestReadFromNegativeReader
-- PASS: TestReadFromNegativeReader

=== RUN  TestWriteTo
-- PASS: TestWriteTo

=== RUN  TestWriteAppend
-- PASS: TestWriteAppend

=== RUN  TestRuneIO
-- PASS: TestRuneIO

=== RUN  TestWriteInvalidRune
-- PASS: TestWriteInvalidRune

=== RUN  TestNext
-- PASS: TestNext

=== RUN  TestReadBytes
-- PASS: TestReadBytes

=== RUN  TestReadString
-- PASS: TestReadString

=== RUN  TestGrow
./_internal/bytes_test/Bytes_test_testGrow.hx:3: testGrow skip function
-- PASS: TestGrow

=== RUN  TestGrowOverflow
-- PASS: TestGrowOverflow

=== RUN  TestReadEmptyAtEOF
-- PASS: TestReadEmptyAtEOF

=== RUN  TestUnreadByte
-- PASS: TestUnreadByte

=== RUN  TestBufferGrowth
-- PASS: TestBufferGrowth

=== RUN  TestEqual
-- PASS: TestEqual

=== RUN  TestEqualExhaustive
-- PASS: TestEqualExhaustive

=== RUN  TestNotEqual
-- PASS: TestNotEqual

=== RUN  TestIndex
<invalid reflect.Value>(%!q(MISSING),%!q(MISSING)) = %!v(MISSING); want %!v(MISSING)<invalid reflect.Value>(%!q(MISSING),%!q(MISSING)) = %!v(MISSING); want %!v(MISSING)<invalid reflect.Value>(%!q(MISSING),%!q(MISSING)) = %!v(MISSING); want %!v(MISSING)<invalid reflect.Value>(%!q(MISSING),%!q(MISSING)) = %!v(MISSING); want %!v(MISSING)<invalid reflect.Value>(%!q(MISSING),%!q(MISSING)) = %!v(MISSING); want %!v(MISSING)<invalid reflect.Value>(%!q(MISSING),%!q(MISSING)) = %!v(MISSING); want %!v(MISSING)<invalid reflect.Value>(%!q(MISSING),%!q(MISSING)) = %!v(MISSING); want %!v(MISSING)<invalid reflect.Value>(%!q(MISSING),%!q(MISSING)) = %!v(MISSING); want %!v(MISSING)<invalid reflect.Value>(%!q(MISSING),%!q(MISSING)) = %!v(MISSING); want %!v(MISSING)<invalid reflect.Value>(%!q(MISSING),%!q(MISSING)) = %!v(MISSING); want %!v(MISSING)<invalid reflect.Value>(%!q(MISSING),%!q(MISSING)) = %!v(MISSING); want %!v(MISSING)<invalid reflect.Value>(%!q(MISSING),%!q(MISSING)) = %!v(MISSING); want %!v(MISSING)<invalid reflect.Value>(%!q(MISSING),%!q(MISSING)) = %!v(MISSING); want %!v(MISSING)<invalid reflect.Value>(%!q(MISSING),%!q(MISSING)) = %!v(MISSING); want %!v(MISSING)<invalid reflect.Value>(%!q(MISSING),%!q(MISSING)) = %!v(MISSING); want %!v(MISSING)<invalid reflect.Value>(%!q(MISSING),%!q(MISSING)) = %!v(MISSING); want %!v(MISSING)<invalid reflect.Value>(%!q(MISSING),%!q(MISSING)) = %!v(MISSING); want %!v(MISSING)<invalid reflect.Value>(%!q(MISSING),%!q(MISSING)) = %!v(MISSING); want %!v(MISSING)<invalid reflect.Value>(%!q(MISSING),%!q(MISSING)) = %!v(MISSING); want %!v(MISSING)<invalid reflect.Value>(%!q(MISSING),%!q(MISSING)) = %!v(MISSING); want %!v(MISSING)<invalid reflect.Value>(%!q(MISSING),%!q(MISSING)) = %!v(MISSING); want %!v(MISSING)<invalid reflect.Value>(%!q(MISSING),%!q(MISSING)) = %!v(MISSING); want %!v(MISSING)<invalid reflect.Value>(%!q(MISSING),%!q(MISSING)) = %!v(MISSING); want %!v(MISSING)<invalid reflect.Value>(%!q(MISSING),%!q(MISSING)) = %!v(MISSING); want %!v(MISSING)<invalid reflect.Value>(%!q(MISSING),%!q(MISSING)) = %!v(MISSING); want %!v(MISSING)<invalid reflect.Value>(%!q(MISSING),%!q(MISSING)) = %!v(MISSING); want %!v(MISSING)<invalid reflect.Value>(%!q(MISSING),%!q(MISSING)) = %!v(MISSING); want %!v(MISSING)<invalid reflect.Value>(%!q(MISSING),%!q(MISSING)) = %!v(MISSING); want %!v(MISSING)<invalid reflect.Value>(%!q(MISSING),%!q(MISSING)) = %!v(MISSING); want %!v(MISSING)
-- FAIL: TestIndex

=== RUN  TestLastIndex
<invalid reflect.Value>(%!q(MISSING),%!q(MISSING)) = %!v(MISSING); want %!v(MISSING)
-- FAIL: TestLastIndex

=== RUN  TestIndexAny
-- PASS: TestIndexAny

=== RUN  TestLastIndexAny
-- PASS: TestLastIndexAny

=== RUN  TestIndexByte
-- PASS: TestIndexByte

=== RUN  TestLastIndexByte
-- PASS: TestLastIndexByte

=== RUN  TestIndexByteBig
-- PASS: TestIndexByteBig

=== RUN  TestIndexByteSmall
-- PASS: TestIndexByteSmall

=== RUN  TestIndexRune
-- PASS: TestIndexRune

=== RUN  TestCountByte
-- PASS: TestCountByte

=== RUN  TestCountByteNoMatch
-- PASS: TestCountByteNoMatch

=== RUN  TestSplit
./_internal/bytes_test/Bytes_test_testSplit.hx:3: testSplit skip function
-- PASS: TestSplit

=== RUN  TestSplitAfter
-- PASS: TestSplitAfter

=== RUN  TestFields
-- PASS: TestFields

=== RUN  TestFieldsFunc
-- PASS: TestFieldsFunc

=== RUN  TestMap
-- PASS: TestMap

=== RUN  TestToUpper
-- PASS: TestToUpper

=== RUN  TestToLower
-- PASS: TestToLower

=== RUN  TestToValidUTF8
-- PASS: TestToValidUTF8

=== RUN  TestTrimSpace
-- PASS: TestTrimSpace

=== RUN  TestRepeat
-- PASS: TestRepeat

=== RUN  TestRepeatCatchesOverflow
-- PASS: TestRepeatCatchesOverflow

=== RUN  TestRunes
-- PASS: TestRunes

=== RUN  TestTrim
-- PASS: TestTrim

=== RUN  TestTrimFunc
-- PASS: TestTrimFunc

=== RUN  TestIndexFunc
-- PASS: TestIndexFunc

=== RUN  TestReplace
-- PASS: TestReplace

=== RUN  TestTitle
-- PASS: TestTitle

=== RUN  TestToTitle
-- PASS: TestToTitle

=== RUN  TestEqualFold
-- PASS: TestEqualFold

=== RUN  TestCut
-- PASS: TestCut

=== RUN  TestCutPrefix
-- PASS: TestCutPrefix

=== RUN  TestCutSuffix
-- PASS: TestCutSuffix

=== RUN  TestBufferGrowNegative
-- PASS: TestBufferGrowNegative

=== RUN  TestBufferTruncateNegative
-- PASS: TestBufferTruncateNegative

=== RUN  TestBufferTruncateOutOfRange
-- PASS: TestBufferTruncateOutOfRange

=== RUN  TestContains
-- PASS: TestContains

=== RUN  TestContainsAny
-- PASS: TestContainsAny

=== RUN  TestContainsRune
-- PASS: TestContainsRune

=== RUN  TestContainsFunc
-- PASS: TestContainsFunc

=== RUN  TestClone
./_internal/bytes_test/Bytes_test_testClone.hx:3: testClone skip function
-- PASS: TestClone

=== RUN  TestCompare
-- PASS: TestCompare

=== RUN  TestCompareIdenticalSlice
-- PASS: TestCompareIdenticalSlice

=== RUN  TestCompareBytes
./_internal/bytes_test/Bytes_test_testCompareBytes.hx:3: testCompareBytes skip function
-- PASS: TestCompareBytes

=== RUN  TestEndianBaseCompare
-- PASS: TestEndianBaseCompare

=== RUN  TestReader
-- PASS: TestReader

=== RUN  TestReadAfterBigSeek
-- PASS: TestReadAfterBigSeek

=== RUN  TestReaderAt
-- PASS: TestReaderAt

=== RUN  TestReaderAtConcurrent
-- PASS: TestReaderAtConcurrent

=== RUN  TestEmptyReaderConcurrent
-- PASS: TestEmptyReaderConcurrent

=== RUN  TestReaderWriteTo
-- PASS: TestReaderWriteTo

=== RUN  TestReaderLen
-- PASS: TestReaderLen

=== RUN  TestUnreadRuneError
-- PASS: TestUnreadRuneError

=== RUN  TestReaderDoubleUnreadRune
-- PASS: TestReaderDoubleUnreadRune

=== RUN  TestReaderCopyNothing
-- PASS: TestReaderCopyNothing

=== RUN  TestReaderLenSize
./_internal/bytes_test/Bytes_test_testReaderLenSize.hx:3: testReaderLenSize skip function
-- PASS: TestReaderLenSize

=== RUN  TestReaderReset
-- PASS: TestReaderReset

=== RUN  TestReaderZero
-- PASS: TestReaderZero

